{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"mixcr/overview/","text":"What the section is for? This section contains technical documentation and standards for the projects requiring such docs to exist. This includes descriptions of things like: data formats, algorithms, approaches to data analysis etc.","title":"What the section is for?"},{"location":"mixcr/overview/#what-the-section-is-for","text":"This section contains technical documentation and standards for the projects requiring such docs to exist. This includes descriptions of things like: data formats, algorithms, approaches to data analysis etc.","title":"What the section is for?"},{"location":"mixcr/getting-started/docker/","text":"Using with Docker Official MiXCR Docker repository is hosted on the GitHub along with this repo. Example: > docker run --rm \\ -e MI_LICENSE = \"...license-token...\" \\ -v /path/to/raw/data:/raw:ro \\ -v /path/to/put/results:/work \\ ghcr.io/milaboratory/mixcr/mixcr:latest \\ align -s hs \\ /raw/data_R1.fastq.gz \\ /raw/data_R2.fastq.gz \\ alignments.vdjca Tags The docker repo provides pre-built docker images for all release versions of MiXCR starting from 1.1. Images come in two flavours: \"mixcr only\" (i.e tag 4.0.0 ) and co-bundled \"mixcr + imgt reference\" (i.e. tag 4.0.0-imgt ), for the latter please see the license note below. All bundled versions before and including 4.0.0 contain IMGT reference version 202214-2 from here , this might be different from the images from the previous official docker registry on Docker Hub (which is now deprecated and planned for removal). See docker packages page for the full list of tags including development builds. Setting the license There are several ways to pass the license for mixcr when executed inside a container: Using environment variable: docker run \\ -e MI_LICENSE = \"...license-token...\" \\ .... Using license file: docker run \\ -v /path/to/mi.license:/opt/mixcr/mi.license:ro \\ .... If it is hard to mount mi.license file into already populated folder /opt/mixcr/ (i.e. in Kubernetes or with other container orchestration tools), you can tell MiXCR where to look for it: docker run \\ -v /path/to/folder_with_mi_license:/secrets:ro \\ -e MI_LICENSE_FILE = \"/secrets/milicense.txt\" \\ .... Migration from the previous docker images New docker images define mixcr startup script as an entrypoint of the image, compared to the previous docker repo where bash was used instead. So, what previously was executed this way: docker run ... old/mixcr/image/address:with_tag mixcr align ... now will be docker run ... new/mixcr/image/address:with_tag align ... For those who rely on other tools inside the image, beware, new build relies on a different base image and has slightly different layout. mixcr startup script is added to PATH environment variable, so even if you specify custom entrypoint, there is no need in using of full path to run mixcr . License notice for IMGT images Images with IMGT reference library contain data imported from IMGT and is subject to terms of use listed on http://www.imgt.org site. Data coming from IMGT server may be used for academic research only, provided that it is referred to IMGT\u00ae, and cited as \"IMGT\u00ae, the international ImMunoGeneTics information system\u00ae http://www.imgt.org (founder and director: Marie-Paule Lefranc, Montpellier, France).\" References to cite: Lefranc, M.-P. et al., Nucleic Acids Research, 27, 209-212 (1999) Cover of NAR; Ruiz, M. et al., Nucleic Acids Research, 28, 219-221 (2000); Lefranc, M.-P., Nucleic Acids Research, 29, 207-209 (2001); Lefranc, M.-P., Nucleic Acids Res., 31, 307-310 (2003); Lefranc, M.-P. et al., In Silico Biol., 5, 0006 (2004) [Epub], 5, 45-60 (2005); Lefranc, M.-P. et al., Nucleic Acids Res., 33, D593-D597 (2005) Full text, Lefranc, M.-P. et al., Nucleic Acids Research 2009 37(Database issue): D1006-D1012; doi:10.1093/nar/gkn838 Full text.","title":"Using with Docker"},{"location":"mixcr/getting-started/docker/#using-with-docker","text":"Official MiXCR Docker repository is hosted on the GitHub along with this repo. Example: > docker run --rm \\ -e MI_LICENSE = \"...license-token...\" \\ -v /path/to/raw/data:/raw:ro \\ -v /path/to/put/results:/work \\ ghcr.io/milaboratory/mixcr/mixcr:latest \\ align -s hs \\ /raw/data_R1.fastq.gz \\ /raw/data_R2.fastq.gz \\ alignments.vdjca","title":"Using with Docker"},{"location":"mixcr/getting-started/docker/#tags","text":"The docker repo provides pre-built docker images for all release versions of MiXCR starting from 1.1. Images come in two flavours: \"mixcr only\" (i.e tag 4.0.0 ) and co-bundled \"mixcr + imgt reference\" (i.e. tag 4.0.0-imgt ), for the latter please see the license note below. All bundled versions before and including 4.0.0 contain IMGT reference version 202214-2 from here , this might be different from the images from the previous official docker registry on Docker Hub (which is now deprecated and planned for removal). See docker packages page for the full list of tags including development builds.","title":"Tags"},{"location":"mixcr/getting-started/docker/#setting-the-license","text":"There are several ways to pass the license for mixcr when executed inside a container: Using environment variable: docker run \\ -e MI_LICENSE = \"...license-token...\" \\ .... Using license file: docker run \\ -v /path/to/mi.license:/opt/mixcr/mi.license:ro \\ .... If it is hard to mount mi.license file into already populated folder /opt/mixcr/ (i.e. in Kubernetes or with other container orchestration tools), you can tell MiXCR where to look for it: docker run \\ -v /path/to/folder_with_mi_license:/secrets:ro \\ -e MI_LICENSE_FILE = \"/secrets/milicense.txt\" \\ ....","title":"Setting the license"},{"location":"mixcr/getting-started/docker/#migration-from-the-previous-docker-images","text":"New docker images define mixcr startup script as an entrypoint of the image, compared to the previous docker repo where bash was used instead. So, what previously was executed this way: docker run ... old/mixcr/image/address:with_tag mixcr align ... now will be docker run ... new/mixcr/image/address:with_tag align ... For those who rely on other tools inside the image, beware, new build relies on a different base image and has slightly different layout. mixcr startup script is added to PATH environment variable, so even if you specify custom entrypoint, there is no need in using of full path to run mixcr .","title":"Migration from the previous docker images"},{"location":"mixcr/getting-started/docker/#license-notice-for-imgt-images","text":"Images with IMGT reference library contain data imported from IMGT and is subject to terms of use listed on http://www.imgt.org site. Data coming from IMGT server may be used for academic research only, provided that it is referred to IMGT\u00ae, and cited as \"IMGT\u00ae, the international ImMunoGeneTics information system\u00ae http://www.imgt.org (founder and director: Marie-Paule Lefranc, Montpellier, France).\" References to cite: Lefranc, M.-P. et al., Nucleic Acids Research, 27, 209-212 (1999) Cover of NAR; Ruiz, M. et al., Nucleic Acids Research, 28, 219-221 (2000); Lefranc, M.-P., Nucleic Acids Research, 29, 207-209 (2001); Lefranc, M.-P., Nucleic Acids Res., 31, 307-310 (2003); Lefranc, M.-P. et al., In Silico Biol., 5, 0006 (2004) [Epub], 5, 45-60 (2005); Lefranc, M.-P. et al., Nucleic Acids Res., 33, D593-D597 (2005) Full text, Lefranc, M.-P. et al., Nucleic Acids Research 2009 37(Database issue): D1006-D1012; doi:10.1093/nar/gkn838 Full text.","title":"License notice for IMGT images"},{"location":"mixcr/getting-started/installation/","text":"Installation Linux / MacOS Manual installation Download and extract mixcr : Create a folder where you want to install MiXCR and navigate to that folder. Bellow is the command that creates mixcr folder in your home directory. > mkdir ~/mixcr > cd ~/mixcr Go to MiXCR GitHub page and copy the link for latest build. The command bellow downloads MiXCR v4.0. For other builds replace the link with the one you obtained from GitHub. wget https://github.com/milaboratory/mixcr/releases/download/v4.0.0/mixcr-4.0.0.zip Unpack the zip archive using the unzip command > unzip mixcr-4.0.0.zip The output looks similar to this: Archive: mixcr-4.0.0.zip inflating: mixcr inflating: LICENSE inflating: mixcr.jar Check that mixcr works with the following command > ~/mixcr/mixcr -v The output should look similar to: MiXCR v ( built Fri Jul 15 01 :51:38 CEST 2022 ; rev = aa769be87b ; branch = tag-rework-2 ; host = Dmitrys-MacBook-Pro-2.local ) RepSeq.IO v1.4.1-1-master ( rev = 474ebe0f6e ) MiLib v2.0.0-11-master ( rev = ca59a3ad71 ) Built-in V/D/J/C library: repseqio.v2.0 Add MiXCR to your $PATH : MiXCR is now installed. To run it requires entering the path to the executable command on the command line. We want to be able to run MiXCR by simply entering the word mixcr on the command line. To accomplish this, we add it to your $PATH variable. Go into the directory where you unpacked mixcr and enter pwd . > cd ~/mixcr/ > pwd The output will be the full path to MiXCR directory /home/user/mixcr Then use the export command to add it into the $PATH variable. export PATH = /home/user/mixcr: $PATH Add export to bash.rc file It is better to add that command to your .bashrc file, so you won't have to repeat it every time you start a new session. echo \"export PATH=/home/user/mixcr:$PATH\" >> ~/.bashrc Anaconda package MiXCR has Anaconda repository to simplify installation of MiXCR using conda package manager. To install the latest stable MiXCR build with conda run: > conda install -c milaboratories mixcr to install a specific version run: > conda install -c milaboratories mixcr = 3 .0.12 mixcr package specifies openjdk as a dependency, if you already have Java installed on your system, it might be a good idea to prevent conda from installing another copy of JDK, to do that use --no-deps flag: > conda install -c milaboratories mixcr --no-deps Homebrew formula MiXCR has a Homerew formula to simplify installation of MiXCR using brew package manager.To install the latest stable MiXCR build with brew run: > brew tap milaboratory/all > brew install mixcr Windows Go to MiXCR GitHub page and download the latest build. Unpack the zip archive in the folder where you want MiXCR to be installed. You will see several file: For demonstration purposes lets use C:\\mixcr\\ folder. mixcr LICENSE mixcr.jar Open terminal and execute the following command shell java -jar C:\\mixcr\\mixcr.jar -v If everything is fine you will see an output similar to: MiXCR v ( built Fri Jul 15 01 :51:38 CEST 2022 ; rev = aa769be87b ; branch = tag-rework-2 ; host = Dmitrys-MacBook-Pro-2.local ) RepSeq.IO v1.4.1-1-master ( rev = 474ebe0f6e ) MiLib v2.0.0-11-master ( rev = ca59a3ad71 ) Built-in V/D/J/C library: repseqio.v2.0","title":"Installation"},{"location":"mixcr/getting-started/installation/#installation","text":"","title":"Installation"},{"location":"mixcr/getting-started/installation/#linux-macos","text":"","title":"Linux / MacOS"},{"location":"mixcr/getting-started/installation/#manual-installation","text":"Download and extract mixcr : Create a folder where you want to install MiXCR and navigate to that folder. Bellow is the command that creates mixcr folder in your home directory. > mkdir ~/mixcr > cd ~/mixcr Go to MiXCR GitHub page and copy the link for latest build. The command bellow downloads MiXCR v4.0. For other builds replace the link with the one you obtained from GitHub. wget https://github.com/milaboratory/mixcr/releases/download/v4.0.0/mixcr-4.0.0.zip Unpack the zip archive using the unzip command > unzip mixcr-4.0.0.zip The output looks similar to this: Archive: mixcr-4.0.0.zip inflating: mixcr inflating: LICENSE inflating: mixcr.jar Check that mixcr works with the following command > ~/mixcr/mixcr -v The output should look similar to: MiXCR v ( built Fri Jul 15 01 :51:38 CEST 2022 ; rev = aa769be87b ; branch = tag-rework-2 ; host = Dmitrys-MacBook-Pro-2.local ) RepSeq.IO v1.4.1-1-master ( rev = 474ebe0f6e ) MiLib v2.0.0-11-master ( rev = ca59a3ad71 ) Built-in V/D/J/C library: repseqio.v2.0 Add MiXCR to your $PATH : MiXCR is now installed. To run it requires entering the path to the executable command on the command line. We want to be able to run MiXCR by simply entering the word mixcr on the command line. To accomplish this, we add it to your $PATH variable. Go into the directory where you unpacked mixcr and enter pwd . > cd ~/mixcr/ > pwd The output will be the full path to MiXCR directory /home/user/mixcr Then use the export command to add it into the $PATH variable. export PATH = /home/user/mixcr: $PATH Add export to bash.rc file It is better to add that command to your .bashrc file, so you won't have to repeat it every time you start a new session. echo \"export PATH=/home/user/mixcr:$PATH\" >> ~/.bashrc","title":"Manual installation"},{"location":"mixcr/getting-started/installation/#anaconda-package","text":"MiXCR has Anaconda repository to simplify installation of MiXCR using conda package manager. To install the latest stable MiXCR build with conda run: > conda install -c milaboratories mixcr to install a specific version run: > conda install -c milaboratories mixcr = 3 .0.12 mixcr package specifies openjdk as a dependency, if you already have Java installed on your system, it might be a good idea to prevent conda from installing another copy of JDK, to do that use --no-deps flag: > conda install -c milaboratories mixcr --no-deps","title":"Anaconda package"},{"location":"mixcr/getting-started/installation/#homebrew-formula","text":"MiXCR has a Homerew formula to simplify installation of MiXCR using brew package manager.To install the latest stable MiXCR build with brew run: > brew tap milaboratory/all > brew install mixcr","title":"Homebrew formula"},{"location":"mixcr/getting-started/installation/#windows","text":"Go to MiXCR GitHub page and download the latest build. Unpack the zip archive in the folder where you want MiXCR to be installed. You will see several file: For demonstration purposes lets use C:\\mixcr\\ folder. mixcr LICENSE mixcr.jar Open terminal and execute the following command shell java -jar C:\\mixcr\\mixcr.jar -v If everything is fine you will see an output similar to: MiXCR v ( built Fri Jul 15 01 :51:38 CEST 2022 ; rev = aa769be87b ; branch = tag-rework-2 ; host = Dmitrys-MacBook-Pro-2.local ) RepSeq.IO v1.4.1-1-master ( rev = 474ebe0f6e ) MiLib v2.0.0-11-master ( rev = ca59a3ad71 ) Built-in V/D/J/C library: repseqio.v2.0","title":"Windows"},{"location":"mixcr/getting-started/license/","text":"License MiLaboratories Inc is a company holding all intellectual property rights on MiXCR software. Company distributes MiXCR under two types of licenses: (1) ACADEMIC LICENSE, which is free for use for academic scientists, PhD students and non-profit R&D centers, (2) BUSINESS LICENSE, which is a payable license for for-profit companies, for-profit use, and sponsored research. ACADEMIC LICENSE terms are available at: https://github.com/milaboratory/mixcr/blob/develop/LICENSE For ACADEMIC LICENSE go to https://licensing.milaboratories.com/ , for BUSINESS LICENSE email us on licensing@milaboratories.com . Cite When using MiXCR under ACADEMIC LICENSE in journal publications, please cite the following publications: Dmitriy A. Bolotin, Stanislav Poslavsky, Igor Mitrophanov, Mikhail Shugay, Ilgar Z. Mamedov, Ekaterina V. Putintseva, and Dmitriy M. Chudakov. \"MiXCR: software for comprehensive adaptive immunity profiling.\" Nature methods 12, no. 5 ( 2015 ): 380-381. \\ (Files referenced in this paper can be found here .) Dmitriy A. Bolotin, Stanislav Poslavsky, Alexey N. Davydov, Felix E. Frenkel, Lorenzo Fanchi, Olga I. Zolotareva, Saskia Hemmers, Ekaterina V. Putintseva, Anna S. Obraztsova, Mikhail Shugay, Ravshan I. Ataullakhanov, Alexander Y. Rudensky, Ton N. Schumacher & Dmitriy M. Chudakov. \"Antigen receptor repertoire profiling from RNA-seq data.\" Nature Biotechnology 35, 908\u2013911 ( 2017 )","title":"License"},{"location":"mixcr/getting-started/license/#license","text":"MiLaboratories Inc is a company holding all intellectual property rights on MiXCR software. Company distributes MiXCR under two types of licenses: (1) ACADEMIC LICENSE, which is free for use for academic scientists, PhD students and non-profit R&D centers, (2) BUSINESS LICENSE, which is a payable license for for-profit companies, for-profit use, and sponsored research. ACADEMIC LICENSE terms are available at: https://github.com/milaboratory/mixcr/blob/develop/LICENSE For ACADEMIC LICENSE go to https://licensing.milaboratories.com/ , for BUSINESS LICENSE email us on licensing@milaboratories.com .","title":"License"},{"location":"mixcr/getting-started/license/#cite","text":"When using MiXCR under ACADEMIC LICENSE in journal publications, please cite the following publications: Dmitriy A. Bolotin, Stanislav Poslavsky, Igor Mitrophanov, Mikhail Shugay, Ilgar Z. Mamedov, Ekaterina V. Putintseva, and Dmitriy M. Chudakov. \"MiXCR: software for comprehensive adaptive immunity profiling.\" Nature methods 12, no. 5 ( 2015 ): 380-381. \\ (Files referenced in this paper can be found here .) Dmitriy A. Bolotin, Stanislav Poslavsky, Alexey N. Davydov, Felix E. Frenkel, Lorenzo Fanchi, Olga I. Zolotareva, Saskia Hemmers, Ekaterina V. Putintseva, Anna S. Obraztsova, Mikhail Shugay, Ravshan I. Ataullakhanov, Alexander Y. Rudensky, Ton N. Schumacher & Dmitriy M. Chudakov. \"Antigen receptor repertoire profiling from RNA-seq data.\" Nature Biotechnology 35, 908\u2013911 ( 2017 )","title":"Cite"},{"location":"mixcr/getting-started/milm/","text":"Obtaining and using license key To run MiXCR one need a license file. MiXCR is free for academic users with no commercial funding. We are committed to support academic community and provide our software free of charge for scientists doing non-profit research. Academic users can quickly get a license at https://licensing.milaboratories.com . Commercial trial license may be requested at https://licensing.milaboratories.com or by email to licensing@milaboratories.com . The easiest way to activate the license is to run activate-license command and paste the content of the license key therein: > mixcr activate-license Please enter the license: ... Another way to activate the license is to put mi.license file in the one of the following directories: ~/.mi.license ~/mi.license directory with mixcr.jar file directory with MiXCR executable Finally, one can use environment variables: MI_LICENSE env var with the content of mi.license file MI_LICENSE_FILE env var with the path to mi.license file","title":"Obtaining and using license key"},{"location":"mixcr/getting-started/milm/#obtaining-and-using-license-key","text":"To run MiXCR one need a license file. MiXCR is free for academic users with no commercial funding. We are committed to support academic community and provide our software free of charge for scientists doing non-profit research. Academic users can quickly get a license at https://licensing.milaboratories.com . Commercial trial license may be requested at https://licensing.milaboratories.com or by email to licensing@milaboratories.com . The easiest way to activate the license is to run activate-license command and paste the content of the license key therein: > mixcr activate-license Please enter the license: ... Another way to activate the license is to put mi.license file in the one of the following directories: ~/.mi.license ~/mi.license directory with mixcr.jar file directory with MiXCR executable Finally, one can use environment variables: MI_LICENSE env var with the content of mi.license file MI_LICENSE_FILE env var with the path to mi.license file","title":"Obtaining and using license key"},{"location":"mixcr/getting-started/overview/","text":"MiXCR overview MiXCR is a powerful platform for discovering T- and B-cell repertoire data. It works with any kind of sequencing data: bulk data with or without UMIs single cell data including but not limited to 10x Genomics protocols RNA-Seq or any other kind of fragmented/shotgun data which may contain just a tiny fraction of target sequences and any other kind of sequencing data containing TCRs or BCRs Powerful downstream analysis allows to obtain vector plots and tabular results for multiple measures. Key features include: grouping samples by metadata values and compare repertoire features between groups comprehensive repertoire normalization and filtering statistical significance tests with proper p-value adjustment repertoire overlap analysis novel alleles discovery antibody somatic hypermutation trees with postanalysis clonotype tracking For futher reading check MiXCR usage guides .","title":"MiXCR Overview"},{"location":"mixcr/getting-started/overview/#mixcr-overview","text":"MiXCR is a powerful platform for discovering T- and B-cell repertoire data. It works with any kind of sequencing data: bulk data with or without UMIs single cell data including but not limited to 10x Genomics protocols RNA-Seq or any other kind of fragmented/shotgun data which may contain just a tiny fraction of target sequences and any other kind of sequencing data containing TCRs or BCRs Powerful downstream analysis allows to obtain vector plots and tabular results for multiple measures. Key features include: grouping samples by metadata values and compare repertoire features between groups comprehensive repertoire normalization and filtering statistical significance tests with proper p-value adjustment repertoire overlap analysis novel alleles discovery antibody somatic hypermutation trees with postanalysis clonotype tracking For futher reading check MiXCR usage guides .","title":"MiXCR overview"},{"location":"mixcr/guides/abhelix-bcr/","text":"ABHelix Here we will discuss how to process BCR cDNA libraries obtained with ABHelix kit. Data libraries This tutorial uses the data from the following publication: High frequency of shared clonotypes in human B cell receptor repertoires. Soto C et al., , Nature, 2019 Feb;566(7744):398-402 doi: 10.1038/s41586-019-0934-8 Peripheral blood samples were collected from three donors : HIP1 (female, 47 y.o.), HIP2 (male, 22 y.o.) and HIP3(male, 29 y.o.). Samples were collected in multiple replicas. Total RNA was extracted from PBMCs and multiple reactions of reverse transcription were combined and purified using magnetic beads. The purified RT products were divided evenly for the first round of PCR amplification specific to human IgG, IgL IgK, IgM, or IgA. The 5' multiplex PCR primers were designed within the leader sequences of each productive V gene and the 3' primers within the constant regions, but in close approximation to the J gene/constant region junctions. Second PCR was performed using leader and V-C junction primers. Subsequent amplicon libraries were sequenced using next-generation sequencing. Paired end sequencing was performed on Illumina HiSeq 2500, R1 and R2 are 250bp long. The data for this tutorial can be downloaded using the script bellow. #!/usr/bin/env bash curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365277/SRR8365277_1.fastq.gz -o SRR8365277_HIP1_female_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365278/SRR8365278_1.fastq.gz -o SRR8365278_HIP1_female_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365279/SRR8365279_1.fastq.gz -o SRR8365279_HIP1_female_IgG3_R1.fastq.gz See full script curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365277/SRR8365277_1.fastq.gz -o SRR8365277_HIP1_female_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365278/SRR8365278_1.fastq.gz -o SRR8365278_HIP1_female_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365279/SRR8365279_1.fastq.gz -o SRR8365279_HIP1_female_IgG3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365280/SRR8365280_1.fastq.gz -o SRR8365280_HIP1_female_IgG4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365281/SRR8365281_1.fastq.gz -o SRR8365281_HIP1_female_IgM_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365282/SRR8365282_1.fastq.gz -o SRR8365282_HIP1_female_IgA_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365283/SRR8365283_1.fastq.gz -o SRR8365283_HIP1_female_IgK_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365284/SRR8365284_1.fastq.gz -o SRR8365284_HIP1_female_IgL_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365285/SRR8365285_1.fastq.gz -o SRR8365285_HIP2_male_IgK_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365286/SRR8365286_1.fastq.gz -o SRR8365286_HIP2_male_IgA_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365287/SRR8365287_1.fastq.gz -o SRR8365287_HIP2_male_IgM_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365288/SRR8365288_1.fastq.gz -o SRR8365288_HIP2_male_IgG4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365289/SRR8365289_1.fastq.gz -o SRR8365289_HIP2_male_IgG3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365290/SRR8365290_1.fastq.gz -o SRR8365290_HIP2_male_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365291/SRR8365291_1.fastq.gz -o SRR8365291_HIP2_male_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365292/SRR8365292_1.fastq.gz -o SRR8365292_HIP2_male_IgL_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365293/SRR8365293_1.fastq.gz -o SRR8365293_HIP3_male_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365294/SRR8365294_1.fastq.gz -o SRR8365294_HIP3_male_IgL_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365295/SRR8365295_1.fastq.gz -o SRR8365295_HIP3_male_IgK_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365296/SRR8365296_1.fastq.gz -o SRR8365296_HIP3_male_IgA_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365297/SRR8365297_1.fastq.gz -o SRR8365297_HIP2_male_IgG3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365298/SRR8365298_1.fastq.gz -o SRR8365298_HIP2_male_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365299/SRR8365299_1.fastq.gz -o SRR8365299_HIP3_male_IgG3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365300/SRR8365300_1.fastq.gz -o SRR8365300_HIP3_male_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365311/SRR8365311_1.fastq.gz -o SRR8365311_HIP1_female_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365312/SRR8365312_1.fastq.gz -o SRR8365312_HIP1_female_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365313/SRR8365313_1.fastq.gz -o SRR8365313_HIP1_female_IgL_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365314/SRR8365314_1.fastq.gz -o SRR8365314_HIP1_female_IgK_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365315/SRR8365315_1.fastq.gz -o SRR8365315_HIP1_female_IgA_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365316/SRR8365316_1.fastq.gz -o SRR8365316_HIP1_female_IgM_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365317/SRR8365317_1.fastq.gz -o SRR8365317_HIP1_female_IgG4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365318/SRR8365318_1.fastq.gz -o SRR8365318_HIP1_female_IgG3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365319/SRR8365319_1.fastq.gz -o SRR8365319_HIP1_female_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365320/SRR8365320_1.fastq.gz -o SRR8365320_HIP1_female_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365323/SRR8365323_1.fastq.gz -o SRR8365323_HIP3_male_IgG4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365332/SRR8365332_1.fastq.gz -o SRR8365332_HIP2_male_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365333/SRR8365333_1.fastq.gz -o SRR8365333_HIP2_male_IgG3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365334/SRR8365334_1.fastq.gz -o SRR8365334_HIP2_male_IgG4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365335/SRR8365335_1.fastq.gz -o SRR8365335_HIP2_male_IgM_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365336/SRR8365336_1.fastq.gz -o SRR8365336_HIP2_male_IgA_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365337/SRR8365337_1.fastq.gz -o SRR8365337_HIP2_male_IgK_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365338/SRR8365338_1.fastq.gz -o SRR8365338_HIP2_male_IgL_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365339/SRR8365339_1.fastq.gz -o SRR8365339_HIP2_male_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365340/SRR8365340_1.fastq.gz -o SRR8365340_HIP3_male_IgL_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365341/SRR8365341_1.fastq.gz -o SRR8365341_HIP3_male_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365342/SRR8365342_1.fastq.gz -o SRR8365342_HIP2_male_IgG4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365343/SRR8365343_1.fastq.gz -o SRR8365343_HIP2_male_IgM_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365344/SRR8365344_1.fastq.gz -o SRR8365344_HIP3_male_IgG4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365345/SRR8365345_1.fastq.gz -o SRR8365345_HIP3_male_IgM_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365346/SRR8365346_1.fastq.gz -o SRR8365346_HIP3_male_IgA_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365347/SRR8365347_1.fastq.gz -o SRR8365347_HIP3_male_IgK_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365349/SRR8365349_1.fastq.gz -o SRR8365349_HIP2_male_IgK_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365350/SRR8365350_1.fastq.gz -o SRR8365350_HIP2_male_IgA_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365351/SRR8365351_1.fastq.gz -o SRR8365351_HIP2_male_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365352/SRR8365352_1.fastq.gz -o SRR8365352_HIP2_male_IgL_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365353/SRR8365353_1.fastq.gz -o SRR8365353_HIP2_male_IgG3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365354/SRR8365354_1.fastq.gz -o SRR8365354_HIP2_male_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365355/SRR8365355_1.fastq.gz -o SRR8365355_HIP2_male_IgM_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365356/SRR8365356_1.fastq.gz -o SRR8365356_HIP2_male_IgG4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365357/SRR8365357_1.fastq.gz -o SRR8365357_HIP2_male_IgK_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365358/SRR8365358_1.fastq.gz -o SRR8365358_HIP2_male_IgA_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365359/SRR8365359_1.fastq.gz -o SRR8365359_HIP3_male_IgG3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365360/SRR8365360_1.fastq.gz -o SRR8365360_HIP3_male_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365361/SRR8365361_1.fastq.gz -o SRR8365361_HIP3_male_IgM_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365362/SRR8365362_1.fastq.gz -o SRR8365362_HIP3_male_IgG4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365363/SRR8365363_1.fastq.gz -o SRR8365363_HIP3_male_IgK_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365364/SRR8365364_1.fastq.gz -o SRR8365364_HIP3_male_IgA_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365365/SRR8365365_1.fastq.gz -o SRR8365365_HIP3_male_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365366/SRR8365366_1.fastq.gz -o SRR8365366_HIP3_male_IgL_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365367/SRR8365367_1.fastq.gz -o SRR8365367_HIP3_male_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365368/SRR8365368_1.fastq.gz -o SRR8365368_HIP3_male_IgL_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365369/SRR8365369_1.fastq.gz -o SRR8365369_HIP3_male_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365370/SRR8365370_1.fastq.gz -o SRR8365370_HIP2_male_IgL_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365371/SRR8365371_1.fastq.gz -o SRR8365371_HIP2_male_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365372/SRR8365372_1.fastq.gz -o SRR8365372_HIP3_male_IgG3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365373/SRR8365373_1.fastq.gz -o SRR8365373_HIP2_male_IgG4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365374/SRR8365374_1.fastq.gz -o SRR8365374_HIP2_male_IgM_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365375/SRR8365375_1.fastq.gz -o SRR8365375_HIP2_male_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365376/SRR8365376_1.fastq.gz -o SRR8365376_HIP2_male_IgG3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365377/SRR8365377_1.fastq.gz -o SRR8365377_HIP2_male_IgL_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365378/SRR8365378_1.fastq.gz -o SRR8365378_HIP2_male_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365379/SRR8365379_1.fastq.gz -o SRR8365379_HIP2_male_IgA_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365380/SRR8365380_1.fastq.gz -o SRR8365380_HIP2_male_IgK_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365381/SRR8365381_1.fastq.gz -o SRR8365381_HIP3_male_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365382/SRR8365382_1.fastq.gz -o SRR8365382_HIP3_male_IgG3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365383/SRR8365383_1.fastq.gz -o SRR8365383_HIP3_male_IgL_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365384/SRR8365384_1.fastq.gz -o SRR8365384_HIP3_male_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365385/SRR8365385_1.fastq.gz -o SRR8365385_HIP3_male_IgA_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365386/SRR8365386_1.fastq.gz -o SRR8365386_HIP3_male_IgK_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365387/SRR8365387_1.fastq.gz -o SRR8365387_HIP3_male_IgG4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365388/SRR8365388_1.fastq.gz -o SRR8365388_HIP3_male_IgM_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365389/SRR8365389_1.fastq.gz -o SRR8365389_HIP3_male_IgA_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365390/SRR8365390_1.fastq.gz -o SRR8365390_HIP3_male_IgK_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365391/SRR8365391_1.fastq.gz -o SRR8365391_HIP1_female_IgK_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365392/SRR8365392_1.fastq.gz -o SRR8365392_HIP1_female_IgL_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365393/SRR8365393_1.fastq.gz -o SRR8365393_HIP1_female_IgG3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365394/SRR8365394_1.fastq.gz -o SRR8365394_HIP1_female_IgG4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365395/SRR8365395_1.fastq.gz -o SRR8365395_HIP1_female_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365396/SRR8365396_1.fastq.gz -o SRR8365396_HIP1_female_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365397/SRR8365397_1.fastq.gz -o SRR8365397_HIP1_female_IgK_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365398/SRR8365398_1.fastq.gz -o SRR8365398_HIP1_female_IgL_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365399/SRR8365399_1.fastq.gz -o SRR8365399_HIP1_female_IgM_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365400/SRR8365400_1.fastq.gz -o SRR8365400_HIP1_female_IgA_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365401/SRR8365401_1.fastq.gz -o SRR8365401_HIP3_male_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365402/SRR8365402_1.fastq.gz -o SRR8365402_HIP3_male_IgG3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365413/SRR8365413_1.fastq.gz -o SRR8365413_HIP3_male_IgM_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365414/SRR8365414_1.fastq.gz -o SRR8365414_HIP3_male_IgG4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365415/SRR8365415_1.fastq.gz -o SRR8365415_HIP3_male_IgG3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365416/SRR8365416_1.fastq.gz -o SRR8365416_HIP3_male_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365417/SRR8365417_1.fastq.gz -o SRR8365417_HIP3_male_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365425/SRR8365425_1.fastq.gz -o SRR8365425_HIP3_male_IgL_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365426/SRR8365426_1.fastq.gz -o SRR8365426_HIP3_male_IgK_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365427/SRR8365427_1.fastq.gz -o SRR8365427_HIP3_male_IgA_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365428/SRR8365428_1.fastq.gz -o SRR8365428_HIP1_female_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365429/SRR8365429_1.fastq.gz -o SRR8365429_HIP1_female_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365430/SRR8365430_1.fastq.gz -o SRR8365430_HIP1_female_IgG4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365431/SRR8365431_1.fastq.gz -o SRR8365431_HIP1_female_IgG3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365432/SRR8365432_1.fastq.gz -o SRR8365432_HIP1_female_IgA_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365433/SRR8365433_1.fastq.gz -o SRR8365433_HIP1_female_IgM_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365442/SRR8365442_1.fastq.gz -o SRR8365442_HIP3_male_IgM_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365445/SRR8365445_1.fastq.gz -o SRR8365445_HIP3_male_IgG4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365451/SRR8365451_1.fastq.gz -o SRR8365451_HIP2_male_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365452/SRR8365452_1.fastq.gz -o SRR8365452_HIP2_male_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365453/SRR8365453_1.fastq.gz -o SRR8365453_HIP2_male_IgG3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365454/SRR8365454_1.fastq.gz -o SRR8365454_HIP2_male_IgG4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365455/SRR8365455_1.fastq.gz -o SRR8365455_HIP2_male_IgM_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365466/SRR8365466_1.fastq.gz -o SRR8365466_HIP3_male_IgM_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365472/SRR8365472_1.fastq.gz -o SRR8365472_HIP2_male_IgL_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365476/SRR8365476_1.fastq.gz -o SRR8365476_HIP2_male_IgK_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365477/SRR8365477_1.fastq.gz -o SRR8365477_HIP2_male_IgA_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365478/SRR8365478_1.fastq.gz -o SRR8365478_HIP1_female_IgL_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365479/SRR8365479_1.fastq.gz -o SRR8365479_HIP1_female_IgK_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365480/SRR8365480_1.fastq.gz -o SRR8365480_HIP1_female_IgA_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365481/SRR8365481_1.fastq.gz -o SRR8365481_HIP1_female_IgM_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365486/SRR8365486_1.fastq.gz -o SRR8365486_HIP1_female_IgG4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365487/SRR8365487_1.fastq.gz -o SRR8365487_HIP1_female_IgG3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365277/SRR8365277_2.fastq.gz -o SRR8365277_HIP1_female_IgG1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365278/SRR8365278_2.fastq.gz -o SRR8365278_HIP1_female_IgG2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365279/SRR8365279_2.fastq.gz -o SRR8365279_HIP1_female_IgG3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365280/SRR8365280_2.fastq.gz -o SRR8365280_HIP1_female_IgG4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365281/SRR8365281_2.fastq.gz -o SRR8365281_HIP1_female_IgM_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365282/SRR8365282_2.fastq.gz -o SRR8365282_HIP1_female_IgA_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365283/SRR8365283_2.fastq.gz -o SRR8365283_HIP1_female_IgK_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365284/SRR8365284_2.fastq.gz -o SRR8365284_HIP1_female_IgL_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365285/SRR8365285_2.fastq.gz -o SRR8365285_HIP2_male_IgK_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365286/SRR8365286_2.fastq.gz -o SRR8365286_HIP2_male_IgA_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365287/SRR8365287_2.fastq.gz -o SRR8365287_HIP2_male_IgM_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365288/SRR8365288_2.fastq.gz -o SRR8365288_HIP2_male_IgG4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365289/SRR8365289_2.fastq.gz -o SRR8365289_HIP2_male_IgG3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365290/SRR8365290_2.fastq.gz -o SRR8365290_HIP2_male_IgG2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365291/SRR8365291_2.fastq.gz -o SRR8365291_HIP2_male_IgG1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365292/SRR8365292_2.fastq.gz -o SRR8365292_HIP2_male_IgL_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365293/SRR8365293_2.fastq.gz -o SRR8365293_HIP3_male_IgG1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365294/SRR8365294_2.fastq.gz -o SRR8365294_HIP3_male_IgL_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365295/SRR8365295_2.fastq.gz -o SRR8365295_HIP3_male_IgK_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365296/SRR8365296_2.fastq.gz -o SRR8365296_HIP3_male_IgA_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365297/SRR8365297_2.fastq.gz -o SRR8365297_HIP2_male_IgG3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365298/SRR8365298_2.fastq.gz -o SRR8365298_HIP2_male_IgG2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365299/SRR8365299_2.fastq.gz -o SRR8365299_HIP3_male_IgG3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365300/SRR8365300_2.fastq.gz -o SRR8365300_HIP3_male_IgG2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365311/SRR8365311_2.fastq.gz -o SRR8365311_HIP1_female_IgG2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365312/SRR8365312_2.fastq.gz -o SRR8365312_HIP1_female_IgG1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365313/SRR8365313_2.fastq.gz -o SRR8365313_HIP1_female_IgL_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365314/SRR8365314_2.fastq.gz -o SRR8365314_HIP1_female_IgK_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365315/SRR8365315_2.fastq.gz -o SRR8365315_HIP1_female_IgA_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365316/SRR8365316_2.fastq.gz -o SRR8365316_HIP1_female_IgM_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365317/SRR8365317_2.fastq.gz -o SRR8365317_HIP1_female_IgG4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365318/SRR8365318_2.fastq.gz -o SRR8365318_HIP1_female_IgG3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365319/SRR8365319_2.fastq.gz -o SRR8365319_HIP1_female_IgG2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365320/SRR8365320_2.fastq.gz -o SRR8365320_HIP1_female_IgG1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365323/SRR8365323_2.fastq.gz -o SRR8365323_HIP3_male_IgG4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365332/SRR8365332_2.fastq.gz -o SRR8365332_HIP2_male_IgG2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365333/SRR8365333_2.fastq.gz -o SRR8365333_HIP2_male_IgG3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365334/SRR8365334_2.fastq.gz -o SRR8365334_HIP2_male_IgG4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365335/SRR8365335_2.fastq.gz -o SRR8365335_HIP2_male_IgM_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365336/SRR8365336_2.fastq.gz -o SRR8365336_HIP2_male_IgA_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365337/SRR8365337_2.fastq.gz -o SRR8365337_HIP2_male_IgK_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365338/SRR8365338_2.fastq.gz -o SRR8365338_HIP2_male_IgL_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365339/SRR8365339_2.fastq.gz -o SRR8365339_HIP2_male_IgG1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365340/SRR8365340_2.fastq.gz -o SRR8365340_HIP3_male_IgL_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365341/SRR8365341_2.fastq.gz -o SRR8365341_HIP3_male_IgG1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365342/SRR8365342_2.fastq.gz -o SRR8365342_HIP2_male_IgG4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365343/SRR8365343_2.fastq.gz -o SRR8365343_HIP2_male_IgM_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365344/SRR8365344_2.fastq.gz -o SRR8365344_HIP3_male_IgG4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365345/SRR8365345_2.fastq.gz -o SRR8365345_HIP3_male_IgM_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365346/SRR8365346_2.fastq.gz -o SRR8365346_HIP3_male_IgA_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365347/SRR8365347_2.fastq.gz -o SRR8365347_HIP3_male_IgK_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365349/SRR8365349_2.fastq.gz -o SRR8365349_HIP2_male_IgK_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365350/SRR8365350_2.fastq.gz -o SRR8365350_HIP2_male_IgA_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365351/SRR8365351_2.fastq.gz -o SRR8365351_HIP2_male_IgG1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365352/SRR8365352_2.fastq.gz -o SRR8365352_HIP2_male_IgL_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365353/SRR8365353_2.fastq.gz -o SRR8365353_HIP2_male_IgG3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365354/SRR8365354_2.fastq.gz -o SRR8365354_HIP2_male_IgG2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365355/SRR8365355_2.fastq.gz -o SRR8365355_HIP2_male_IgM_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365356/SRR8365356_2.fastq.gz -o SRR8365356_HIP2_male_IgG4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365357/SRR8365357_2.fastq.gz -o SRR8365357_HIP2_male_IgK_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365358/SRR8365358_2.fastq.gz -o SRR8365358_HIP2_male_IgA_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365359/SRR8365359_2.fastq.gz -o SRR8365359_HIP3_male_IgG3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365360/SRR8365360_2.fastq.gz -o SRR8365360_HIP3_male_IgG2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365361/SRR8365361_2.fastq.gz -o SRR8365361_HIP3_male_IgM_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365362/SRR8365362_2.fastq.gz -o SRR8365362_HIP3_male_IgG4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365363/SRR8365363_2.fastq.gz -o SRR8365363_HIP3_male_IgK_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365364/SRR8365364_2.fastq.gz -o SRR8365364_HIP3_male_IgA_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365365/SRR8365365_2.fastq.gz -o SRR8365365_HIP3_male_IgG1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365366/SRR8365366_2.fastq.gz -o SRR8365366_HIP3_male_IgL_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365367/SRR8365367_2.fastq.gz -o SRR8365367_HIP3_male_IgG1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365368/SRR8365368_2.fastq.gz -o SRR8365368_HIP3_male_IgL_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365369/SRR8365369_2.fastq.gz -o SRR8365369_HIP3_male_IgG2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365370/SRR8365370_2.fastq.gz -o SRR8365370_HIP2_male_IgL_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365371/SRR8365371_2.fastq.gz -o SRR8365371_HIP2_male_IgG1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365372/SRR8365372_2.fastq.gz -o SRR8365372_HIP3_male_IgG3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365373/SRR8365373_2.fastq.gz -o SRR8365373_HIP2_male_IgG4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365374/SRR8365374_2.fastq.gz -o SRR8365374_HIP2_male_IgM_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365375/SRR8365375_2.fastq.gz -o SRR8365375_HIP2_male_IgG2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365376/SRR8365376_2.fastq.gz -o SRR8365376_HIP2_male_IgG3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365377/SRR8365377_2.fastq.gz -o SRR8365377_HIP2_male_IgL_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365378/SRR8365378_2.fastq.gz -o SRR8365378_HIP2_male_IgG1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365379/SRR8365379_2.fastq.gz -o SRR8365379_HIP2_male_IgA_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365380/SRR8365380_2.fastq.gz -o SRR8365380_HIP2_male_IgK_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365381/SRR8365381_2.fastq.gz -o SRR8365381_HIP3_male_IgG2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365382/SRR8365382_2.fastq.gz -o SRR8365382_HIP3_male_IgG3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365383/SRR8365383_2.fastq.gz -o SRR8365383_HIP3_male_IgL_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365384/SRR8365384_2.fastq.gz -o SRR8365384_HIP3_male_IgG1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365385/SRR8365385_2.fastq.gz -o SRR8365385_HIP3_male_IgA_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365386/SRR8365386_2.fastq.gz -o SRR8365386_HIP3_male_IgK_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365387/SRR8365387_2.fastq.gz -o SRR8365387_HIP3_male_IgG4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365388/SRR8365388_2.fastq.gz -o SRR8365388_HIP3_male_IgM_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365389/SRR8365389_2.fastq.gz -o SRR8365389_HIP3_male_IgA_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365390/SRR8365390_2.fastq.gz -o SRR8365390_HIP3_male_IgK_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365391/SRR8365391_2.fastq.gz -o SRR8365391_HIP1_female_IgK_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365392/SRR8365392_2.fastq.gz -o SRR8365392_HIP1_female_IgL_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365393/SRR8365393_2.fastq.gz -o SRR8365393_HIP1_female_IgG3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365394/SRR8365394_2.fastq.gz -o SRR8365394_HIP1_female_IgG4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365395/SRR8365395_2.fastq.gz -o SRR8365395_HIP1_female_IgG1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365396/SRR8365396_2.fastq.gz -o SRR8365396_HIP1_female_IgG2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365397/SRR8365397_2.fastq.gz -o SRR8365397_HIP1_female_IgK_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365398/SRR8365398_2.fastq.gz -o SRR8365398_HIP1_female_IgL_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365399/SRR8365399_2.fastq.gz -o SRR8365399_HIP1_female_IgM_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365400/SRR8365400_2.fastq.gz -o SRR8365400_HIP1_female_IgA_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365401/SRR8365401_2.fastq.gz -o SRR8365401_HIP3_male_IgG2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365402/SRR8365402_2.fastq.gz -o SRR8365402_HIP3_male_IgG3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365413/SRR8365413_2.fastq.gz -o SRR8365413_HIP3_male_IgM_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365414/SRR8365414_2.fastq.gz -o SRR8365414_HIP3_male_IgG4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365415/SRR8365415_2.fastq.gz -o SRR8365415_HIP3_male_IgG3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365416/SRR8365416_2.fastq.gz -o SRR8365416_HIP3_male_IgG2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365417/SRR8365417_2.fastq.gz -o SRR8365417_HIP3_male_IgG1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365425/SRR8365425_2.fastq.gz -o SRR8365425_HIP3_male_IgL_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365426/SRR8365426_2.fastq.gz -o SRR8365426_HIP3_male_IgK_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365427/SRR8365427_2.fastq.gz -o SRR8365427_HIP3_male_IgA_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365428/SRR8365428_2.fastq.gz -o SRR8365428_HIP1_female_IgG2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365429/SRR8365429_2.fastq.gz -o SRR8365429_HIP1_female_IgG1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365430/SRR8365430_2.fastq.gz -o SRR8365430_HIP1_female_IgG4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365431/SRR8365431_2.fastq.gz -o SRR8365431_HIP1_female_IgG3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365432/SRR8365432_2.fastq.gz -o SRR8365432_HIP1_female_IgA_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365433/SRR8365433_2.fastq.gz -o SRR8365433_HIP1_female_IgM_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365442/SRR8365442_2.fastq.gz -o SRR8365442_HIP3_male_IgM_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365445/SRR8365445_2.fastq.gz -o SRR8365445_HIP3_male_IgG4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365451/SRR8365451_2.fastq.gz -o SRR8365451_HIP2_male_IgG1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365452/SRR8365452_2.fastq.gz -o SRR8365452_HIP2_male_IgG2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365453/SRR8365453_2.fastq.gz -o SRR8365453_HIP2_male_IgG3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365454/SRR8365454_2.fastq.gz -o SRR8365454_HIP2_male_IgG4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365455/SRR8365455_2.fastq.gz -o SRR8365455_HIP2_male_IgM_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365466/SRR8365466_2.fastq.gz -o SRR8365466_HIP3_male_IgM_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365472/SRR8365472_2.fastq.gz -o SRR8365472_HIP2_male_IgL_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365476/SRR8365476_2.fastq.gz -o SRR8365476_HIP2_male_IgK_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365477/SRR8365477_2.fastq.gz -o SRR8365477_HIP2_male_IgA_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365478/SRR8365478_2.fastq.gz -o SRR8365478_HIP1_female_IgL_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365479/SRR8365479_2.fastq.gz -o SRR8365479_HIP1_female_IgK_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365480/SRR8365480_2.fastq.gz -o SRR8365480_HIP1_female_IgA_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365481/SRR8365481_2.fastq.gz -o SRR8365481_HIP1_female_IgM_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365486/SRR8365486_2.fastq.gz -o SRR8365486_HIP1_female_IgG4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365487/SRR8365487_2.fastq.gz -o SRR8365487_HIP1_female_IgG3_R2.fastq.gz The project contains 136 FASTQ file pairs. For the purpose of this tutorial we assume that all fastq files are stored in fastq/ folder. Each file name encodes the information about donor, sex and Ig chain and isotype. For example for the first file from above listing: SRR8365277 - sample id HIP1 - patient id female - patient sex IgG1 - Ig isotype The structure of sequences is shown on the picture bellow. Upstream analysis The easiest way to obtain results from this type of data is to use mixcr analyze amplicon command in the following manner: > mixcr analyze amplicon \\ --species hsa \\ --starting-material rna \\ --receptor-type bcr \\ --5-end no-v-primers \\ --3-end j-primers \\ --adapters adapters-present \\ fastq/SRR8365277_HIP1_female_IgG1_R1.fastq.gz fastq/SRR8365277_HIP1_female_IgG1_R2.fastq.gz \\ result/SRR8365277_HIP1_female_IgG1_ Arguments explained: --species is set to hsa for Homo Sapience --starting-material rna It affects the choice of V gene region which will be used as target in align step ( vParameters.geneFeatureToAlign , see align documentation ). By specifying rna as starting material, VTranscriptWithout5UTRWithP will be used as geneFeatureToAlign for V segment. --receptor-type bcr . It affects the choice of underlying alignment algorithms. Due to somatic hypermutations and long indels MiXCR uses a fundamentally different algorithm for BCRs. --5-end is set to no-v-primers because samples were prepared using primers located in the leader region. This leads to a global alignment on the left bound of V gene. --3-end is set to j-primers , since the J multiplex primers were used for library preparation. This choice leads to a local alignment on the right bound of J gene.( adapters-present required) --adapers is set to adapters-present because primers sequences are present in the data and has not been cut prior to. Together with --3-end j-primers it leads to a local alignment on the right bound of J gene. One may use the script bellow to process all samples together (see GNU Parallel ): > ls fastq/*R1* | parallel -j 4 \\ 'mixcr analyze amplicon \\ --species hsa \\ --starting-material rna \\ --receptor-type bcr \\ --5-end no-v-primers \\ --3-end j-primers \\ --adapters adapters-present \\ {} {=s:R1:R2:=} \\ {=s:.*/:results/:;s:_R.*::=}' Under the hood pipeline: Under the hood the command above actually executes the following pipeline: align Alignment of raw sequencing reads against reference database of V-, D-, J- and C- gene segments. # align raw reads > mixcr align \\ -s hsa \\ -p kAligner2 \\ -OvParameters.geneFeatureToAlign = \"VTranscriptWithout5UTRWithP\" \\ -OvParameters.parameters.floatingLeftBound = false \\ -OjParameters.parameters.floatingRightBound = true \\ -OcParameters.parameters.floatingRightBound = false \\ --report result/SRR8365277_HIP1_female_IgG1.report \\ fastq/SRR8365277_HIP1_female_IgG1_R1.fastq.gz fastq/SRR8365277_HIP1_female_IgG1_R2.fastq.gz \\ result/SRR8365277_HIP1_female_IgG1.vdjca Option --report is specified here explicitly. -p kAligner2 specifies the specific BCR aligner. -OvParameters.geneFeatureToAlign=\"VTranscriptWithout5UTRWithP\" Sets a V gene feature to align. Check gene features for more info. -OvParameters.parameters.floatingLeftBound=false Results in a global alignment algorithm for V gene left bound. -OjParameters.parameters.floatingRightBound=true Results in a local alignment algorithm for J gene right bound. -OcParameters.parameters.floatingRightBound=false Results in a global alignment algorithm for C gene right bound. assemble Assembles alignments into clonotypes and applies several layers of errors correction(ex. quality-awared correction for sequencing errors, clustering to correct for PCR errors). Check mixcr assemble for more information. # assemble clonotypes > mixcr assemble \\ -OseparateByV = true \\ result/SRR8365277_HIP1_female_IgG1.vdjca \\ result/SRR8365277_HIP1_female_IgG1.clns -OseparateByV=true Separate clones with same CDR3 sequence but different V-genes. This option is important for BCR data due to hypermutations in V region, but it shouldn't be used unless no V gene primer sequences present in the data. export Exports clonotypes from .clns file into human-readable tables. # export to tsv > mixcr exportClones \\ -p full \\ -c IGH result/SRR8365277_HIP1_female_IgG1.clns \\ result/SRR8365277_HIP1_female_IgG1.clonotypes.IGHtxt > mixcr exportClones \\ -p full \\ -c IGK result/SRR8365277_HIP1_female_IgG1.clns \\ result/SRR8365277_HIP1_female_IgG1.clonotypes.IGK.txt > mixcr exportClones \\ -p full \\ -c IGL result/SRR8365277_HIP1_female_IgG1.clns \\ result/SRR8365277_HIP1_female_IgG1.clonotypes.IGL.txt Here -p full defines the full preset of common export columns. Check mixcr export for more information. -\u0441 <chain> defines a specific chain to be exported. By default mixcr analyze exports all chains in separate files. By the end of upstream analysis you should have the following set of output files: # human-readable reports SRR8365277_HIP1_female_IgG1.report # raw alignments (highly compressed binary file) SRR8365277_HIP1_female_IgG1.vdjca # IGH, IGK and IGL clonotypes (highly compressed binary file) SRR8365277_HIP1_female_IgG1.clns # IGH, IGK and IGL clonotypes exported in tab-delimited txt SRR8365277_HIP1_female_IgG1.clonotypes.IGH.txt SRR8365277_HIP1_female_IgG1.clonotypes.IGK.txt SRR8365277_HIP1_female_IgG1.clonotypes.IGL.txt Quality control Now when we have processed all samples, we can proceed to quality control. First thing that we want to look at is the alignment quality. This can be easily done with the following command: > mixcr exportQc align \\ result/*.vdjca \\ alignQc.pdf From the plot above we see that most samples have high percentage of successfully aligned reads (above 90%). What we can also tell is that from all the samples those that come from HIP1_female_IgG4 have a lower alignment rate: SRR8365486_HIP1_female_IgG4 SRR8365430_HIP1_female_IgG4 SRR8365394_HIP1_female_IgG4 SRR8365317_HIP1_female_IgG4 SRR8365280_HIP1_female_IgG4 That suggest a potential issue during sample preparation. Note that HIP3_male_IgG4 and HIP3_male_IgG3 sample also tend to have a lower alignment rate. Let's look at the same plot, but instead of percentages of reads we will plot an absolute number of reads. > mixcr exportQc align \\ --absolute-values \\ test_run/*.vdjca \\ alignQcAbsolute.svg Now we see, that nearly all bad samples have a significantly lower total reads count. Next, lets take a closer look at SRR8365280_HIP1_female_IgG4, because it has a lot of reads compared to other low quality samples but most of them lack Ig sequences. By default, MiXCR removed non target reads during alignment. We will realign this sample using options -OallowPartialAlignments=true and -OallowNoCDR3PartAlignments=true to preserve partially aligned reads. We will also save not aligned reads ( --not-aligned-R1 , --not-aligned-R2 ) to separate FASTQ files for manual inspection. See mixcr align for more details. Bellow is the complete command: > mixcr align \\ -s hsa \\ -p kAligner2 \\ -OvParameters.geneFeatureToAlign = \"VTranscriptWithout5UTRWithP\" \\ -OvParameters.parameters.floatingLeftBound = false \\ -OjParameters.parameters.floatingRightBound = true \\ -OcParameters.parameters.floatingRightBound = false \\ -OallowPartialAlignments = true \\ -OallowNoCDR3PartAlignments = true \\ --not-aligned-R1 SRR8365280_HIP1_female_IgG4_notAligned_R1.fastq \\ --not-aligned-R2 SRR8365280_HIP1_female_IgG4_notAligned_R2.fastq \\ -r SRR8365280_HIP1_female_IgG4_debug.report \\ fastq/SRR8365280_HIP1_female_IgG4_R1.fastq.gz fastq/SRR8365280_HIP1_female_IgG4_R2.fastq.gz \\ SRR8365280_HIP1_female_IgG4_debug.vdjca Resulting SRR8365280_HIP1_female_IgG4_notAligned_R1.fastq and SRR8365280_HIP1_female_IgG4_notAligned_R1.fastq files can be manually expected. A brief BLAST search revealed that a lot of reads align with PhiX, which is regularly used as a DNA sequencing control in Illumina protocol. Bellow you can see a few reads from SRR8365280_HIP1_female_IgG4_notAligned_R2.fastq . @SRR8365280.116 GWZHISEQ01:570:HYJYKBCXX:1:1101:12039:44077/2 GAGAGATGAGATTGAGGCTGGGAAAAGTTACTGTAGCCGACGTTTTGGCGGCGCAACCTGTGACGACAAATCTGCTCAAATTTATGCGCGCTTCGATAAAAATGATTGGCGTATCCAACCTGCAGAGTTTTATCGCTTCCATGACGCAGAAGTTAACACTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGGAATTACTACTGCTTGTTTACGAATTAAATCGAAGTGGACTGCTGGC + DDBDD< GHHIFHIHIIIEHIGGIIIIIIGHIIIICHIIIIIHEHHHHDHIICHHHIIIIIIIIIIIGDHIIFHIIIIIGIIIIIHIHHIHIIHIIHHIIIIHIIIIIIIIIIIIIGIIIIHIIIIEHHIIHHHGIIIIIIIIIIIIIHIIIHIHHIIIIIIHIIIII = FHHIFHCGHG?HIIIIGIIIIEHCFHHII?GHH.FHEHIIHHHH-BGHHHHGFHIIIHI.5B6-8@F-B@HHHHIIIIGFE?- @SRR8365280.117 GWZHISEQ01:570:HYJYKBCXX:1:1101:13143:44082/2 ACGATGAGGGACATAAAAAGTAAAAATGTCTACAGTAGAGTCAATAGCAAGGCCACGACGCAATGGAGAAAGACGGAGAGCGCCAACGGCGTCCATCTCGAAGGAGTCGCCAGCGATAACCGGAGTAGTTGAAATGGTAATAAGACGACCAATCTGACCAGCAAGGAAGCCAAGATGGGAAAGGTCATGCGGCATACGCTCGGCGCCAGTTTGAATATTAGACATAATTTATCCTCAAGTAAGGGGCCGAA + DDDDBIIIIIHHGHHIHHHIIIFIGIHHIIHHIIIIIHHIHIIIIEHHHGIIIIIIIIIHHIIIIIIHIIIFHIHIIIIIHGHIIIIHIIIIIHIHIIIIIDGHHHHIGIIHIIIIIIIIIGHIHGHHHHHIHIIEHIIII@HHIIIIIIIHIHIIHHIHIHIIIIIHIIII.BEGHGII?FHGHFHHHCDHIIIIHHCEHHIHIGIIIAHGEEEHH?FH?AFFHFHHHHH?FCH--BHHHHHE@,,>??H @SRR8365280.118 GWZHISEQ01:570:HYJYKBCXX:1:1101:9938:44446/2 AGAAGAAAACGTGCGTCAAAAATTACGTGCAGAAGGAGTGATGTAATGTCTAAAGGTAAAAAACGTTCTGGCGCTCGCCCTGGTCGTCCGCAGCCGTTGCGAGGTACTAAAGGCAAGCGTAAAGGCGCTCGTCTTTGGTATGTAGGTGGTCAACAATTTTAATTGCAGGGGCTTCGGCCCCTTACTTGAGGATAAATTATGTCTAATATTCAAACTGGCGCCGAGCGTATGCCGCATGACCTTTCCCATCT + DDDDDIIGIIIIIIHGHHHHHHHIIIIHIF?HHIII?FHIIHIIIEHFHHIIIIIIIIHIIIIIIHIIIHIIIIIIIIIIIIIIIIIGIIIIIIIIHHHIHHHHIIIIHIIIIIIIHIIIHIIHIGIICGHCHHIHHGEEEEHIIIIIIIIIIIGHIIIIIIIIHIIICE<CHIIHHIIHIHIIIIFHIIIIIIHHEGEHHAFEECHIGHIIIIIG?E?EEH?CHGIGHII?GHIDDHHHIIIHEHEFB-A Now lets look inside SRR8365280_HIP1_female_IgG4_debug.vdjca file witch now has partially aligned reads in it. That can be easily achieved using mixcr exportAlignmentsPretty . The function bellow will generate a .txt human-readable file with alignments. We use parameter --skip 1000 to skip first 1000 reads, as first reads usually have bad quality, and --limit 100 will export only 100 alignments. > mixcr exportAlignmentsPretty \\ --skip 1000 \\ --limit 100 \\ SRR8365280_HIP1_female_IgG4_debug.vdjca \\ SRR8365280_HIP1_female_IgG4_debug.alignments.txt If we look in the file we can spot how some troubled alignments look like. Bellow you can see one alignment from that file. First read aligns with a good score to IGHV1-69D. But its pair consists of low-quality nucleotides and can't be aligned against ahy IGHJ. Further analysis might help reveal where such low quality reads come from. >>> Read ids: 12846 L1><L2 L2><FR1 _ T R F L F V V A A A T G V Q S Q V Q L V Q S G P E V Quality 76767888777877765777666775777788877737576737677788888767777778357777767777667877 Target0 0 CACTAGGTTCCTCTTTGTGGTGGCAGCAGCTACAGGTGTCCAGTCCCAGGTGCAGCTGGTGCAGTCTGGGCCTGAGGTGA 79 Score IGHV1-69D*00 11 cTGGaggttcctctttgtggtggcagcagctacaggtgtccagtcccaggtgcagctggtgcagtctgggGctgaggtga 90 1901 FR1><CDR1 CDR1><FR2 K K P G S S V K V S C E A S G G T F S N F A V N W V R Quality 87888877888677675673763577787777777786767777776667878888888773577677878867775677 Target0 80 AGAAGCCTGGGTCGTCGGTGAAGGTCTCCTGCGAGGCTTCTGGAGGCACCTTCAGTAACTTTGCTGTCAACTGGGTGCGA 159 Score IGHV1-69D*00 91 agaagcctgggtcCtcggtgaaggtctcctgcAaggcttctggaggcaccttcagCaGctAtgctAtcaGctgggtgcga 170 1901 FR2><CDR2 CDR2><FR3 Q A P G Q G L E W V G G I I P L F N V A K Y A Q K F E Quality 77787778865577867376625733535577887777787767786772253677767777677777787777766667 Target0 160 CAGGCCCCTGGACAAGGGCTTGAGTGGGTGGGAGGGATCATCCCTCTATTTAATGTGGCAAAGTACGCACAGAAGTTCGA 239 Score IGHV1-69D*00 171 caggcccctggacaagggcttgagtggAtgggagggatcatccctAtCtttGGtACAgcaaaCtacgcacagaagttcCa 250 1901 G R V _ Quality 76677566676 Target0 240 GGGCAGAGTCA 250 Score IGHV1-69D*00 251 gggcagagtca 261 1901 Quality 26426422222222222562442222424424255222225225222225224226522255252272242277525257 Target1 0 GGTTGGTTGGCGGGCTCATCCCGCTATTTAATGTGGGGATGTACGCACTGAGGTACGTTGGCAGGGTCCCGGTTGTCGCG 79 Score Quality 72737277523535532353332333335333222235526353536262252522222577533555352225673735 Target1 80 GACGATTCAGTGGGCTGTGCTTACGTAGACATTGCCCGCTTGCGATCTGCCGCCAGCGCCGTGTATTACTGTGCGGCTTC 159 Score Quality 53333223353333655367555355333325223333535353355335367777733353335333333533533533 Target1 160 AGGTGGCGACGTCCTGTGATATGACTACAAGGCCCCCTAAGGGGATGAACTATGGGGGCAATCGACAATAGTGACCGTCT 239 Score Quality 33533233333 Target1 240 ACTAAGTTTCG 250 Score Finally, lets check chain usage among all samples. > mixcr exportQc chainUsage \\ test_run/*.vdjca \\ chainUsage.pdf Bellow is plot visualizing chain usage distribution among all samples. The plot suggests that this data has a low cross-contamination level, since almost all clones from IgG1, IgG2,IgG3,IgG4,IgM and IgA samples are IGH, and samples with IgK and IgL mostly consist of IGK and IGL clones. Advanced settings By default mixcr assemble assembles clones by CDR3 sequence. But in case of BCR data, due to hypermutations in V region, we usually want to extend that assemble feature so clones with different V gene sequences will be separated regardless of the same V-gene name. This is only possible if ore reads long enough to cover most of the V gene and if we a sure, that primer sequences will not introduce any bias. ABhelix library preparation protocol is designed in such a way that forward primers are located in the V gene leader sequence. Thus, when we assemble clones we can actually use that part of V gene. The easiest way to utilize that \"extra\" sequence is to pass an extended assembling feature to mixcr analyze amplicon command. > mixcr analyze amplicon \\ --species hsa \\ --starting-material rna \\ --receptor-type bcr \\ --5-end no-v-primers \\ --3-end j-primers \\ --adapters adapters-present \\ --assemble \"-OassemblingFeatures={FR1Begin:CDR3End}\" fastq/SRR8365277_HIP1_female_IgG1_R1.fastq.gz fastq/SRR8365277_HIP1_female_IgG1_R2.fastq.gz \\ result/SRR8365277_HIP1_female_IgG1_ Under the hood -OassemblingFeatures={FR1Begin:CDR3End} will be passed to mixcr asemble .","title":"AbHelix BCR"},{"location":"mixcr/guides/abhelix-bcr/#abhelix","text":"Here we will discuss how to process BCR cDNA libraries obtained with ABHelix kit.","title":"ABHelix"},{"location":"mixcr/guides/abhelix-bcr/#data-libraries","text":"This tutorial uses the data from the following publication: High frequency of shared clonotypes in human B cell receptor repertoires. Soto C et al., , Nature, 2019 Feb;566(7744):398-402 doi: 10.1038/s41586-019-0934-8 Peripheral blood samples were collected from three donors : HIP1 (female, 47 y.o.), HIP2 (male, 22 y.o.) and HIP3(male, 29 y.o.). Samples were collected in multiple replicas. Total RNA was extracted from PBMCs and multiple reactions of reverse transcription were combined and purified using magnetic beads. The purified RT products were divided evenly for the first round of PCR amplification specific to human IgG, IgL IgK, IgM, or IgA. The 5' multiplex PCR primers were designed within the leader sequences of each productive V gene and the 3' primers within the constant regions, but in close approximation to the J gene/constant region junctions. Second PCR was performed using leader and V-C junction primers. Subsequent amplicon libraries were sequenced using next-generation sequencing. Paired end sequencing was performed on Illumina HiSeq 2500, R1 and R2 are 250bp long. The data for this tutorial can be downloaded using the script bellow. #!/usr/bin/env bash curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365277/SRR8365277_1.fastq.gz -o SRR8365277_HIP1_female_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365278/SRR8365278_1.fastq.gz -o SRR8365278_HIP1_female_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365279/SRR8365279_1.fastq.gz -o SRR8365279_HIP1_female_IgG3_R1.fastq.gz See full script curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365277/SRR8365277_1.fastq.gz -o SRR8365277_HIP1_female_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365278/SRR8365278_1.fastq.gz -o SRR8365278_HIP1_female_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365279/SRR8365279_1.fastq.gz -o SRR8365279_HIP1_female_IgG3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365280/SRR8365280_1.fastq.gz -o SRR8365280_HIP1_female_IgG4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365281/SRR8365281_1.fastq.gz -o SRR8365281_HIP1_female_IgM_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365282/SRR8365282_1.fastq.gz -o SRR8365282_HIP1_female_IgA_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365283/SRR8365283_1.fastq.gz -o SRR8365283_HIP1_female_IgK_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365284/SRR8365284_1.fastq.gz -o SRR8365284_HIP1_female_IgL_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365285/SRR8365285_1.fastq.gz -o SRR8365285_HIP2_male_IgK_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365286/SRR8365286_1.fastq.gz -o SRR8365286_HIP2_male_IgA_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365287/SRR8365287_1.fastq.gz -o SRR8365287_HIP2_male_IgM_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365288/SRR8365288_1.fastq.gz -o SRR8365288_HIP2_male_IgG4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365289/SRR8365289_1.fastq.gz -o SRR8365289_HIP2_male_IgG3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365290/SRR8365290_1.fastq.gz -o SRR8365290_HIP2_male_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365291/SRR8365291_1.fastq.gz -o SRR8365291_HIP2_male_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365292/SRR8365292_1.fastq.gz -o SRR8365292_HIP2_male_IgL_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365293/SRR8365293_1.fastq.gz -o SRR8365293_HIP3_male_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365294/SRR8365294_1.fastq.gz -o SRR8365294_HIP3_male_IgL_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365295/SRR8365295_1.fastq.gz -o SRR8365295_HIP3_male_IgK_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365296/SRR8365296_1.fastq.gz -o SRR8365296_HIP3_male_IgA_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365297/SRR8365297_1.fastq.gz -o SRR8365297_HIP2_male_IgG3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365298/SRR8365298_1.fastq.gz -o SRR8365298_HIP2_male_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365299/SRR8365299_1.fastq.gz -o SRR8365299_HIP3_male_IgG3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365300/SRR8365300_1.fastq.gz -o SRR8365300_HIP3_male_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365311/SRR8365311_1.fastq.gz -o SRR8365311_HIP1_female_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365312/SRR8365312_1.fastq.gz -o SRR8365312_HIP1_female_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365313/SRR8365313_1.fastq.gz -o SRR8365313_HIP1_female_IgL_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365314/SRR8365314_1.fastq.gz -o SRR8365314_HIP1_female_IgK_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365315/SRR8365315_1.fastq.gz -o SRR8365315_HIP1_female_IgA_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365316/SRR8365316_1.fastq.gz -o SRR8365316_HIP1_female_IgM_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365317/SRR8365317_1.fastq.gz -o SRR8365317_HIP1_female_IgG4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365318/SRR8365318_1.fastq.gz -o SRR8365318_HIP1_female_IgG3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365319/SRR8365319_1.fastq.gz -o SRR8365319_HIP1_female_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365320/SRR8365320_1.fastq.gz -o SRR8365320_HIP1_female_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365323/SRR8365323_1.fastq.gz -o SRR8365323_HIP3_male_IgG4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365332/SRR8365332_1.fastq.gz -o SRR8365332_HIP2_male_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365333/SRR8365333_1.fastq.gz -o SRR8365333_HIP2_male_IgG3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365334/SRR8365334_1.fastq.gz -o SRR8365334_HIP2_male_IgG4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365335/SRR8365335_1.fastq.gz -o SRR8365335_HIP2_male_IgM_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365336/SRR8365336_1.fastq.gz -o SRR8365336_HIP2_male_IgA_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365337/SRR8365337_1.fastq.gz -o SRR8365337_HIP2_male_IgK_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365338/SRR8365338_1.fastq.gz -o SRR8365338_HIP2_male_IgL_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365339/SRR8365339_1.fastq.gz -o SRR8365339_HIP2_male_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365340/SRR8365340_1.fastq.gz -o SRR8365340_HIP3_male_IgL_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365341/SRR8365341_1.fastq.gz -o SRR8365341_HIP3_male_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365342/SRR8365342_1.fastq.gz -o SRR8365342_HIP2_male_IgG4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365343/SRR8365343_1.fastq.gz -o SRR8365343_HIP2_male_IgM_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365344/SRR8365344_1.fastq.gz -o SRR8365344_HIP3_male_IgG4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365345/SRR8365345_1.fastq.gz -o SRR8365345_HIP3_male_IgM_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365346/SRR8365346_1.fastq.gz -o SRR8365346_HIP3_male_IgA_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365347/SRR8365347_1.fastq.gz -o SRR8365347_HIP3_male_IgK_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365349/SRR8365349_1.fastq.gz -o SRR8365349_HIP2_male_IgK_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365350/SRR8365350_1.fastq.gz -o SRR8365350_HIP2_male_IgA_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365351/SRR8365351_1.fastq.gz -o SRR8365351_HIP2_male_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365352/SRR8365352_1.fastq.gz -o SRR8365352_HIP2_male_IgL_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365353/SRR8365353_1.fastq.gz -o SRR8365353_HIP2_male_IgG3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365354/SRR8365354_1.fastq.gz -o SRR8365354_HIP2_male_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365355/SRR8365355_1.fastq.gz -o SRR8365355_HIP2_male_IgM_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365356/SRR8365356_1.fastq.gz -o SRR8365356_HIP2_male_IgG4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365357/SRR8365357_1.fastq.gz -o SRR8365357_HIP2_male_IgK_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365358/SRR8365358_1.fastq.gz -o SRR8365358_HIP2_male_IgA_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365359/SRR8365359_1.fastq.gz -o SRR8365359_HIP3_male_IgG3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365360/SRR8365360_1.fastq.gz -o SRR8365360_HIP3_male_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365361/SRR8365361_1.fastq.gz -o SRR8365361_HIP3_male_IgM_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365362/SRR8365362_1.fastq.gz -o SRR8365362_HIP3_male_IgG4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365363/SRR8365363_1.fastq.gz -o SRR8365363_HIP3_male_IgK_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365364/SRR8365364_1.fastq.gz -o SRR8365364_HIP3_male_IgA_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365365/SRR8365365_1.fastq.gz -o SRR8365365_HIP3_male_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365366/SRR8365366_1.fastq.gz -o SRR8365366_HIP3_male_IgL_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365367/SRR8365367_1.fastq.gz -o SRR8365367_HIP3_male_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365368/SRR8365368_1.fastq.gz -o SRR8365368_HIP3_male_IgL_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365369/SRR8365369_1.fastq.gz -o SRR8365369_HIP3_male_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365370/SRR8365370_1.fastq.gz -o SRR8365370_HIP2_male_IgL_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365371/SRR8365371_1.fastq.gz -o SRR8365371_HIP2_male_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365372/SRR8365372_1.fastq.gz -o SRR8365372_HIP3_male_IgG3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365373/SRR8365373_1.fastq.gz -o SRR8365373_HIP2_male_IgG4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365374/SRR8365374_1.fastq.gz -o SRR8365374_HIP2_male_IgM_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365375/SRR8365375_1.fastq.gz -o SRR8365375_HIP2_male_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365376/SRR8365376_1.fastq.gz -o SRR8365376_HIP2_male_IgG3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365377/SRR8365377_1.fastq.gz -o SRR8365377_HIP2_male_IgL_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365378/SRR8365378_1.fastq.gz -o SRR8365378_HIP2_male_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365379/SRR8365379_1.fastq.gz -o SRR8365379_HIP2_male_IgA_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365380/SRR8365380_1.fastq.gz -o SRR8365380_HIP2_male_IgK_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365381/SRR8365381_1.fastq.gz -o SRR8365381_HIP3_male_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365382/SRR8365382_1.fastq.gz -o SRR8365382_HIP3_male_IgG3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365383/SRR8365383_1.fastq.gz -o SRR8365383_HIP3_male_IgL_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365384/SRR8365384_1.fastq.gz -o SRR8365384_HIP3_male_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365385/SRR8365385_1.fastq.gz -o SRR8365385_HIP3_male_IgA_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365386/SRR8365386_1.fastq.gz -o SRR8365386_HIP3_male_IgK_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365387/SRR8365387_1.fastq.gz -o SRR8365387_HIP3_male_IgG4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365388/SRR8365388_1.fastq.gz -o SRR8365388_HIP3_male_IgM_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365389/SRR8365389_1.fastq.gz -o SRR8365389_HIP3_male_IgA_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365390/SRR8365390_1.fastq.gz -o SRR8365390_HIP3_male_IgK_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365391/SRR8365391_1.fastq.gz -o SRR8365391_HIP1_female_IgK_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365392/SRR8365392_1.fastq.gz -o SRR8365392_HIP1_female_IgL_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365393/SRR8365393_1.fastq.gz -o SRR8365393_HIP1_female_IgG3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365394/SRR8365394_1.fastq.gz -o SRR8365394_HIP1_female_IgG4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365395/SRR8365395_1.fastq.gz -o SRR8365395_HIP1_female_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365396/SRR8365396_1.fastq.gz -o SRR8365396_HIP1_female_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365397/SRR8365397_1.fastq.gz -o SRR8365397_HIP1_female_IgK_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365398/SRR8365398_1.fastq.gz -o SRR8365398_HIP1_female_IgL_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365399/SRR8365399_1.fastq.gz -o SRR8365399_HIP1_female_IgM_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365400/SRR8365400_1.fastq.gz -o SRR8365400_HIP1_female_IgA_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365401/SRR8365401_1.fastq.gz -o SRR8365401_HIP3_male_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365402/SRR8365402_1.fastq.gz -o SRR8365402_HIP3_male_IgG3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365413/SRR8365413_1.fastq.gz -o SRR8365413_HIP3_male_IgM_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365414/SRR8365414_1.fastq.gz -o SRR8365414_HIP3_male_IgG4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365415/SRR8365415_1.fastq.gz -o SRR8365415_HIP3_male_IgG3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365416/SRR8365416_1.fastq.gz -o SRR8365416_HIP3_male_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365417/SRR8365417_1.fastq.gz -o SRR8365417_HIP3_male_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365425/SRR8365425_1.fastq.gz -o SRR8365425_HIP3_male_IgL_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365426/SRR8365426_1.fastq.gz -o SRR8365426_HIP3_male_IgK_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365427/SRR8365427_1.fastq.gz -o SRR8365427_HIP3_male_IgA_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365428/SRR8365428_1.fastq.gz -o SRR8365428_HIP1_female_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365429/SRR8365429_1.fastq.gz -o SRR8365429_HIP1_female_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365430/SRR8365430_1.fastq.gz -o SRR8365430_HIP1_female_IgG4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365431/SRR8365431_1.fastq.gz -o SRR8365431_HIP1_female_IgG3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365432/SRR8365432_1.fastq.gz -o SRR8365432_HIP1_female_IgA_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365433/SRR8365433_1.fastq.gz -o SRR8365433_HIP1_female_IgM_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365442/SRR8365442_1.fastq.gz -o SRR8365442_HIP3_male_IgM_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365445/SRR8365445_1.fastq.gz -o SRR8365445_HIP3_male_IgG4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365451/SRR8365451_1.fastq.gz -o SRR8365451_HIP2_male_IgG1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365452/SRR8365452_1.fastq.gz -o SRR8365452_HIP2_male_IgG2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365453/SRR8365453_1.fastq.gz -o SRR8365453_HIP2_male_IgG3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365454/SRR8365454_1.fastq.gz -o SRR8365454_HIP2_male_IgG4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365455/SRR8365455_1.fastq.gz -o SRR8365455_HIP2_male_IgM_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365466/SRR8365466_1.fastq.gz -o SRR8365466_HIP3_male_IgM_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365472/SRR8365472_1.fastq.gz -o SRR8365472_HIP2_male_IgL_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365476/SRR8365476_1.fastq.gz -o SRR8365476_HIP2_male_IgK_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365477/SRR8365477_1.fastq.gz -o SRR8365477_HIP2_male_IgA_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365478/SRR8365478_1.fastq.gz -o SRR8365478_HIP1_female_IgL_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365479/SRR8365479_1.fastq.gz -o SRR8365479_HIP1_female_IgK_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365480/SRR8365480_1.fastq.gz -o SRR8365480_HIP1_female_IgA_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365481/SRR8365481_1.fastq.gz -o SRR8365481_HIP1_female_IgM_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365486/SRR8365486_1.fastq.gz -o SRR8365486_HIP1_female_IgG4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365487/SRR8365487_1.fastq.gz -o SRR8365487_HIP1_female_IgG3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365277/SRR8365277_2.fastq.gz -o SRR8365277_HIP1_female_IgG1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365278/SRR8365278_2.fastq.gz -o SRR8365278_HIP1_female_IgG2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365279/SRR8365279_2.fastq.gz -o SRR8365279_HIP1_female_IgG3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365280/SRR8365280_2.fastq.gz -o SRR8365280_HIP1_female_IgG4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365281/SRR8365281_2.fastq.gz -o SRR8365281_HIP1_female_IgM_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365282/SRR8365282_2.fastq.gz -o SRR8365282_HIP1_female_IgA_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365283/SRR8365283_2.fastq.gz -o SRR8365283_HIP1_female_IgK_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365284/SRR8365284_2.fastq.gz -o SRR8365284_HIP1_female_IgL_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365285/SRR8365285_2.fastq.gz -o SRR8365285_HIP2_male_IgK_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365286/SRR8365286_2.fastq.gz -o SRR8365286_HIP2_male_IgA_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365287/SRR8365287_2.fastq.gz -o SRR8365287_HIP2_male_IgM_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365288/SRR8365288_2.fastq.gz -o SRR8365288_HIP2_male_IgG4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365289/SRR8365289_2.fastq.gz -o SRR8365289_HIP2_male_IgG3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365290/SRR8365290_2.fastq.gz -o SRR8365290_HIP2_male_IgG2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365291/SRR8365291_2.fastq.gz -o SRR8365291_HIP2_male_IgG1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365292/SRR8365292_2.fastq.gz -o SRR8365292_HIP2_male_IgL_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365293/SRR8365293_2.fastq.gz -o SRR8365293_HIP3_male_IgG1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365294/SRR8365294_2.fastq.gz -o SRR8365294_HIP3_male_IgL_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365295/SRR8365295_2.fastq.gz -o SRR8365295_HIP3_male_IgK_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365296/SRR8365296_2.fastq.gz -o SRR8365296_HIP3_male_IgA_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365297/SRR8365297_2.fastq.gz -o SRR8365297_HIP2_male_IgG3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365298/SRR8365298_2.fastq.gz -o SRR8365298_HIP2_male_IgG2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365299/SRR8365299_2.fastq.gz -o SRR8365299_HIP3_male_IgG3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365300/SRR8365300_2.fastq.gz -o SRR8365300_HIP3_male_IgG2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365311/SRR8365311_2.fastq.gz -o SRR8365311_HIP1_female_IgG2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365312/SRR8365312_2.fastq.gz -o SRR8365312_HIP1_female_IgG1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365313/SRR8365313_2.fastq.gz -o SRR8365313_HIP1_female_IgL_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365314/SRR8365314_2.fastq.gz -o SRR8365314_HIP1_female_IgK_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365315/SRR8365315_2.fastq.gz -o SRR8365315_HIP1_female_IgA_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365316/SRR8365316_2.fastq.gz -o SRR8365316_HIP1_female_IgM_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365317/SRR8365317_2.fastq.gz -o SRR8365317_HIP1_female_IgG4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365318/SRR8365318_2.fastq.gz -o SRR8365318_HIP1_female_IgG3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365319/SRR8365319_2.fastq.gz -o SRR8365319_HIP1_female_IgG2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365320/SRR8365320_2.fastq.gz -o SRR8365320_HIP1_female_IgG1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365323/SRR8365323_2.fastq.gz -o SRR8365323_HIP3_male_IgG4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365332/SRR8365332_2.fastq.gz -o SRR8365332_HIP2_male_IgG2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365333/SRR8365333_2.fastq.gz -o SRR8365333_HIP2_male_IgG3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365334/SRR8365334_2.fastq.gz -o SRR8365334_HIP2_male_IgG4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365335/SRR8365335_2.fastq.gz -o SRR8365335_HIP2_male_IgM_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365336/SRR8365336_2.fastq.gz -o SRR8365336_HIP2_male_IgA_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365337/SRR8365337_2.fastq.gz -o SRR8365337_HIP2_male_IgK_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365338/SRR8365338_2.fastq.gz -o SRR8365338_HIP2_male_IgL_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365339/SRR8365339_2.fastq.gz -o SRR8365339_HIP2_male_IgG1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365340/SRR8365340_2.fastq.gz -o SRR8365340_HIP3_male_IgL_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365341/SRR8365341_2.fastq.gz -o SRR8365341_HIP3_male_IgG1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365342/SRR8365342_2.fastq.gz -o SRR8365342_HIP2_male_IgG4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365343/SRR8365343_2.fastq.gz -o SRR8365343_HIP2_male_IgM_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365344/SRR8365344_2.fastq.gz -o SRR8365344_HIP3_male_IgG4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365345/SRR8365345_2.fastq.gz -o SRR8365345_HIP3_male_IgM_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365346/SRR8365346_2.fastq.gz -o SRR8365346_HIP3_male_IgA_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365347/SRR8365347_2.fastq.gz -o SRR8365347_HIP3_male_IgK_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365349/SRR8365349_2.fastq.gz -o SRR8365349_HIP2_male_IgK_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365350/SRR8365350_2.fastq.gz -o SRR8365350_HIP2_male_IgA_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365351/SRR8365351_2.fastq.gz -o SRR8365351_HIP2_male_IgG1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365352/SRR8365352_2.fastq.gz -o SRR8365352_HIP2_male_IgL_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365353/SRR8365353_2.fastq.gz -o SRR8365353_HIP2_male_IgG3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365354/SRR8365354_2.fastq.gz -o SRR8365354_HIP2_male_IgG2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365355/SRR8365355_2.fastq.gz -o SRR8365355_HIP2_male_IgM_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365356/SRR8365356_2.fastq.gz -o SRR8365356_HIP2_male_IgG4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365357/SRR8365357_2.fastq.gz -o SRR8365357_HIP2_male_IgK_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365358/SRR8365358_2.fastq.gz -o SRR8365358_HIP2_male_IgA_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365359/SRR8365359_2.fastq.gz -o SRR8365359_HIP3_male_IgG3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365360/SRR8365360_2.fastq.gz -o SRR8365360_HIP3_male_IgG2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365361/SRR8365361_2.fastq.gz -o SRR8365361_HIP3_male_IgM_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365362/SRR8365362_2.fastq.gz -o SRR8365362_HIP3_male_IgG4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365363/SRR8365363_2.fastq.gz -o SRR8365363_HIP3_male_IgK_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365364/SRR8365364_2.fastq.gz -o SRR8365364_HIP3_male_IgA_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365365/SRR8365365_2.fastq.gz -o SRR8365365_HIP3_male_IgG1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365366/SRR8365366_2.fastq.gz -o SRR8365366_HIP3_male_IgL_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365367/SRR8365367_2.fastq.gz -o SRR8365367_HIP3_male_IgG1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365368/SRR8365368_2.fastq.gz -o SRR8365368_HIP3_male_IgL_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365369/SRR8365369_2.fastq.gz -o SRR8365369_HIP3_male_IgG2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365370/SRR8365370_2.fastq.gz -o SRR8365370_HIP2_male_IgL_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365371/SRR8365371_2.fastq.gz -o SRR8365371_HIP2_male_IgG1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365372/SRR8365372_2.fastq.gz -o SRR8365372_HIP3_male_IgG3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365373/SRR8365373_2.fastq.gz -o SRR8365373_HIP2_male_IgG4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365374/SRR8365374_2.fastq.gz -o SRR8365374_HIP2_male_IgM_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365375/SRR8365375_2.fastq.gz -o SRR8365375_HIP2_male_IgG2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365376/SRR8365376_2.fastq.gz -o SRR8365376_HIP2_male_IgG3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365377/SRR8365377_2.fastq.gz -o SRR8365377_HIP2_male_IgL_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365378/SRR8365378_2.fastq.gz -o SRR8365378_HIP2_male_IgG1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365379/SRR8365379_2.fastq.gz -o SRR8365379_HIP2_male_IgA_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365380/SRR8365380_2.fastq.gz -o SRR8365380_HIP2_male_IgK_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365381/SRR8365381_2.fastq.gz -o SRR8365381_HIP3_male_IgG2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365382/SRR8365382_2.fastq.gz -o SRR8365382_HIP3_male_IgG3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365383/SRR8365383_2.fastq.gz -o SRR8365383_HIP3_male_IgL_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365384/SRR8365384_2.fastq.gz -o SRR8365384_HIP3_male_IgG1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365385/SRR8365385_2.fastq.gz -o SRR8365385_HIP3_male_IgA_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365386/SRR8365386_2.fastq.gz -o SRR8365386_HIP3_male_IgK_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365387/SRR8365387_2.fastq.gz -o SRR8365387_HIP3_male_IgG4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365388/SRR8365388_2.fastq.gz -o SRR8365388_HIP3_male_IgM_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365389/SRR8365389_2.fastq.gz -o SRR8365389_HIP3_male_IgA_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365390/SRR8365390_2.fastq.gz -o SRR8365390_HIP3_male_IgK_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365391/SRR8365391_2.fastq.gz -o SRR8365391_HIP1_female_IgK_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365392/SRR8365392_2.fastq.gz -o SRR8365392_HIP1_female_IgL_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365393/SRR8365393_2.fastq.gz -o SRR8365393_HIP1_female_IgG3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365394/SRR8365394_2.fastq.gz -o SRR8365394_HIP1_female_IgG4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365395/SRR8365395_2.fastq.gz -o SRR8365395_HIP1_female_IgG1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365396/SRR8365396_2.fastq.gz -o SRR8365396_HIP1_female_IgG2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365397/SRR8365397_2.fastq.gz -o SRR8365397_HIP1_female_IgK_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365398/SRR8365398_2.fastq.gz -o SRR8365398_HIP1_female_IgL_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365399/SRR8365399_2.fastq.gz -o SRR8365399_HIP1_female_IgM_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365400/SRR8365400_2.fastq.gz -o SRR8365400_HIP1_female_IgA_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365401/SRR8365401_2.fastq.gz -o SRR8365401_HIP3_male_IgG2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365402/SRR8365402_2.fastq.gz -o SRR8365402_HIP3_male_IgG3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365413/SRR8365413_2.fastq.gz -o SRR8365413_HIP3_male_IgM_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365414/SRR8365414_2.fastq.gz -o SRR8365414_HIP3_male_IgG4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365415/SRR8365415_2.fastq.gz -o SRR8365415_HIP3_male_IgG3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365416/SRR8365416_2.fastq.gz -o SRR8365416_HIP3_male_IgG2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365417/SRR8365417_2.fastq.gz -o SRR8365417_HIP3_male_IgG1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365425/SRR8365425_2.fastq.gz -o SRR8365425_HIP3_male_IgL_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365426/SRR8365426_2.fastq.gz -o SRR8365426_HIP3_male_IgK_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365427/SRR8365427_2.fastq.gz -o SRR8365427_HIP3_male_IgA_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365428/SRR8365428_2.fastq.gz -o SRR8365428_HIP1_female_IgG2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365429/SRR8365429_2.fastq.gz -o SRR8365429_HIP1_female_IgG1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365430/SRR8365430_2.fastq.gz -o SRR8365430_HIP1_female_IgG4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365431/SRR8365431_2.fastq.gz -o SRR8365431_HIP1_female_IgG3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365432/SRR8365432_2.fastq.gz -o SRR8365432_HIP1_female_IgA_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365433/SRR8365433_2.fastq.gz -o SRR8365433_HIP1_female_IgM_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365442/SRR8365442_2.fastq.gz -o SRR8365442_HIP3_male_IgM_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365445/SRR8365445_2.fastq.gz -o SRR8365445_HIP3_male_IgG4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365451/SRR8365451_2.fastq.gz -o SRR8365451_HIP2_male_IgG1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365452/SRR8365452_2.fastq.gz -o SRR8365452_HIP2_male_IgG2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365453/SRR8365453_2.fastq.gz -o SRR8365453_HIP2_male_IgG3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365454/SRR8365454_2.fastq.gz -o SRR8365454_HIP2_male_IgG4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365455/SRR8365455_2.fastq.gz -o SRR8365455_HIP2_male_IgM_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365466/SRR8365466_2.fastq.gz -o SRR8365466_HIP3_male_IgM_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365472/SRR8365472_2.fastq.gz -o SRR8365472_HIP2_male_IgL_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365476/SRR8365476_2.fastq.gz -o SRR8365476_HIP2_male_IgK_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365477/SRR8365477_2.fastq.gz -o SRR8365477_HIP2_male_IgA_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365478/SRR8365478_2.fastq.gz -o SRR8365478_HIP1_female_IgL_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365479/SRR8365479_2.fastq.gz -o SRR8365479_HIP1_female_IgK_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365480/SRR8365480_2.fastq.gz -o SRR8365480_HIP1_female_IgA_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365481/SRR8365481_2.fastq.gz -o SRR8365481_HIP1_female_IgM_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365486/SRR8365486_2.fastq.gz -o SRR8365486_HIP1_female_IgG4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365487/SRR8365487_2.fastq.gz -o SRR8365487_HIP1_female_IgG3_R2.fastq.gz The project contains 136 FASTQ file pairs. For the purpose of this tutorial we assume that all fastq files are stored in fastq/ folder. Each file name encodes the information about donor, sex and Ig chain and isotype. For example for the first file from above listing: SRR8365277 - sample id HIP1 - patient id female - patient sex IgG1 - Ig isotype The structure of sequences is shown on the picture bellow.","title":"Data libraries"},{"location":"mixcr/guides/abhelix-bcr/#upstream-analysis","text":"The easiest way to obtain results from this type of data is to use mixcr analyze amplicon command in the following manner: > mixcr analyze amplicon \\ --species hsa \\ --starting-material rna \\ --receptor-type bcr \\ --5-end no-v-primers \\ --3-end j-primers \\ --adapters adapters-present \\ fastq/SRR8365277_HIP1_female_IgG1_R1.fastq.gz fastq/SRR8365277_HIP1_female_IgG1_R2.fastq.gz \\ result/SRR8365277_HIP1_female_IgG1_ Arguments explained: --species is set to hsa for Homo Sapience --starting-material rna It affects the choice of V gene region which will be used as target in align step ( vParameters.geneFeatureToAlign , see align documentation ). By specifying rna as starting material, VTranscriptWithout5UTRWithP will be used as geneFeatureToAlign for V segment. --receptor-type bcr . It affects the choice of underlying alignment algorithms. Due to somatic hypermutations and long indels MiXCR uses a fundamentally different algorithm for BCRs. --5-end is set to no-v-primers because samples were prepared using primers located in the leader region. This leads to a global alignment on the left bound of V gene. --3-end is set to j-primers , since the J multiplex primers were used for library preparation. This choice leads to a local alignment on the right bound of J gene.( adapters-present required) --adapers is set to adapters-present because primers sequences are present in the data and has not been cut prior to. Together with --3-end j-primers it leads to a local alignment on the right bound of J gene. One may use the script bellow to process all samples together (see GNU Parallel ): > ls fastq/*R1* | parallel -j 4 \\ 'mixcr analyze amplicon \\ --species hsa \\ --starting-material rna \\ --receptor-type bcr \\ --5-end no-v-primers \\ --3-end j-primers \\ --adapters adapters-present \\ {} {=s:R1:R2:=} \\ {=s:.*/:results/:;s:_R.*::=}'","title":"Upstream analysis"},{"location":"mixcr/guides/abhelix-bcr/#under-the-hood-pipeline","text":"Under the hood the command above actually executes the following pipeline:","title":"Under the hood pipeline:"},{"location":"mixcr/guides/abhelix-bcr/#align","text":"Alignment of raw sequencing reads against reference database of V-, D-, J- and C- gene segments. # align raw reads > mixcr align \\ -s hsa \\ -p kAligner2 \\ -OvParameters.geneFeatureToAlign = \"VTranscriptWithout5UTRWithP\" \\ -OvParameters.parameters.floatingLeftBound = false \\ -OjParameters.parameters.floatingRightBound = true \\ -OcParameters.parameters.floatingRightBound = false \\ --report result/SRR8365277_HIP1_female_IgG1.report \\ fastq/SRR8365277_HIP1_female_IgG1_R1.fastq.gz fastq/SRR8365277_HIP1_female_IgG1_R2.fastq.gz \\ result/SRR8365277_HIP1_female_IgG1.vdjca Option --report is specified here explicitly. -p kAligner2 specifies the specific BCR aligner. -OvParameters.geneFeatureToAlign=\"VTranscriptWithout5UTRWithP\" Sets a V gene feature to align. Check gene features for more info. -OvParameters.parameters.floatingLeftBound=false Results in a global alignment algorithm for V gene left bound. -OjParameters.parameters.floatingRightBound=true Results in a local alignment algorithm for J gene right bound. -OcParameters.parameters.floatingRightBound=false Results in a global alignment algorithm for C gene right bound.","title":"align"},{"location":"mixcr/guides/abhelix-bcr/#assemble","text":"Assembles alignments into clonotypes and applies several layers of errors correction(ex. quality-awared correction for sequencing errors, clustering to correct for PCR errors). Check mixcr assemble for more information. # assemble clonotypes > mixcr assemble \\ -OseparateByV = true \\ result/SRR8365277_HIP1_female_IgG1.vdjca \\ result/SRR8365277_HIP1_female_IgG1.clns -OseparateByV=true Separate clones with same CDR3 sequence but different V-genes. This option is important for BCR data due to hypermutations in V region, but it shouldn't be used unless no V gene primer sequences present in the data.","title":"assemble"},{"location":"mixcr/guides/abhelix-bcr/#export","text":"Exports clonotypes from .clns file into human-readable tables. # export to tsv > mixcr exportClones \\ -p full \\ -c IGH result/SRR8365277_HIP1_female_IgG1.clns \\ result/SRR8365277_HIP1_female_IgG1.clonotypes.IGHtxt > mixcr exportClones \\ -p full \\ -c IGK result/SRR8365277_HIP1_female_IgG1.clns \\ result/SRR8365277_HIP1_female_IgG1.clonotypes.IGK.txt > mixcr exportClones \\ -p full \\ -c IGL result/SRR8365277_HIP1_female_IgG1.clns \\ result/SRR8365277_HIP1_female_IgG1.clonotypes.IGL.txt Here -p full defines the full preset of common export columns. Check mixcr export for more information. -\u0441 <chain> defines a specific chain to be exported. By default mixcr analyze exports all chains in separate files. By the end of upstream analysis you should have the following set of output files: # human-readable reports SRR8365277_HIP1_female_IgG1.report # raw alignments (highly compressed binary file) SRR8365277_HIP1_female_IgG1.vdjca # IGH, IGK and IGL clonotypes (highly compressed binary file) SRR8365277_HIP1_female_IgG1.clns # IGH, IGK and IGL clonotypes exported in tab-delimited txt SRR8365277_HIP1_female_IgG1.clonotypes.IGH.txt SRR8365277_HIP1_female_IgG1.clonotypes.IGK.txt SRR8365277_HIP1_female_IgG1.clonotypes.IGL.txt","title":"export"},{"location":"mixcr/guides/abhelix-bcr/#quality-control","text":"Now when we have processed all samples, we can proceed to quality control. First thing that we want to look at is the alignment quality. This can be easily done with the following command: > mixcr exportQc align \\ result/*.vdjca \\ alignQc.pdf From the plot above we see that most samples have high percentage of successfully aligned reads (above 90%). What we can also tell is that from all the samples those that come from HIP1_female_IgG4 have a lower alignment rate: SRR8365486_HIP1_female_IgG4 SRR8365430_HIP1_female_IgG4 SRR8365394_HIP1_female_IgG4 SRR8365317_HIP1_female_IgG4 SRR8365280_HIP1_female_IgG4 That suggest a potential issue during sample preparation. Note that HIP3_male_IgG4 and HIP3_male_IgG3 sample also tend to have a lower alignment rate. Let's look at the same plot, but instead of percentages of reads we will plot an absolute number of reads. > mixcr exportQc align \\ --absolute-values \\ test_run/*.vdjca \\ alignQcAbsolute.svg Now we see, that nearly all bad samples have a significantly lower total reads count. Next, lets take a closer look at SRR8365280_HIP1_female_IgG4, because it has a lot of reads compared to other low quality samples but most of them lack Ig sequences. By default, MiXCR removed non target reads during alignment. We will realign this sample using options -OallowPartialAlignments=true and -OallowNoCDR3PartAlignments=true to preserve partially aligned reads. We will also save not aligned reads ( --not-aligned-R1 , --not-aligned-R2 ) to separate FASTQ files for manual inspection. See mixcr align for more details. Bellow is the complete command: > mixcr align \\ -s hsa \\ -p kAligner2 \\ -OvParameters.geneFeatureToAlign = \"VTranscriptWithout5UTRWithP\" \\ -OvParameters.parameters.floatingLeftBound = false \\ -OjParameters.parameters.floatingRightBound = true \\ -OcParameters.parameters.floatingRightBound = false \\ -OallowPartialAlignments = true \\ -OallowNoCDR3PartAlignments = true \\ --not-aligned-R1 SRR8365280_HIP1_female_IgG4_notAligned_R1.fastq \\ --not-aligned-R2 SRR8365280_HIP1_female_IgG4_notAligned_R2.fastq \\ -r SRR8365280_HIP1_female_IgG4_debug.report \\ fastq/SRR8365280_HIP1_female_IgG4_R1.fastq.gz fastq/SRR8365280_HIP1_female_IgG4_R2.fastq.gz \\ SRR8365280_HIP1_female_IgG4_debug.vdjca Resulting SRR8365280_HIP1_female_IgG4_notAligned_R1.fastq and SRR8365280_HIP1_female_IgG4_notAligned_R1.fastq files can be manually expected. A brief BLAST search revealed that a lot of reads align with PhiX, which is regularly used as a DNA sequencing control in Illumina protocol. Bellow you can see a few reads from SRR8365280_HIP1_female_IgG4_notAligned_R2.fastq . @SRR8365280.116 GWZHISEQ01:570:HYJYKBCXX:1:1101:12039:44077/2 GAGAGATGAGATTGAGGCTGGGAAAAGTTACTGTAGCCGACGTTTTGGCGGCGCAACCTGTGACGACAAATCTGCTCAAATTTATGCGCGCTTCGATAAAAATGATTGGCGTATCCAACCTGCAGAGTTTTATCGCTTCCATGACGCAGAAGTTAACACTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGGAATTACTACTGCTTGTTTACGAATTAAATCGAAGTGGACTGCTGGC + DDBDD< GHHIFHIHIIIEHIGGIIIIIIGHIIIICHIIIIIHEHHHHDHIICHHHIIIIIIIIIIIGDHIIFHIIIIIGIIIIIHIHHIHIIHIIHHIIIIHIIIIIIIIIIIIIGIIIIHIIIIEHHIIHHHGIIIIIIIIIIIIIHIIIHIHHIIIIIIHIIIII = FHHIFHCGHG?HIIIIGIIIIEHCFHHII?GHH.FHEHIIHHHH-BGHHHHGFHIIIHI.5B6-8@F-B@HHHHIIIIGFE?- @SRR8365280.117 GWZHISEQ01:570:HYJYKBCXX:1:1101:13143:44082/2 ACGATGAGGGACATAAAAAGTAAAAATGTCTACAGTAGAGTCAATAGCAAGGCCACGACGCAATGGAGAAAGACGGAGAGCGCCAACGGCGTCCATCTCGAAGGAGTCGCCAGCGATAACCGGAGTAGTTGAAATGGTAATAAGACGACCAATCTGACCAGCAAGGAAGCCAAGATGGGAAAGGTCATGCGGCATACGCTCGGCGCCAGTTTGAATATTAGACATAATTTATCCTCAAGTAAGGGGCCGAA + DDDDBIIIIIHHGHHIHHHIIIFIGIHHIIHHIIIIIHHIHIIIIEHHHGIIIIIIIIIHHIIIIIIHIIIFHIHIIIIIHGHIIIIHIIIIIHIHIIIIIDGHHHHIGIIHIIIIIIIIIGHIHGHHHHHIHIIEHIIII@HHIIIIIIIHIHIIHHIHIHIIIIIHIIII.BEGHGII?FHGHFHHHCDHIIIIHHCEHHIHIGIIIAHGEEEHH?FH?AFFHFHHHHH?FCH--BHHHHHE@,,>??H @SRR8365280.118 GWZHISEQ01:570:HYJYKBCXX:1:1101:9938:44446/2 AGAAGAAAACGTGCGTCAAAAATTACGTGCAGAAGGAGTGATGTAATGTCTAAAGGTAAAAAACGTTCTGGCGCTCGCCCTGGTCGTCCGCAGCCGTTGCGAGGTACTAAAGGCAAGCGTAAAGGCGCTCGTCTTTGGTATGTAGGTGGTCAACAATTTTAATTGCAGGGGCTTCGGCCCCTTACTTGAGGATAAATTATGTCTAATATTCAAACTGGCGCCGAGCGTATGCCGCATGACCTTTCCCATCT + DDDDDIIGIIIIIIHGHHHHHHHIIIIHIF?HHIII?FHIIHIIIEHFHHIIIIIIIIHIIIIIIHIIIHIIIIIIIIIIIIIIIIIGIIIIIIIIHHHIHHHHIIIIHIIIIIIIHIIIHIIHIGIICGHCHHIHHGEEEEHIIIIIIIIIIIGHIIIIIIIIHIIICE<CHIIHHIIHIHIIIIFHIIIIIIHHEGEHHAFEECHIGHIIIIIG?E?EEH?CHGIGHII?GHIDDHHHIIIHEHEFB-A Now lets look inside SRR8365280_HIP1_female_IgG4_debug.vdjca file witch now has partially aligned reads in it. That can be easily achieved using mixcr exportAlignmentsPretty . The function bellow will generate a .txt human-readable file with alignments. We use parameter --skip 1000 to skip first 1000 reads, as first reads usually have bad quality, and --limit 100 will export only 100 alignments. > mixcr exportAlignmentsPretty \\ --skip 1000 \\ --limit 100 \\ SRR8365280_HIP1_female_IgG4_debug.vdjca \\ SRR8365280_HIP1_female_IgG4_debug.alignments.txt If we look in the file we can spot how some troubled alignments look like. Bellow you can see one alignment from that file. First read aligns with a good score to IGHV1-69D. But its pair consists of low-quality nucleotides and can't be aligned against ahy IGHJ. Further analysis might help reveal where such low quality reads come from. >>> Read ids: 12846 L1><L2 L2><FR1 _ T R F L F V V A A A T G V Q S Q V Q L V Q S G P E V Quality 76767888777877765777666775777788877737576737677788888767777778357777767777667877 Target0 0 CACTAGGTTCCTCTTTGTGGTGGCAGCAGCTACAGGTGTCCAGTCCCAGGTGCAGCTGGTGCAGTCTGGGCCTGAGGTGA 79 Score IGHV1-69D*00 11 cTGGaggttcctctttgtggtggcagcagctacaggtgtccagtcccaggtgcagctggtgcagtctgggGctgaggtga 90 1901 FR1><CDR1 CDR1><FR2 K K P G S S V K V S C E A S G G T F S N F A V N W V R Quality 87888877888677675673763577787777777786767777776667878888888773577677878867775677 Target0 80 AGAAGCCTGGGTCGTCGGTGAAGGTCTCCTGCGAGGCTTCTGGAGGCACCTTCAGTAACTTTGCTGTCAACTGGGTGCGA 159 Score IGHV1-69D*00 91 agaagcctgggtcCtcggtgaaggtctcctgcAaggcttctggaggcaccttcagCaGctAtgctAtcaGctgggtgcga 170 1901 FR2><CDR2 CDR2><FR3 Q A P G Q G L E W V G G I I P L F N V A K Y A Q K F E Quality 77787778865577867376625733535577887777787767786772253677767777677777787777766667 Target0 160 CAGGCCCCTGGACAAGGGCTTGAGTGGGTGGGAGGGATCATCCCTCTATTTAATGTGGCAAAGTACGCACAGAAGTTCGA 239 Score IGHV1-69D*00 171 caggcccctggacaagggcttgagtggAtgggagggatcatccctAtCtttGGtACAgcaaaCtacgcacagaagttcCa 250 1901 G R V _ Quality 76677566676 Target0 240 GGGCAGAGTCA 250 Score IGHV1-69D*00 251 gggcagagtca 261 1901 Quality 26426422222222222562442222424424255222225225222225224226522255252272242277525257 Target1 0 GGTTGGTTGGCGGGCTCATCCCGCTATTTAATGTGGGGATGTACGCACTGAGGTACGTTGGCAGGGTCCCGGTTGTCGCG 79 Score Quality 72737277523535532353332333335333222235526353536262252522222577533555352225673735 Target1 80 GACGATTCAGTGGGCTGTGCTTACGTAGACATTGCCCGCTTGCGATCTGCCGCCAGCGCCGTGTATTACTGTGCGGCTTC 159 Score Quality 53333223353333655367555355333325223333535353355335367777733353335333333533533533 Target1 160 AGGTGGCGACGTCCTGTGATATGACTACAAGGCCCCCTAAGGGGATGAACTATGGGGGCAATCGACAATAGTGACCGTCT 239 Score Quality 33533233333 Target1 240 ACTAAGTTTCG 250 Score Finally, lets check chain usage among all samples. > mixcr exportQc chainUsage \\ test_run/*.vdjca \\ chainUsage.pdf Bellow is plot visualizing chain usage distribution among all samples. The plot suggests that this data has a low cross-contamination level, since almost all clones from IgG1, IgG2,IgG3,IgG4,IgM and IgA samples are IGH, and samples with IgK and IgL mostly consist of IGK and IGL clones.","title":"Quality control"},{"location":"mixcr/guides/abhelix-bcr/#advanced-settings","text":"By default mixcr assemble assembles clones by CDR3 sequence. But in case of BCR data, due to hypermutations in V region, we usually want to extend that assemble feature so clones with different V gene sequences will be separated regardless of the same V-gene name. This is only possible if ore reads long enough to cover most of the V gene and if we a sure, that primer sequences will not introduce any bias. ABhelix library preparation protocol is designed in such a way that forward primers are located in the V gene leader sequence. Thus, when we assemble clones we can actually use that part of V gene. The easiest way to utilize that \"extra\" sequence is to pass an extended assembling feature to mixcr analyze amplicon command. > mixcr analyze amplicon \\ --species hsa \\ --starting-material rna \\ --receptor-type bcr \\ --5-end no-v-primers \\ --3-end j-primers \\ --adapters adapters-present \\ --assemble \"-OassemblingFeatures={FR1Begin:CDR3End}\" fastq/SRR8365277_HIP1_female_IgG1_R1.fastq.gz fastq/SRR8365277_HIP1_female_IgG1_R2.fastq.gz \\ result/SRR8365277_HIP1_female_IgG1_ Under the hood -OassemblingFeatures={FR1Begin:CDR3End} will be passed to mixcr asemble .","title":"Advanced settings"},{"location":"mixcr/guides/biomed2-bcr/","text":"BIOMED2 Here we will discuss how to process BCR cDNA libraries obtained with BIOMED2 kit. Data libraries This tutorial uses the data from the following publication: High frequency of shared clonotypes in human B cell receptor repertoires. Soto C et al., Nature, 2019 Feb;566(7744):398-402 doi: 10.1038/s41586-019-0934-8 Peripheral blood samples were collected from three donors: HIP1 (female, 47 y.o.), HIP2 (male, 22 y.o.) and HIP3 (male, 29 y.o.). Samples were collected in multiple replicas. Total RNA was extracted from PBMCs and then RT-PCR was utilized to generate BCR amplicon libraries using BIOMED2 multiplex primers. Subsequent libraries were sequenced using next-generation sequencing. The data for this tutorial can be downloaded using the script bellow: curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365468/SRR8365468_1.fastq.gz -o SRR8365468_HIP2_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365468/SRR8365468_2.fastq.gz -o SRR8365468_HIP2_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365457/SRR8365457_1.fastq.gz -o SRR8365457_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365457/SRR8365457_2.fastq.gz -o SRR8365457_HIP1_female_R2.fastq.gz ... See full script #!/usr/bin/env bash curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365468/SRR8365468_1.fastq.gz -o SRR8365468_HIP2_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365468/SRR8365468_2.fastq.gz -o SRR8365468_HIP2_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365457/SRR8365457_1.fastq.gz -o SRR8365457_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365457/SRR8365457_2.fastq.gz -o SRR8365457_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365458/SRR8365458_1.fastq.gz -o SRR8365458_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365458/SRR8365458_2.fastq.gz -o SRR8365458_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365459/SRR8365459_1.fastq.gz -o SRR8365459_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365459/SRR8365459_2.fastq.gz -o SRR8365459_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365463/SRR8365463_1.fastq.gz -o SRR8365463_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365463/SRR8365463_2.fastq.gz -o SRR8365463_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365469/SRR8365469_1.fastq.gz -o SRR8365469_HIP2_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365469/SRR8365469_2.fastq.gz -o SRR8365469_HIP2_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365465/SRR8365465_1.fastq.gz -o SRR8365465_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365465/SRR8365465_2.fastq.gz -o SRR8365465_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365467/SRR8365467_1.fastq.gz -o SRR8365467_HIP2_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365467/SRR8365467_2.fastq.gz -o SRR8365467_HIP2_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365464/SRR8365464_1.fastq.gz -o SRR8365464_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365464/SRR8365464_2.fastq.gz -o SRR8365464_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365450/SRR8365450_1.fastq.gz -o SRR8365450_HIP3_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365450/SRR8365450_2.fastq.gz -o SRR8365450_HIP3_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365461/SRR8365461_1.fastq.gz -o SRR8365461_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365461/SRR8365461_2.fastq.gz -o SRR8365461_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365462/SRR8365462_1.fastq.gz -o SRR8365462_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365462/SRR8365462_2.fastq.gz -o SRR8365462_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365456/SRR8365456_1.fastq.gz -o SRR8365456_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365456/SRR8365456_2.fastq.gz -o SRR8365456_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365475/SRR8365475_1.fastq.gz -o SRR8365475_HIP2_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365475/SRR8365475_2.fastq.gz -o SRR8365475_HIP2_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365460/SRR8365460_1.fastq.gz -o SRR8365460_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365460/SRR8365460_2.fastq.gz -o SRR8365460_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365470/SRR8365470_1.fastq.gz -o SRR8365470_HIP2_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365470/SRR8365470_2.fastq.gz -o SRR8365470_HIP2_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365471/SRR8365471_1.fastq.gz -o SRR8365471_HIP2_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365471/SRR8365471_2.fastq.gz -o SRR8365471_HIP2_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365473/SRR8365473_1.fastq.gz -o SRR8365473_HIP2_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365473/SRR8365473_2.fastq.gz -o SRR8365473_HIP2_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365449/SRR8365449_1.fastq.gz -o SRR8365449_HIP3_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365449/SRR8365449_2.fastq.gz -o SRR8365449_HIP3_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365482/SRR8365482_1.fastq.gz -o SRR8365482_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365482/SRR8365482_2.fastq.gz -o SRR8365482_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365446/SRR8365446_1.fastq.gz -o SRR8365446_HIP3_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365446/SRR8365446_2.fastq.gz -o SRR8365446_HIP3_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365483/SRR8365483_1.fastq.gz -o SRR8365483_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365483/SRR8365483_2.fastq.gz -o SRR8365483_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365447/SRR8365447_1.fastq.gz -o SRR8365447_HIP3_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365447/SRR8365447_2.fastq.gz -o SRR8365447_HIP3_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365484/SRR8365484_1.fastq.gz -o SRR8365484_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365484/SRR8365484_2.fastq.gz -o SRR8365484_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365448/SRR8365448_1.fastq.gz -o SRR8365448_HIP3_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365448/SRR8365448_2.fastq.gz -o SRR8365448_HIP3_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365424/SRR8365424_1.fastq.gz -o SRR8365424_HIP3_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365424/SRR8365424_2.fastq.gz -o SRR8365424_HIP3_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365485/SRR8365485_1.fastq.gz -o SRR8365485_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365485/SRR8365485_2.fastq.gz -o SRR8365485_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365488/SRR8365488_1.fastq.gz -o SRR8365488_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365488/SRR8365488_2.fastq.gz -o SRR8365488_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365421/SRR8365421_1.fastq.gz -o SRR8365421_HIP3_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365421/SRR8365421_2.fastq.gz -o SRR8365421_HIP3_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365489/SRR8365489_1.fastq.gz -o SRR8365489_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365489/SRR8365489_2.fastq.gz -o SRR8365489_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365490/SRR8365490_1.fastq.gz -o SRR8365490_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365490/SRR8365490_2.fastq.gz -o SRR8365490_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365246/SRR8365246_1.fastq.gz -o SRR8365246_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365246/SRR8365246_2.fastq.gz -o SRR8365246_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365474/SRR8365474_1.fastq.gz -o SRR8365474_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365474/SRR8365474_2.fastq.gz -o SRR8365474_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365422/SRR8365422_1.fastq.gz -o SRR8365422_HIP3_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365422/SRR8365422_2.fastq.gz -o SRR8365422_HIP3_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365423/SRR8365423_1.fastq.gz -o SRR8365423_HIP3_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365423/SRR8365423_2.fastq.gz -o SRR8365423_HIP3_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365420/SRR8365420_1.fastq.gz -o SRR8365420_HIP3_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365420/SRR8365420_2.fastq.gz -o SRR8365420_HIP3_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365419/SRR8365419_1.fastq.gz -o SRR8365419_HIP3_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365419/SRR8365419_2.fastq.gz -o SRR8365419_HIP3_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365248/SRR8365248_1.fastq.gz -o SRR8365248_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365248/SRR8365248_2.fastq.gz -o SRR8365248_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365249/SRR8365249_1.fastq.gz -o SRR8365249_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365249/SRR8365249_2.fastq.gz -o SRR8365249_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365247/SRR8365247_1.fastq.gz -o SRR8365247_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365247/SRR8365247_2.fastq.gz -o SRR8365247_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365250/SRR8365250_1.fastq.gz -o SRR8365250_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365250/SRR8365250_2.fastq.gz -o SRR8365250_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365348/SRR8365348_1.fastq.gz -o SRR8365348_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365348/SRR8365348_2.fastq.gz -o SRR8365348_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365251/SRR8365251_1.fastq.gz -o SRR8365251_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365251/SRR8365251_2.fastq.gz -o SRR8365251_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365418/SRR8365418_1.fastq.gz -o SRR8365418_HIP3_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365418/SRR8365418_2.fastq.gz -o SRR8365418_HIP3_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365310/SRR8365310_1.fastq.gz -o SRR8365310_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365310/SRR8365310_2.fastq.gz -o SRR8365310_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365252/SRR8365252_1.fastq.gz -o SRR8365252_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365252/SRR8365252_2.fastq.gz -o SRR8365252_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365308/SRR8365308_1.fastq.gz -o SRR8365308_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365308/SRR8365308_2.fastq.gz -o SRR8365308_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365309/SRR8365309_1.fastq.gz -o SRR8365309_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365309/SRR8365309_2.fastq.gz -o SRR8365309_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365253/SRR8365253_1.fastq.gz -o SRR8365253_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365253/SRR8365253_2.fastq.gz -o SRR8365253_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365307/SRR8365307_1.fastq.gz -o SRR8365307_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365307/SRR8365307_2.fastq.gz -o SRR8365307_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365259/SRR8365259_1.fastq.gz -o SRR8365259_HIP2_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365259/SRR8365259_2.fastq.gz -o SRR8365259_HIP2_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365258/SRR8365258_1.fastq.gz -o SRR8365258_HIP2_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365258/SRR8365258_2.fastq.gz -o SRR8365258_HIP2_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365306/SRR8365306_1.fastq.gz -o SRR8365306_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365306/SRR8365306_2.fastq.gz -o SRR8365306_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365305/SRR8365305_1.fastq.gz -o SRR8365305_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365305/SRR8365305_2.fastq.gz -o SRR8365305_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365304/SRR8365304_1.fastq.gz -o SRR8365304_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365304/SRR8365304_2.fastq.gz -o SRR8365304_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365260/SRR8365260_1.fastq.gz -o SRR8365260_HIP2_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365260/SRR8365260_2.fastq.gz -o SRR8365260_HIP2_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365303/SRR8365303_1.fastq.gz -o SRR8365303_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365303/SRR8365303_2.fastq.gz -o SRR8365303_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365261/SRR8365261_1.fastq.gz -o SRR8365261_HIP2_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365261/SRR8365261_2.fastq.gz -o SRR8365261_HIP2_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365262/SRR8365262_1.fastq.gz -o SRR8365262_HIP2_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365262/SRR8365262_2.fastq.gz -o SRR8365262_HIP2_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365302/SRR8365302_1.fastq.gz -o SRR8365302_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365302/SRR8365302_2.fastq.gz -o SRR8365302_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365301/SRR8365301_1.fastq.gz -o SRR8365301_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365301/SRR8365301_2.fastq.gz -o SRR8365301_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365263/SRR8365263_1.fastq.gz -o SRR8365263_HIP2_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365263/SRR8365263_2.fastq.gz -o SRR8365263_HIP2_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365264/SRR8365264_1.fastq.gz -o SRR8365264_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365264/SRR8365264_2.fastq.gz -o SRR8365264_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365267/SRR8365267_1.fastq.gz -o SRR8365267_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365267/SRR8365267_2.fastq.gz -o SRR8365267_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365274/SRR8365274_1.fastq.gz -o SRR8365274_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365274/SRR8365274_2.fastq.gz -o SRR8365274_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365269/SRR8365269_1.fastq.gz -o SRR8365269_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365269/SRR8365269_2.fastq.gz -o SRR8365269_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365271/SRR8365271_1.fastq.gz -o SRR8365271_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365271/SRR8365271_2.fastq.gz -o SRR8365271_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365273/SRR8365273_1.fastq.gz -o SRR8365273_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365273/SRR8365273_2.fastq.gz -o SRR8365273_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365265/SRR8365265_1.fastq.gz -o SRR8365265_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365265/SRR8365265_2.fastq.gz -o SRR8365265_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365270/SRR8365270_1.fastq.gz -o SRR8365270_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365270/SRR8365270_2.fastq.gz -o SRR8365270_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365272/SRR8365272_1.fastq.gz -o SRR8365272_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365272/SRR8365272_2.fastq.gz -o SRR8365272_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365266/SRR8365266_1.fastq.gz -o SRR8365266_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365266/SRR8365266_2.fastq.gz -o SRR8365266_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365268/SRR8365268_1.fastq.gz -o SRR8365268_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365268/SRR8365268_2.fastq.gz -o SRR8365268_HIP1_female_R2.fastq.gz The project contains 147 FASTQ file pairs. For the purpose of this tutorial we assume that all fastq files are stored in fastq/ folder. The structure of sequences is shown on the picture bellow. The data was obtained using multiplex primers for V and J genes. Upstream analysis The easiest way to obtain results from this type of data is to use mixcr analyze amplicon command in the following manner: > mixcr analyze amplicon \\ --species hsa \\ --starting-material rna \\ --receptor-type bcr \\ --5-end v-primers \\ --3-end j-primers \\ --adapters adapters-present \\ fastq/SRR8365468_HIP2_male_R1.fastq.gz fastq/SRR8365468_HIP2_male_R2.fastq.gz \\ result/SRR8365468_HIP2_male Arguments explained: --species is set to hsa for Homo Sapience --starting-material affects the choice of V gene region which will be used as target in align step ( vParameters.geneFeatureToAlign , see align documentation ). By specifying rna as starting material, VTranscriptWithout5UTRWithP will be used as geneFeatureToAlign for V segment. --receptor-type affects the choice of underlying alignment algorithms. Due to somatic hypermutations and long indels MiXCR uses different alignment algorithms for BCRs. --5-end is set to v-primers because samples were prepared using multiplex V-primers. This leads to a local alignment on the left bound of V gene (if adapters-present is specified). --3-end is set to j-primers , since the J multiplex primers were used for library preparation. This leads to a local alignment on the right bound of J gene (if adapters-present is specified). --adapers is set to adapters-present because primer sequences are present in the data and has not been cut prior to. Together with --5-end v-primers and --3-end j-primers it leads to a local alignment on the left bound of V gene and right bound of J gene. A common practice to process all samples at once is to use GNU Parallel : ls fastq/*R1* | parallel -j4 \\ 'mixcr analyze amplicon \\ --species hsa \\ --starting-material rna \\ --receptor-type bcr \\ --5-end v-primers \\ --3-end j-primers \\ --adapters adapters-present \\ {} {=s:R1:R2:=} \\ {=s:.*\\/:result/:;s:_R.*::=}' where -j 4 means that 4 samples will be analyzed at a time. Pay attention to available computing resources. Under the hood pipeline: Under the hood the command above actually executes the following pipeline: align Alignment of raw sequencing reads against reference database of V-, D-, J- and C- gene segments. # align raw reads > mixcr align \\ -s hsa \\ -p kAligner2 \\ -OvParameters.geneFeatureToAlign = \"VTranscriptWithout5UTRWithP\" \\ -OvParameters.parameters.floatingLeftBound = true \\ -OjParameters.parameters.floatingRightBound = true \\ -OcParameters.parameters.floatingRightBound = false \\ --report result/SRR8365468_HIP2_male.report \\ fastq/SRR8365468_HIP2_male_R1.fastq.gz fastq/SRR8365468_HIP2_male_R2.fastq.gz \\ result/SRR8365468_HIP2_male.vdjca Option --report is specified here explicitly. -p kAligner2 specifies the specific BCR aligner. -OvParameters.geneFeatureToAlign=\"VTranscriptWithout5UTRWithP\" Sets a V gene feature to align. Check gene features for more info. -OvParameters.parameters.floatingLeftBound=true Results in a local alignment algorithm for V gene left bound. -OjParameters.parameters.floatingRightBound=true Results in a local alignment algorithm for J gene right bound. -OcParameters.parameters.floatingRightBound=false Results in a global alignment algorithm for C gene right bound. assemble Assembles alignments into clonotypes and applies several layers of errors correction(ex. quality-awared correction for sequencing errors, clustering to correct for PCR errors). Check mixcr assemble for more information. # assemble clonotypes > mixcr assemble \\ result/SRR8365468_HIP2_male.vdjca \\ result/SRR8365468_HIP2_male.clns export Exports clonotypes from .clns file into human-readable tables. # export to tsv > mixcr exportClones \\ -p full \\ -c IGH result/SRR8365468_HIP2_male.clns \\ result/SRR8365468_HIP2_male.clonotypes.IGHtxt > mixcr exportClones \\ -p full \\ -c IGK result/SRR8365468_HIP2_male.clns \\ result/SRR8365468_HIP2_male.clonotypes.IGK.txt > mixcr exportClones \\ -p full \\ -c IGL result/SRR8365468_HIP2_male.clns \\ result/SRR8365468_HIP2_male.clonotypes.IGL.txt Here -p full defines the full preset of common export columns. Check mixcr export for more information. -\u0441 <chain> defines a specific chain to be exported. By default mixcr analyze exports all chains in separate files. After execution is complete the following list of files is generated for every sample: # human-readable reports SRR8365468_HIP2_male.report # raw alignments (highly compressed binary file) SRR8365468_HIP2_male.vdjca # IGH, IGK and IGL CDR3 clonotypes (highly compressed binary file) SRR8365468_HIP2_male.clns # IGH, IGK and IGL CDR3 clonotypes exported in tab-delimited txt SRR8365468_HIP2_male.IGH.tsv SRR8365468_HIP2_male.IGL.tsv SRR8365468_HIP2_male.IGK.tsv Obtained *.tsv files can be used for manual examination. *.clns files can be used for downstream analysis using mixcr postanalisis . Quality control Now when we have all files processed lets perform Quality Control. That can be easily done using mixcr exportQc function. # obtain alignment quality control mixcr exportQc align result/*.vdjca alignQc.pdf # obtain chain usage plot mixcr exportQc chainUsage result/*.vdjca usageQc.pdf First let's examine the alignment quality control plot. Here we can see a percentage of successfully aligned reads for every sample as well as the percentage of reads that failed to align for various reasons. Some samples have a good alignment rate (more than 90%). But a lot of samples had some issues that lead to alignment rate decreae to as low as 10-20%. Two major reasons for that outcome is: the lack of TCR/IG sequence absence of J hits Let's take one of the bad quality samples (ex. SRR8365459_HIP1_female) and examine it. To look at the reads' alignments for that sample we first will run mixcr align command for that sample once again, but this time we will specify additional options ( -OallowPartialAlignments=true -OallowNoCDR3PartAlignments=true ) that will preserve partially aligned reads (ex. reads that may lack J gene) and reads that lack CDR3 sequence. > mixcr align \\ -s hsa \\ -p kAligner2 \\ -OvParameters.geneFeatureToAlign = \"VTranscriptWithout5UTRWithP\" \\ -OvParameters.parameters.floatingLeftBound = true \\ -OjParameters.parameters.floatingRightBound = true \\ -OcParameters.parameters.floatingRightBound = false \\ -OallowPartialAlignments = true \\ -OallowNoCDR3PartAlignments = true \\ fastq/SRR8365459_HIP_female_R1.fastq.gz fastq/SRR8365459_HIP_female_R2.fastq.gz \\ SRR8365459_HIP_female_debug.vdjca Now, when we have a new .vdjca file let's visualize how reads cover FRs and CDRs regions for that sample. > mixcr exportQc coverage \\ SRR8365459_HIP_female_debug.vdjca \\ SRR8365459_HIP_female_debug_coverageQc.pdf This will generate three .pdf formatted plots: R1 alignment, R2 alignment and alignment of overlapped reads. These plots can tell us the percentage of reads that cover each region at a certain position. Briefly, for this sample, only those reads that overlap show a good coverage pattern. R1 R2 Overlap Finally, we can look at raw alignments using mixcr exportAlignmentsPretty . The function bellow will generate a .txt human-readable file with alignments. We use parameter --skip 1000 to skip first 1000 reads, as first reads usually have bad quality, and --limit 100 will export only 100 alignments as we usually don't need to examine every alignment to see the issue. > mixcr exportAlignmentsPretty \\ --skip 1000 \\ --limit 100 \\ SRR8365459_HIP_female_debug.vdjca \\ SRR8365459_HIP_female.alignments.txt Bellow you can see a few alignments from the generated file. The first one is an example of well aligned reads. >>> Read ids: 1840 FR1><CDR1 CDR1><FR2 _ L R L S C A A S G F T L S D Y Y M S W I R Q A P G K Quality 77767826778888888888888887788888888888878888888888888887888778888888888888887878 Target0 0 CCTGAGACTCTCCTGTGCAGCCTCTGGATTCACCTTGAGTGACTACTACATGAGCTGGATCCGCCAGGCTCCAGGGAAGG 79 Score IGHV3-11*00 107 cctgagactctcctgtgcagcctctggattcaccttCagtgactactacatgagctggatccgccaggctccagggaagg 186 2102 FR2><CDR2 CDR2><FR3 G L E W V S H I S G S G N T I D Y A D S V K G R F T I Quality 88788887778888888888887788888888888888888888888888888888887888888888888888888888 Target0 80 GGCTGGAGTGGGTTTCACACATTAGTGGCAGTGGTAATACCATAGACTACGCAGACTCTGTGAAGGGCCGATTCACCATC 159 Score IGHV3-11*00 187 ggctggagtgggtttcaTacattagtAgTagtggtaGtaccataTactacgcagactctgtgaagggccgattcaccatc 266 2102 FR3><CDR3 S R D N A K N S L Y L Q M N S L R D D D T A V F Y C A Quality 88888888888888888888888888888888888888888888888888888888888888888888888887888788 Target0 160 TCCAGGGACAACGCCAAGAACTCGCTCTATCTGCAAATGAACAGCCTGAGAGACGACGACACGGCCGTGTTTTATTGTGC 239 Score IGHV3-11*00 267 tccagggacaacgccaagaactcActGtatctgcaaatgaacagcctgagagCcgaGgacacggccgtgtAttaCtgtgc 346 2102 V> <D D> <J CDR3><FR4 FR4> R G R Y A L D Y W G Q G T R V T V S S _ Quality 88878788888888788888888888888888888888888888888888888888888888877776 Target0 240 GAGAGGCCGTTATGCCCTAGATTATTGGGGCCAGGGAACCCGGGTCACCGTCTCCTCAGGTAAGCCCC 307 Score IGHV3-11*00 347 gagag 351 2102 IGHD3-16*00 65 cgttatAcc 73 31 IGHD2-2*00 56 tatgcc 61 30 IGHD3-10*00 61 cgttat 66 30 IGHJ4*00 28 gaCtaCtggggccagggaacccTggtcaccgtctcctcag 67 313 IGHJ5*00 37 tggggccagggaacccTggtcaccgtctcctcag 70 311 Now, the following alignment is a troubled one. And for this particular sample the majority of alignments look similar. We can see that one read does not align to any reference sequences and has a lot of low-quality nucleotides. >>> Read ids: 1853 Quality 25762677888767572572527252276555757625555572625275777255225225525252725222252552 Target0 0 CGGCATTCCTGCTGAAACGAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCCGTCACATTAAA 79 Score Quality 57222255256566257772557225555565256777672262255775556255567762277262262677727762 Target0 80 AAAAAAAACCAGCAGTGATGTTGGCAGTTATGACTATGTCTCCTGGTACCAACAGCACCCAGGCACAGTCTCCAAACCCA 159 Score Quality 42222547622525426677662772660000000000000000000000000000000000000000000000000000 Target0 160 TGACGTACAATGACAATACTCAGCCCTCAGGGGTCCCTGATCGATTCTCTGGCTTCAAGTCTGGCAATACGCCCTCCATG 239 Score Quality 00000000000 Target0 240 ACCATCCTTAG 250 Score CDR2><F CDR1><FR2 FR2><CDR2 F G S Y V Y V S W Y Q Q H S S T V P K P M I D N V N T Quality 00000000000000000000000000000000000000000006247675667452527762544226662675276772 Target1 0 TTTGGGAGTTATGTCTATGTCTCCTGGTACCAACAGCACTCAAGCACAGTCCCCAAACCCATGATCGACAATGTCAATAC 79 Score IGLV2-5*00 141 ttgggagttatgActatgtctcctggtaccaacagcacCcaGgcacagtccccaaacccatgatcTacaatgtcaatac 219 1445 R3 Q P S G V P D R F S G S K S G N T A S M T I S G L * Quality 22262275272725267265252267676726267252555266222725267626677675277777757552652222 Target1 80 TCAGCCCTCAGGGGTCCCTGATCGTTTCTCTGGCTCCAAGTCTGGCAATACGGCCTCCATGACCATCTCTGGACTCTAGG 159 Score IGLV2-5*00 220 tcagccctcaggggtccctgatcgtttctctggctccaagtctggcaatacggcctccatgaccatctctggactcCagg 299 1445 V Y K Q K T A Y E C Q S R S R H S C * T A L P I S A F Quality 55222252675222525222752252222225622525266672252275226775565552222577665575255625 Target1 160 TTTACAAGCAGAAGACGGCATACGAGTGCCAGTCCCGGTCTCGGCATTCCTGCTGAACCGCTCTTCCGATCTCGGCATTC 239 Score L L T _ Quality 72552252777 Target1 240 CTGCTGACCCG 250 Score Another quality report we should investigate is chain abundance plot. > mixcr exportQc chainUsage \\ result/*.vdjca \\ chainUsage.pdf From that plot we can see another issue. According to the publication, the data was generated using a V and J primers multiplex protocol in such a way that every sample should have sequences for both heavy and light IG chains. But we see, that most samples have only one of the chains present in the sample, and those samples that have both still have a strange distribution, which has to be about 50\\50, as every cell has both chains. Fine tuned parameters for BIOMED2 This data is obtained using multiplex mix of V and J primers that can be found here . In the original paper, where Biomed2 primer set was published the authors declare that some primers allow upto 2 mismatches. This means that these mismatches will end up in the final sequences and may introduce bias into alignment process. Thus, a more precise approach is required if we want to be sure that mismatches in primers did not affect our analysis. Before we dive into analysis lets take a closer look at the library structure. Briefly: There are 16 primers (complimentary to VH, VK and VL segments). These primers' sequences are located in FR1 region. R1 is 250bp long and, depending on a certain V gene, it covers the whole V segment upto to the beginning of CDR3 region. There are 5 primers (complimentary to JH, JK and JL segments). These primers are located in FR4 . R2 starts from one of these primers and ends somewhere in FR2 . The proper way to approach V- / J- multiplex derived data is to determine gene features that we are going to align (see geneFeatureToAlign ). These features should be long enough to correctly determine gene segments, but should not include regions complimentary to primer sequences. In our case it is relatively easy to set vParameters.geneFeatureToAlign as the primer located in FR1 region, thus we can start our alignment from CDR1 and there would be still a major part of V gene left ( CDR1 , FR2 , CDR2 , FR3 and GermlineVCDR3Part ), witch is enough for proper assigning. Determining jParameters.geneFeatureToAlign is rather tricky, because J primers are located in FR4 and if we exclude that whole region there would be too few nucleotides left for correct J-gene assignment. Let's have a closer look at the exact location of J primers bellow relative to FR4 border and see if we can preserve part of it. Bellow you can see J primers aligned with one of the corresponding IGHJ / IGKL / IGLJ gene sequences Lowercase letters show mismatches relative to the reference. -------------------------FR4----------><----CD3------ Jh CTTACCTGAGGAGACGGTGACC CTGAGGAGACGGTGACCAGGGTTCCCTGGCCCCAGTAGTCAAAGTAGT IGHJ4*02 -----------------FR4----------><--CD3-- Jk1 TTTGATaTCCACCTTGGTCCC GTTTGATTTCCACCTTGGTCCCTTGGCCGAACGTCCAC IGKJ1*01 -----------------FR4----------><--CD3-- Jk2 TTTAATCTCCAGTCGTGTCCC GTTTAATCTCCAGTCGTGTCCCTTGGCCGAAGGTGATC IGKJ5*01 -----------------FR4----------><--CD3-- Jl1 AGGACGGTGACCTTGGTCCC CTAGGACGGTGACCTTGGTCCCAGTTCCGAAGACATAA IGLJ1*01 -----------------FR4----------><--CD3-- Jl2 AGGACGGTCAGCTgGGTCCC CTAGGACGGTCAGCTTGGTCCCTCCGCCGAATACCACA IGLJ2*01 JH primer 3'-end is 17bp further then FR4Begin . J primers for light chains are all end 9bp further then FR4Begin . Thus, we can safely use 9bp past FR4Begin and be sure, that primer sequences will be excluded. On the picture bellow you can see a more detailed cDNA library structure. Taking into account all that was mentioned above, lets construct a new analysis pipeline: # align raw reads > mixcr align \\ --species HomoSapiens \\ -p kAligner2 \\ -OvParameters.geneFeatureToAlign ={ CDR1Begin:VEnd } + { VEnd:VEnd ( -20 )} \\ -OjParameters.geneFeatureToAlign ={ JBegin ( 20 ) :JBegin } + { JBegin:FR4Begin ( 9 )} \\ -OvParameters.parameters.floatingLeftBound = false \\ -OjParameters.parameters.floatingRightBound = false \\ fastq/SRR8365468_HIP2_male_R1.fastq.gz SRR8365468_HIP2_male_R2.fastq.gz \\ result/SRR8365468_HIP2_male.vdjca # assemble clonotypes > mixcr assemble \\ -OassemblingFeatures = \"{CDR1Begin:FR4Begin(9)}\" \\ -OseparateByV = true \\ -OseparateByJ = true \\ result/SRR8365468_HIP2_male.vdjca \\ result/SRR8365468_HIP2_male.clns # export to tsv > mixcr exportClones \\ result/SRR8365468_HIP2_male.clns \\ result/SRR8365468_HIP2_male.txt Arguments explained: align --species HomoSapiens determines the reference that will be used -p kAligner2 activate BCR dedicated aligner algorithms -OvParameters.geneFeatureToAlign={CDR1Begin:VEnd}+{VEnd:VEnd(-20)} determines V gene features that will be used for alignment. Here, it is V transcript staring from CDR1 till VEnd , and P segment (see gene features ) -OjParameters.geneFeatureToAlign={JBegin(20):JBegin}+{JBegin:FR4Begin(9)} determines J gene features that will be used for alignment. Here, it is a J gene-derived P segment and a J transcript staring from JBegin till 9 bp past FR4Begin . (see gene features ) -OvParameters.parameters.floatingLeftBound=false global alignment will be applied on the left bound of V gene. Meaning the left bound of target will be aligned. This is possible because we have excluded V gene primers location from the alignment feature. Overall it allows to increase V gene identification accuracy and overall specificity of alignments. -OjParameters.parameters.floatingRightBound=false global alignment will be applied on the right bound of J gene. Meaning the right bound of target be aligned. This is possible because we have excluded J gene primers location from the alignment feature. Overall it allows to increase J gene identification accuracy and overall specificity of alignments. fastq/SRR8365468_HIP2_male_R1.fastq.gz SRR8365468_HIP2_male_R2.fastq.gz input FASTQ files pair result/SRR8365468_HIP2_male.vdjca Output .vdjca file name assemble -OassemblingFeatures=\"{CDR1Begin:FR4Begin(9)}\" sets the assembling feature to the region which starts from CDR1Begin and ends 9bp past FR4Begin -OseparateByV=true consider two clones as different if they have equal CDR3 sequence but different V assignments -OseparateByJ=true consider two clones as different if they have equal CDR3 sequence but different J assignments Note that due to the fact that we drastically shrink J feature to align the percentage of dropped reads may increase.","title":"BioMed2"},{"location":"mixcr/guides/biomed2-bcr/#biomed2","text":"Here we will discuss how to process BCR cDNA libraries obtained with BIOMED2 kit.","title":"BIOMED2"},{"location":"mixcr/guides/biomed2-bcr/#data-libraries","text":"This tutorial uses the data from the following publication: High frequency of shared clonotypes in human B cell receptor repertoires. Soto C et al., Nature, 2019 Feb;566(7744):398-402 doi: 10.1038/s41586-019-0934-8 Peripheral blood samples were collected from three donors: HIP1 (female, 47 y.o.), HIP2 (male, 22 y.o.) and HIP3 (male, 29 y.o.). Samples were collected in multiple replicas. Total RNA was extracted from PBMCs and then RT-PCR was utilized to generate BCR amplicon libraries using BIOMED2 multiplex primers. Subsequent libraries were sequenced using next-generation sequencing. The data for this tutorial can be downloaded using the script bellow: curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365468/SRR8365468_1.fastq.gz -o SRR8365468_HIP2_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365468/SRR8365468_2.fastq.gz -o SRR8365468_HIP2_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365457/SRR8365457_1.fastq.gz -o SRR8365457_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365457/SRR8365457_2.fastq.gz -o SRR8365457_HIP1_female_R2.fastq.gz ... See full script #!/usr/bin/env bash curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365468/SRR8365468_1.fastq.gz -o SRR8365468_HIP2_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365468/SRR8365468_2.fastq.gz -o SRR8365468_HIP2_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365457/SRR8365457_1.fastq.gz -o SRR8365457_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365457/SRR8365457_2.fastq.gz -o SRR8365457_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365458/SRR8365458_1.fastq.gz -o SRR8365458_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365458/SRR8365458_2.fastq.gz -o SRR8365458_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365459/SRR8365459_1.fastq.gz -o SRR8365459_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365459/SRR8365459_2.fastq.gz -o SRR8365459_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365463/SRR8365463_1.fastq.gz -o SRR8365463_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365463/SRR8365463_2.fastq.gz -o SRR8365463_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365469/SRR8365469_1.fastq.gz -o SRR8365469_HIP2_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365469/SRR8365469_2.fastq.gz -o SRR8365469_HIP2_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365465/SRR8365465_1.fastq.gz -o SRR8365465_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365465/SRR8365465_2.fastq.gz -o SRR8365465_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365467/SRR8365467_1.fastq.gz -o SRR8365467_HIP2_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365467/SRR8365467_2.fastq.gz -o SRR8365467_HIP2_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365464/SRR8365464_1.fastq.gz -o SRR8365464_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365464/SRR8365464_2.fastq.gz -o SRR8365464_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365450/SRR8365450_1.fastq.gz -o SRR8365450_HIP3_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365450/SRR8365450_2.fastq.gz -o SRR8365450_HIP3_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365461/SRR8365461_1.fastq.gz -o SRR8365461_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365461/SRR8365461_2.fastq.gz -o SRR8365461_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365462/SRR8365462_1.fastq.gz -o SRR8365462_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365462/SRR8365462_2.fastq.gz -o SRR8365462_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365456/SRR8365456_1.fastq.gz -o SRR8365456_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365456/SRR8365456_2.fastq.gz -o SRR8365456_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365475/SRR8365475_1.fastq.gz -o SRR8365475_HIP2_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365475/SRR8365475_2.fastq.gz -o SRR8365475_HIP2_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365460/SRR8365460_1.fastq.gz -o SRR8365460_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365460/SRR8365460_2.fastq.gz -o SRR8365460_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365470/SRR8365470_1.fastq.gz -o SRR8365470_HIP2_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365470/SRR8365470_2.fastq.gz -o SRR8365470_HIP2_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365471/SRR8365471_1.fastq.gz -o SRR8365471_HIP2_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365471/SRR8365471_2.fastq.gz -o SRR8365471_HIP2_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365473/SRR8365473_1.fastq.gz -o SRR8365473_HIP2_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365473/SRR8365473_2.fastq.gz -o SRR8365473_HIP2_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365449/SRR8365449_1.fastq.gz -o SRR8365449_HIP3_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365449/SRR8365449_2.fastq.gz -o SRR8365449_HIP3_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365482/SRR8365482_1.fastq.gz -o SRR8365482_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365482/SRR8365482_2.fastq.gz -o SRR8365482_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365446/SRR8365446_1.fastq.gz -o SRR8365446_HIP3_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365446/SRR8365446_2.fastq.gz -o SRR8365446_HIP3_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365483/SRR8365483_1.fastq.gz -o SRR8365483_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365483/SRR8365483_2.fastq.gz -o SRR8365483_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365447/SRR8365447_1.fastq.gz -o SRR8365447_HIP3_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365447/SRR8365447_2.fastq.gz -o SRR8365447_HIP3_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365484/SRR8365484_1.fastq.gz -o SRR8365484_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365484/SRR8365484_2.fastq.gz -o SRR8365484_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365448/SRR8365448_1.fastq.gz -o SRR8365448_HIP3_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365448/SRR8365448_2.fastq.gz -o SRR8365448_HIP3_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365424/SRR8365424_1.fastq.gz -o SRR8365424_HIP3_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365424/SRR8365424_2.fastq.gz -o SRR8365424_HIP3_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365485/SRR8365485_1.fastq.gz -o SRR8365485_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365485/SRR8365485_2.fastq.gz -o SRR8365485_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365488/SRR8365488_1.fastq.gz -o SRR8365488_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365488/SRR8365488_2.fastq.gz -o SRR8365488_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365421/SRR8365421_1.fastq.gz -o SRR8365421_HIP3_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365421/SRR8365421_2.fastq.gz -o SRR8365421_HIP3_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365489/SRR8365489_1.fastq.gz -o SRR8365489_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365489/SRR8365489_2.fastq.gz -o SRR8365489_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365490/SRR8365490_1.fastq.gz -o SRR8365490_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365490/SRR8365490_2.fastq.gz -o SRR8365490_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365246/SRR8365246_1.fastq.gz -o SRR8365246_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365246/SRR8365246_2.fastq.gz -o SRR8365246_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365474/SRR8365474_1.fastq.gz -o SRR8365474_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365474/SRR8365474_2.fastq.gz -o SRR8365474_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365422/SRR8365422_1.fastq.gz -o SRR8365422_HIP3_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365422/SRR8365422_2.fastq.gz -o SRR8365422_HIP3_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365423/SRR8365423_1.fastq.gz -o SRR8365423_HIP3_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365423/SRR8365423_2.fastq.gz -o SRR8365423_HIP3_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365420/SRR8365420_1.fastq.gz -o SRR8365420_HIP3_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365420/SRR8365420_2.fastq.gz -o SRR8365420_HIP3_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365419/SRR8365419_1.fastq.gz -o SRR8365419_HIP3_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365419/SRR8365419_2.fastq.gz -o SRR8365419_HIP3_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365248/SRR8365248_1.fastq.gz -o SRR8365248_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365248/SRR8365248_2.fastq.gz -o SRR8365248_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365249/SRR8365249_1.fastq.gz -o SRR8365249_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365249/SRR8365249_2.fastq.gz -o SRR8365249_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365247/SRR8365247_1.fastq.gz -o SRR8365247_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365247/SRR8365247_2.fastq.gz -o SRR8365247_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365250/SRR8365250_1.fastq.gz -o SRR8365250_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365250/SRR8365250_2.fastq.gz -o SRR8365250_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365348/SRR8365348_1.fastq.gz -o SRR8365348_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365348/SRR8365348_2.fastq.gz -o SRR8365348_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365251/SRR8365251_1.fastq.gz -o SRR8365251_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365251/SRR8365251_2.fastq.gz -o SRR8365251_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365418/SRR8365418_1.fastq.gz -o SRR8365418_HIP3_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365418/SRR8365418_2.fastq.gz -o SRR8365418_HIP3_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365310/SRR8365310_1.fastq.gz -o SRR8365310_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365310/SRR8365310_2.fastq.gz -o SRR8365310_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365252/SRR8365252_1.fastq.gz -o SRR8365252_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365252/SRR8365252_2.fastq.gz -o SRR8365252_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365308/SRR8365308_1.fastq.gz -o SRR8365308_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365308/SRR8365308_2.fastq.gz -o SRR8365308_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365309/SRR8365309_1.fastq.gz -o SRR8365309_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365309/SRR8365309_2.fastq.gz -o SRR8365309_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365253/SRR8365253_1.fastq.gz -o SRR8365253_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365253/SRR8365253_2.fastq.gz -o SRR8365253_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365307/SRR8365307_1.fastq.gz -o SRR8365307_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365307/SRR8365307_2.fastq.gz -o SRR8365307_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365259/SRR8365259_1.fastq.gz -o SRR8365259_HIP2_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365259/SRR8365259_2.fastq.gz -o SRR8365259_HIP2_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365258/SRR8365258_1.fastq.gz -o SRR8365258_HIP2_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365258/SRR8365258_2.fastq.gz -o SRR8365258_HIP2_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365306/SRR8365306_1.fastq.gz -o SRR8365306_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365306/SRR8365306_2.fastq.gz -o SRR8365306_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365305/SRR8365305_1.fastq.gz -o SRR8365305_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365305/SRR8365305_2.fastq.gz -o SRR8365305_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365304/SRR8365304_1.fastq.gz -o SRR8365304_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365304/SRR8365304_2.fastq.gz -o SRR8365304_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365260/SRR8365260_1.fastq.gz -o SRR8365260_HIP2_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365260/SRR8365260_2.fastq.gz -o SRR8365260_HIP2_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365303/SRR8365303_1.fastq.gz -o SRR8365303_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365303/SRR8365303_2.fastq.gz -o SRR8365303_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365261/SRR8365261_1.fastq.gz -o SRR8365261_HIP2_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365261/SRR8365261_2.fastq.gz -o SRR8365261_HIP2_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365262/SRR8365262_1.fastq.gz -o SRR8365262_HIP2_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365262/SRR8365262_2.fastq.gz -o SRR8365262_HIP2_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365302/SRR8365302_1.fastq.gz -o SRR8365302_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365302/SRR8365302_2.fastq.gz -o SRR8365302_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365301/SRR8365301_1.fastq.gz -o SRR8365301_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365301/SRR8365301_2.fastq.gz -o SRR8365301_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365263/SRR8365263_1.fastq.gz -o SRR8365263_HIP2_male_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365263/SRR8365263_2.fastq.gz -o SRR8365263_HIP2_male_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365264/SRR8365264_1.fastq.gz -o SRR8365264_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365264/SRR8365264_2.fastq.gz -o SRR8365264_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365267/SRR8365267_1.fastq.gz -o SRR8365267_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/007/SRR8365267/SRR8365267_2.fastq.gz -o SRR8365267_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365274/SRR8365274_1.fastq.gz -o SRR8365274_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/004/SRR8365274/SRR8365274_2.fastq.gz -o SRR8365274_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365269/SRR8365269_1.fastq.gz -o SRR8365269_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/009/SRR8365269/SRR8365269_2.fastq.gz -o SRR8365269_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365271/SRR8365271_1.fastq.gz -o SRR8365271_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/001/SRR8365271/SRR8365271_2.fastq.gz -o SRR8365271_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365273/SRR8365273_1.fastq.gz -o SRR8365273_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/003/SRR8365273/SRR8365273_2.fastq.gz -o SRR8365273_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365265/SRR8365265_1.fastq.gz -o SRR8365265_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/005/SRR8365265/SRR8365265_2.fastq.gz -o SRR8365265_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365270/SRR8365270_1.fastq.gz -o SRR8365270_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/000/SRR8365270/SRR8365270_2.fastq.gz -o SRR8365270_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365272/SRR8365272_1.fastq.gz -o SRR8365272_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/002/SRR8365272/SRR8365272_2.fastq.gz -o SRR8365272_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365266/SRR8365266_1.fastq.gz -o SRR8365266_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/006/SRR8365266/SRR8365266_2.fastq.gz -o SRR8365266_HIP1_female_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365268/SRR8365268_1.fastq.gz -o SRR8365268_HIP1_female_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR836/008/SRR8365268/SRR8365268_2.fastq.gz -o SRR8365268_HIP1_female_R2.fastq.gz The project contains 147 FASTQ file pairs. For the purpose of this tutorial we assume that all fastq files are stored in fastq/ folder. The structure of sequences is shown on the picture bellow. The data was obtained using multiplex primers for V and J genes.","title":"Data libraries"},{"location":"mixcr/guides/biomed2-bcr/#upstream-analysis","text":"The easiest way to obtain results from this type of data is to use mixcr analyze amplicon command in the following manner: > mixcr analyze amplicon \\ --species hsa \\ --starting-material rna \\ --receptor-type bcr \\ --5-end v-primers \\ --3-end j-primers \\ --adapters adapters-present \\ fastq/SRR8365468_HIP2_male_R1.fastq.gz fastq/SRR8365468_HIP2_male_R2.fastq.gz \\ result/SRR8365468_HIP2_male Arguments explained: --species is set to hsa for Homo Sapience --starting-material affects the choice of V gene region which will be used as target in align step ( vParameters.geneFeatureToAlign , see align documentation ). By specifying rna as starting material, VTranscriptWithout5UTRWithP will be used as geneFeatureToAlign for V segment. --receptor-type affects the choice of underlying alignment algorithms. Due to somatic hypermutations and long indels MiXCR uses different alignment algorithms for BCRs. --5-end is set to v-primers because samples were prepared using multiplex V-primers. This leads to a local alignment on the left bound of V gene (if adapters-present is specified). --3-end is set to j-primers , since the J multiplex primers were used for library preparation. This leads to a local alignment on the right bound of J gene (if adapters-present is specified). --adapers is set to adapters-present because primer sequences are present in the data and has not been cut prior to. Together with --5-end v-primers and --3-end j-primers it leads to a local alignment on the left bound of V gene and right bound of J gene. A common practice to process all samples at once is to use GNU Parallel : ls fastq/*R1* | parallel -j4 \\ 'mixcr analyze amplicon \\ --species hsa \\ --starting-material rna \\ --receptor-type bcr \\ --5-end v-primers \\ --3-end j-primers \\ --adapters adapters-present \\ {} {=s:R1:R2:=} \\ {=s:.*\\/:result/:;s:_R.*::=}' where -j 4 means that 4 samples will be analyzed at a time. Pay attention to available computing resources.","title":"Upstream analysis"},{"location":"mixcr/guides/biomed2-bcr/#under-the-hood-pipeline","text":"Under the hood the command above actually executes the following pipeline:","title":"Under the hood pipeline:"},{"location":"mixcr/guides/biomed2-bcr/#align","text":"Alignment of raw sequencing reads against reference database of V-, D-, J- and C- gene segments. # align raw reads > mixcr align \\ -s hsa \\ -p kAligner2 \\ -OvParameters.geneFeatureToAlign = \"VTranscriptWithout5UTRWithP\" \\ -OvParameters.parameters.floatingLeftBound = true \\ -OjParameters.parameters.floatingRightBound = true \\ -OcParameters.parameters.floatingRightBound = false \\ --report result/SRR8365468_HIP2_male.report \\ fastq/SRR8365468_HIP2_male_R1.fastq.gz fastq/SRR8365468_HIP2_male_R2.fastq.gz \\ result/SRR8365468_HIP2_male.vdjca Option --report is specified here explicitly. -p kAligner2 specifies the specific BCR aligner. -OvParameters.geneFeatureToAlign=\"VTranscriptWithout5UTRWithP\" Sets a V gene feature to align. Check gene features for more info. -OvParameters.parameters.floatingLeftBound=true Results in a local alignment algorithm for V gene left bound. -OjParameters.parameters.floatingRightBound=true Results in a local alignment algorithm for J gene right bound. -OcParameters.parameters.floatingRightBound=false Results in a global alignment algorithm for C gene right bound.","title":"align"},{"location":"mixcr/guides/biomed2-bcr/#assemble","text":"Assembles alignments into clonotypes and applies several layers of errors correction(ex. quality-awared correction for sequencing errors, clustering to correct for PCR errors). Check mixcr assemble for more information. # assemble clonotypes > mixcr assemble \\ result/SRR8365468_HIP2_male.vdjca \\ result/SRR8365468_HIP2_male.clns","title":"assemble"},{"location":"mixcr/guides/biomed2-bcr/#export","text":"Exports clonotypes from .clns file into human-readable tables. # export to tsv > mixcr exportClones \\ -p full \\ -c IGH result/SRR8365468_HIP2_male.clns \\ result/SRR8365468_HIP2_male.clonotypes.IGHtxt > mixcr exportClones \\ -p full \\ -c IGK result/SRR8365468_HIP2_male.clns \\ result/SRR8365468_HIP2_male.clonotypes.IGK.txt > mixcr exportClones \\ -p full \\ -c IGL result/SRR8365468_HIP2_male.clns \\ result/SRR8365468_HIP2_male.clonotypes.IGL.txt Here -p full defines the full preset of common export columns. Check mixcr export for more information. -\u0441 <chain> defines a specific chain to be exported. By default mixcr analyze exports all chains in separate files. After execution is complete the following list of files is generated for every sample: # human-readable reports SRR8365468_HIP2_male.report # raw alignments (highly compressed binary file) SRR8365468_HIP2_male.vdjca # IGH, IGK and IGL CDR3 clonotypes (highly compressed binary file) SRR8365468_HIP2_male.clns # IGH, IGK and IGL CDR3 clonotypes exported in tab-delimited txt SRR8365468_HIP2_male.IGH.tsv SRR8365468_HIP2_male.IGL.tsv SRR8365468_HIP2_male.IGK.tsv Obtained *.tsv files can be used for manual examination. *.clns files can be used for downstream analysis using mixcr postanalisis .","title":"export"},{"location":"mixcr/guides/biomed2-bcr/#quality-control","text":"Now when we have all files processed lets perform Quality Control. That can be easily done using mixcr exportQc function. # obtain alignment quality control mixcr exportQc align result/*.vdjca alignQc.pdf # obtain chain usage plot mixcr exportQc chainUsage result/*.vdjca usageQc.pdf First let's examine the alignment quality control plot. Here we can see a percentage of successfully aligned reads for every sample as well as the percentage of reads that failed to align for various reasons. Some samples have a good alignment rate (more than 90%). But a lot of samples had some issues that lead to alignment rate decreae to as low as 10-20%. Two major reasons for that outcome is: the lack of TCR/IG sequence absence of J hits Let's take one of the bad quality samples (ex. SRR8365459_HIP1_female) and examine it. To look at the reads' alignments for that sample we first will run mixcr align command for that sample once again, but this time we will specify additional options ( -OallowPartialAlignments=true -OallowNoCDR3PartAlignments=true ) that will preserve partially aligned reads (ex. reads that may lack J gene) and reads that lack CDR3 sequence. > mixcr align \\ -s hsa \\ -p kAligner2 \\ -OvParameters.geneFeatureToAlign = \"VTranscriptWithout5UTRWithP\" \\ -OvParameters.parameters.floatingLeftBound = true \\ -OjParameters.parameters.floatingRightBound = true \\ -OcParameters.parameters.floatingRightBound = false \\ -OallowPartialAlignments = true \\ -OallowNoCDR3PartAlignments = true \\ fastq/SRR8365459_HIP_female_R1.fastq.gz fastq/SRR8365459_HIP_female_R2.fastq.gz \\ SRR8365459_HIP_female_debug.vdjca Now, when we have a new .vdjca file let's visualize how reads cover FRs and CDRs regions for that sample. > mixcr exportQc coverage \\ SRR8365459_HIP_female_debug.vdjca \\ SRR8365459_HIP_female_debug_coverageQc.pdf This will generate three .pdf formatted plots: R1 alignment, R2 alignment and alignment of overlapped reads. These plots can tell us the percentage of reads that cover each region at a certain position. Briefly, for this sample, only those reads that overlap show a good coverage pattern. R1 R2 Overlap Finally, we can look at raw alignments using mixcr exportAlignmentsPretty . The function bellow will generate a .txt human-readable file with alignments. We use parameter --skip 1000 to skip first 1000 reads, as first reads usually have bad quality, and --limit 100 will export only 100 alignments as we usually don't need to examine every alignment to see the issue. > mixcr exportAlignmentsPretty \\ --skip 1000 \\ --limit 100 \\ SRR8365459_HIP_female_debug.vdjca \\ SRR8365459_HIP_female.alignments.txt Bellow you can see a few alignments from the generated file. The first one is an example of well aligned reads. >>> Read ids: 1840 FR1><CDR1 CDR1><FR2 _ L R L S C A A S G F T L S D Y Y M S W I R Q A P G K Quality 77767826778888888888888887788888888888878888888888888887888778888888888888887878 Target0 0 CCTGAGACTCTCCTGTGCAGCCTCTGGATTCACCTTGAGTGACTACTACATGAGCTGGATCCGCCAGGCTCCAGGGAAGG 79 Score IGHV3-11*00 107 cctgagactctcctgtgcagcctctggattcaccttCagtgactactacatgagctggatccgccaggctccagggaagg 186 2102 FR2><CDR2 CDR2><FR3 G L E W V S H I S G S G N T I D Y A D S V K G R F T I Quality 88788887778888888888887788888888888888888888888888888888887888888888888888888888 Target0 80 GGCTGGAGTGGGTTTCACACATTAGTGGCAGTGGTAATACCATAGACTACGCAGACTCTGTGAAGGGCCGATTCACCATC 159 Score IGHV3-11*00 187 ggctggagtgggtttcaTacattagtAgTagtggtaGtaccataTactacgcagactctgtgaagggccgattcaccatc 266 2102 FR3><CDR3 S R D N A K N S L Y L Q M N S L R D D D T A V F Y C A Quality 88888888888888888888888888888888888888888888888888888888888888888888888887888788 Target0 160 TCCAGGGACAACGCCAAGAACTCGCTCTATCTGCAAATGAACAGCCTGAGAGACGACGACACGGCCGTGTTTTATTGTGC 239 Score IGHV3-11*00 267 tccagggacaacgccaagaactcActGtatctgcaaatgaacagcctgagagCcgaGgacacggccgtgtAttaCtgtgc 346 2102 V> <D D> <J CDR3><FR4 FR4> R G R Y A L D Y W G Q G T R V T V S S _ Quality 88878788888888788888888888888888888888888888888888888888888888877776 Target0 240 GAGAGGCCGTTATGCCCTAGATTATTGGGGCCAGGGAACCCGGGTCACCGTCTCCTCAGGTAAGCCCC 307 Score IGHV3-11*00 347 gagag 351 2102 IGHD3-16*00 65 cgttatAcc 73 31 IGHD2-2*00 56 tatgcc 61 30 IGHD3-10*00 61 cgttat 66 30 IGHJ4*00 28 gaCtaCtggggccagggaacccTggtcaccgtctcctcag 67 313 IGHJ5*00 37 tggggccagggaacccTggtcaccgtctcctcag 70 311 Now, the following alignment is a troubled one. And for this particular sample the majority of alignments look similar. We can see that one read does not align to any reference sequences and has a lot of low-quality nucleotides. >>> Read ids: 1853 Quality 25762677888767572572527252276555757625555572625275777255225225525252725222252552 Target0 0 CGGCATTCCTGCTGAAACGAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCCGTCACATTAAA 79 Score Quality 57222255256566257772557225555565256777672262255775556255567762277262262677727762 Target0 80 AAAAAAAACCAGCAGTGATGTTGGCAGTTATGACTATGTCTCCTGGTACCAACAGCACCCAGGCACAGTCTCCAAACCCA 159 Score Quality 42222547622525426677662772660000000000000000000000000000000000000000000000000000 Target0 160 TGACGTACAATGACAATACTCAGCCCTCAGGGGTCCCTGATCGATTCTCTGGCTTCAAGTCTGGCAATACGCCCTCCATG 239 Score Quality 00000000000 Target0 240 ACCATCCTTAG 250 Score CDR2><F CDR1><FR2 FR2><CDR2 F G S Y V Y V S W Y Q Q H S S T V P K P M I D N V N T Quality 00000000000000000000000000000000000000000006247675667452527762544226662675276772 Target1 0 TTTGGGAGTTATGTCTATGTCTCCTGGTACCAACAGCACTCAAGCACAGTCCCCAAACCCATGATCGACAATGTCAATAC 79 Score IGLV2-5*00 141 ttgggagttatgActatgtctcctggtaccaacagcacCcaGgcacagtccccaaacccatgatcTacaatgtcaatac 219 1445 R3 Q P S G V P D R F S G S K S G N T A S M T I S G L * Quality 22262275272725267265252267676726267252555266222725267626677675277777757552652222 Target1 80 TCAGCCCTCAGGGGTCCCTGATCGTTTCTCTGGCTCCAAGTCTGGCAATACGGCCTCCATGACCATCTCTGGACTCTAGG 159 Score IGLV2-5*00 220 tcagccctcaggggtccctgatcgtttctctggctccaagtctggcaatacggcctccatgaccatctctggactcCagg 299 1445 V Y K Q K T A Y E C Q S R S R H S C * T A L P I S A F Quality 55222252675222525222752252222225622525266672252275226775565552222577665575255625 Target1 160 TTTACAAGCAGAAGACGGCATACGAGTGCCAGTCCCGGTCTCGGCATTCCTGCTGAACCGCTCTTCCGATCTCGGCATTC 239 Score L L T _ Quality 72552252777 Target1 240 CTGCTGACCCG 250 Score Another quality report we should investigate is chain abundance plot. > mixcr exportQc chainUsage \\ result/*.vdjca \\ chainUsage.pdf From that plot we can see another issue. According to the publication, the data was generated using a V and J primers multiplex protocol in such a way that every sample should have sequences for both heavy and light IG chains. But we see, that most samples have only one of the chains present in the sample, and those samples that have both still have a strange distribution, which has to be about 50\\50, as every cell has both chains.","title":"Quality control"},{"location":"mixcr/guides/biomed2-bcr/#fine-tuned-parameters-for-biomed2","text":"This data is obtained using multiplex mix of V and J primers that can be found here . In the original paper, where Biomed2 primer set was published the authors declare that some primers allow upto 2 mismatches. This means that these mismatches will end up in the final sequences and may introduce bias into alignment process. Thus, a more precise approach is required if we want to be sure that mismatches in primers did not affect our analysis. Before we dive into analysis lets take a closer look at the library structure. Briefly: There are 16 primers (complimentary to VH, VK and VL segments). These primers' sequences are located in FR1 region. R1 is 250bp long and, depending on a certain V gene, it covers the whole V segment upto to the beginning of CDR3 region. There are 5 primers (complimentary to JH, JK and JL segments). These primers are located in FR4 . R2 starts from one of these primers and ends somewhere in FR2 . The proper way to approach V- / J- multiplex derived data is to determine gene features that we are going to align (see geneFeatureToAlign ). These features should be long enough to correctly determine gene segments, but should not include regions complimentary to primer sequences. In our case it is relatively easy to set vParameters.geneFeatureToAlign as the primer located in FR1 region, thus we can start our alignment from CDR1 and there would be still a major part of V gene left ( CDR1 , FR2 , CDR2 , FR3 and GermlineVCDR3Part ), witch is enough for proper assigning. Determining jParameters.geneFeatureToAlign is rather tricky, because J primers are located in FR4 and if we exclude that whole region there would be too few nucleotides left for correct J-gene assignment. Let's have a closer look at the exact location of J primers bellow relative to FR4 border and see if we can preserve part of it. Bellow you can see J primers aligned with one of the corresponding IGHJ / IGKL / IGLJ gene sequences Lowercase letters show mismatches relative to the reference. -------------------------FR4----------><----CD3------ Jh CTTACCTGAGGAGACGGTGACC CTGAGGAGACGGTGACCAGGGTTCCCTGGCCCCAGTAGTCAAAGTAGT IGHJ4*02 -----------------FR4----------><--CD3-- Jk1 TTTGATaTCCACCTTGGTCCC GTTTGATTTCCACCTTGGTCCCTTGGCCGAACGTCCAC IGKJ1*01 -----------------FR4----------><--CD3-- Jk2 TTTAATCTCCAGTCGTGTCCC GTTTAATCTCCAGTCGTGTCCCTTGGCCGAAGGTGATC IGKJ5*01 -----------------FR4----------><--CD3-- Jl1 AGGACGGTGACCTTGGTCCC CTAGGACGGTGACCTTGGTCCCAGTTCCGAAGACATAA IGLJ1*01 -----------------FR4----------><--CD3-- Jl2 AGGACGGTCAGCTgGGTCCC CTAGGACGGTCAGCTTGGTCCCTCCGCCGAATACCACA IGLJ2*01 JH primer 3'-end is 17bp further then FR4Begin . J primers for light chains are all end 9bp further then FR4Begin . Thus, we can safely use 9bp past FR4Begin and be sure, that primer sequences will be excluded. On the picture bellow you can see a more detailed cDNA library structure. Taking into account all that was mentioned above, lets construct a new analysis pipeline: # align raw reads > mixcr align \\ --species HomoSapiens \\ -p kAligner2 \\ -OvParameters.geneFeatureToAlign ={ CDR1Begin:VEnd } + { VEnd:VEnd ( -20 )} \\ -OjParameters.geneFeatureToAlign ={ JBegin ( 20 ) :JBegin } + { JBegin:FR4Begin ( 9 )} \\ -OvParameters.parameters.floatingLeftBound = false \\ -OjParameters.parameters.floatingRightBound = false \\ fastq/SRR8365468_HIP2_male_R1.fastq.gz SRR8365468_HIP2_male_R2.fastq.gz \\ result/SRR8365468_HIP2_male.vdjca # assemble clonotypes > mixcr assemble \\ -OassemblingFeatures = \"{CDR1Begin:FR4Begin(9)}\" \\ -OseparateByV = true \\ -OseparateByJ = true \\ result/SRR8365468_HIP2_male.vdjca \\ result/SRR8365468_HIP2_male.clns # export to tsv > mixcr exportClones \\ result/SRR8365468_HIP2_male.clns \\ result/SRR8365468_HIP2_male.txt Arguments explained:","title":"Fine tuned parameters for BIOMED2"},{"location":"mixcr/guides/biomed2-bcr/#align_1","text":"--species HomoSapiens determines the reference that will be used -p kAligner2 activate BCR dedicated aligner algorithms -OvParameters.geneFeatureToAlign={CDR1Begin:VEnd}+{VEnd:VEnd(-20)} determines V gene features that will be used for alignment. Here, it is V transcript staring from CDR1 till VEnd , and P segment (see gene features ) -OjParameters.geneFeatureToAlign={JBegin(20):JBegin}+{JBegin:FR4Begin(9)} determines J gene features that will be used for alignment. Here, it is a J gene-derived P segment and a J transcript staring from JBegin till 9 bp past FR4Begin . (see gene features ) -OvParameters.parameters.floatingLeftBound=false global alignment will be applied on the left bound of V gene. Meaning the left bound of target will be aligned. This is possible because we have excluded V gene primers location from the alignment feature. Overall it allows to increase V gene identification accuracy and overall specificity of alignments. -OjParameters.parameters.floatingRightBound=false global alignment will be applied on the right bound of J gene. Meaning the right bound of target be aligned. This is possible because we have excluded J gene primers location from the alignment feature. Overall it allows to increase J gene identification accuracy and overall specificity of alignments. fastq/SRR8365468_HIP2_male_R1.fastq.gz SRR8365468_HIP2_male_R2.fastq.gz input FASTQ files pair result/SRR8365468_HIP2_male.vdjca Output .vdjca file name","title":"align"},{"location":"mixcr/guides/biomed2-bcr/#assemble_1","text":"-OassemblingFeatures=\"{CDR1Begin:FR4Begin(9)}\" sets the assembling feature to the region which starts from CDR1Begin and ends 9bp past FR4Begin -OseparateByV=true consider two clones as different if they have equal CDR3 sequence but different V assignments -OseparateByJ=true consider two clones as different if they have equal CDR3 sequence but different J assignments Note that due to the fact that we drastically shrink J feature to align the percentage of dropped reads may increase.","title":"assemble"},{"location":"mixcr/guides/create-custom-library/","text":"Creating RepSeq.io formatted JSON library Suppose we have a bunch of de-novo discovered V/D/J/C sequences in fasta files with the following content: my_genes.v.fasta *` (contain VRegion, i.e. from the FR1 begin to the last nucleotide right before RSS, normally somewhere after conserved cysteine) >TRBV12-348*00|F GATGCTGGAGTTATCCAGTCACCCCGCCATGAGGTGACAGAGATGGGACAAGAAGTGACTCTGAGATGTAAACCA ATTTCAGGCCACAACTCCCTTTTCTGGTACAGACAGACCATGATGCGGGGACTGGAGTTGCTCATTTACTTTAAC AACAACGTTCCGATAGATGATTCAGGGATGCCCGAGGATCGATTCTCAGCTAAGATGCCTAATGCATCATTCTCC ACTCTGAAGATCCAGCCCTCAGAACCCAGGGACTCAGCTGTGTACTTCTGTGCCAGCAGTTTAGC my_genes.j.fasta (contains JRegion, i.e. from first J gene nucleotide, right after RSS, until FR4 end) >TRBJ1-528*00|F TAACAACCAGGCCCAGTATTTTGGAGAAGGGACTCGGCTCTCTGTTCTAG To use these sequences in MiXCR or any other repseqio -based software, we have to create JSON library file for them (see format description here ). There are two main options of creating library file: - create repseqio-JSON formatted library using two automated steps and then, if required, fill in information that was not automatically detected - from scratch, manually provide JSON file with meta information and positions of CDR s (complementarity determining regions) and FR s (framework regions) along with positions of other important gene features required for downstream software (see list of available anchor points here ). Here we will cover automatic import procedure. Please see library format description for more details. Automatically create boilerplate library We can do this using fromFasta action: > repseqio fromFasta --taxon-id 9606 \\ --species-name hs --species-name homsap \\ --chain TRB --name-index 0 \\ --gene-type V --gene-feature VRegion \\ my_genes.v.fasta my_library.v.json > repseqio fromFasta --taxon-id 9606 \\ --species-name hs --species-name homsap \\ --chain TRB --name-index 0 \\ --gene-type D --gene-feature DRegion \\ my_genes.d.fasta my_library.d.json > repseqio fromFasta --taxon-id 9606 \\ --species-name hs --species-name homsap \\ --chain TRB --name-index 0 \\ --gene-type J --gene-feature JRegion \\ my_genes.j.fasta my_library.j.json repseqio merge my_library.v.json my_library.d.json my_library.j.json my_library.json rm my_library.v.json my_library.d.json my_library.j.json To check the library file, we have so far, we can run debug command: > repseqio debug my_library.json this will print the following (supposing we used files mentioned above): TRBV12-38*00 (F) TRB WARNINGS: Unable to find CDR3 start V5UTRGermline N: Not Available AA: Not Available ... GermlineVCDR3Part N: Not Available AA: Not Available VRegion N: GATGCTGGAGTTATCCAGTCACCCCGCCATGAGGTGACAGAGATGGGACAAGAAGTGACTCTGAGATGTAAACCAATTTCAGGCCACAACTCCCTTTTCTGGTACAGACAGACCATGATGCGGGGACTGGAGTTGCTCATTTACTTTAACAACAACGTTCCGATAGATGATTCAGGGATGCCCGAGGATCGATTCTCAGCTAAGATGCCTAATGCATCATTCTCCACTCTGAAGATCCAGCCCTCAGAACCCAGGGACTCAGCTGTGTACTTCTGTGCCAGCAGTTTAGC AA: DAGVIQSPRHEVTEMGQEVTLRCKPISGHNSLFWYRQTMMRGLELLIYFNNNVPIDDSGMPEDRFSAKMPNASFSTLKIQPSEPRDSAVYFCASSL_ ... ========= TRBJ1-528*00 (F) TRB WARNINGS: Unable to find CDR3 end JRegion N: TAACAACCAGGCCCAGTATTTTGGAGAAGGGACTCGGCTCTCTGTTCTAG AA: Not Available ... FR4 N: Not Available AA: Not Available ========= basically this shows us how repseqio see the library content. After fromFasta action library contains information only on begin and end positions of genes (strictly speaking begin and end positions of gene feature we specified using --gene-feature option), so the only regions it can extract are VRegion for V gene and JRegion for J (see illustration here ). For normal repertoire extraction we, at least, must specify positions of CDR3Begin (in V gene) and CDR3End (in J gene), and probably also need FR s, if we plan to extract corresponding regions from repertoire data. Here we again have two options: manually specify corresponding positions by adding new items to the anchorPoints field (see library format description ) let repseqio find sequence with known anchor points homologous to our sequences from other library (built-in library in this case) and infer missing anchor point from them. The first option may be the only way if target 'V'/'J' segments are not homologous to any sequences from available library. For the second approach we can use inferPoint action from repseqio utility and built-in repseqio library as a reference (used by default) (see library repo here ): repseqio inferPoints -g VRegion -g JRegion -f my_library.json my_library.json here we inferred points for V genes based on alignment of VRegion with V genes from built-in repseqio library, and for J genes base on alignment of JRegion . my_library.json specified both as input and output file, with -f option, so it will be in-place overwritten with the result ( !! don't use such execution pattern for libraries containing any manual edits or other hands-on time investments, this command may delete or corrupt the file). !! The output (alignments) of this commands should be carefully analysed to detect possible inconsistencies this automated procedure may introduce, or to spot genes for that repseqio failed to find homologous genes. The output file ( my_library2.json ) will contain library with inferred points: [ { \"taxonId\" : 9606 , \"speciesNames\" : [ \"homosapiens\" , \"homsap\" , \"hs\" , \"hsa\" , \"human\" ], \"genes\" : [ { \"baseSequence\" : \"file://my_genes.fasta#TRBV12-348*00\" , \"name\" : \"TRBV12-38*00\" , \"geneType\" : \"V\" , \"isFunctional\" : true , \"chains\" : [ \"TRB\" ], \"anchorPoints\" : { \"FR1Begin\" : 0 , \"CDR1Begin\" : 78 , \"FR2Begin\" : 93 , \"CDR2Begin\" : 144 , \"FR3Begin\" : 162 , \"CDR3Begin\" : 273 , \"VEnd\" : 290 } }, { \"baseSequence\" : \"file://my_genes.fasta#TRBJ1-528*00\" , \"name\" : \"TRBJ1-528*00\" , \"geneType\" : \"J\" , \"isFunctional\" : true , \"chains\" : [ \"TRB\" ], \"anchorPoints\" : { \"JBegin\" : 0 , \"FR4Begin\" : 22 , \"FR4End\" : 50 } } ] } ] After final library is built, consider running repseqio debug -p my_library.json . This will check the library and print information on the problems it detected in the library. To simplify further distribution of the library one may want to compile library into a single file, containing all required sequence information, see repseqio compile docs. Creating library from IMGT -style padded fasta file (please notice) You can download already converted IMGT library here . repseqio util contain special action fromPaddedFasta to convert IMGT -style libraries to json format. Example input file with V genes (say imgt_lib_v.fasta ): >AE000659|TRAV12-3*01|Homo sapiens|F|V-REGION|221187..221463|277 nt|1| | | | |277+45=322| | | cagaaggaggtggagcaggatcctggaccactcagtgttccagagggagccattgtttct ctcaactgcacttacagcaacagtgct..................tttcaatacttcatg tggtacagacagtattccagaaaaggccctgagttgctgatgtacacatactcc...... ......agtggtaacaaagaagat...............ggaaggtttacagcacaggtc gataaatccagcaagtatatctccttgttcatcagagactcacagcccagtgattcagcc acctacctctgtgcaatgagcg >M17656|TRAV12-3*02|Homo sapiens|(F)|V-REGION|67..343|277 nt|1| | | | |277+45=322| | | cagaaggaggtggagcaggatcctggaccactcagtgttccagagggagccattgtttct ctcaactgcacttacagcaacagtgct..................tttcaatacttcatg tggtacagacagtattccagaataggccctgagttgctgatgtacacatactcc...... ......agtggtaacaaagaagat...............ggaaggtttacagcacaggtc gataaatccagcaagtatatctccttgttcatcagagactcacagcccagtgattcagcc acctacctctgtgcaatgagcg Example input file with J genes (say imgt_lib_j.fasta ): >X02885|TRAJ12*01|Homo sapiens|F|J-REGION|53..112|60 nt|3| | | | |60+0=60| | | ggatggatagcagctataaattgatcttcgggagtgggaccagactgctggtcaggcctg >M94081|TRAJ13*01|Homo sapiens|F|J-REGION|71280..71342|63 nt|3| | | | |63+0=63| | | tgaattctgggggttaccagaaagttacctttggaattggaacaaagctccaagtcatcc caa >AC023226|TRAJ13*02|Homo sapiens|F|J-REGION|51292..51354|63 nt|3| | | | |63+0=63| |rev-compl| tgaattctgggggttaccagaaagttacctttggaactggaacaaagctccaagtcatcc caa To use fromPaddedFasta action, you should specify positions of anchor points (see here ) in padded file. Here is the most common options for V genes in IMGT : -PFR1Begin=0 -PCDR1Begin=78 -PFR2Begin=114 -PCDR2Begin=165 -PFR3Begin=195 -PCDR3Begin=309 -PVEnd=-1 and J genes -PJBegin=0 -PFR4Begin=-31 -LFR4Begin='[WF](G.G)' -PFR4End=-1 Here are example commands for input files provided above: > repseqio fromPaddedFasta -t 9606 -c TRA -j 3 -n 1 -g V -PFR1Begin = 0 -PCDR1Begin = 78 -PFR2Begin = 114 -PCDR2Begin = 165 -PFR3Begin = 195 -PCDR3Begin = 309 -PVEnd = -1 imgt_lib_v.fasta imgt_lib_v.json.fasta imgt_lib_v.json > repseqio fromPaddedFasta -t 9606 -c TRA -j 3 -n 1 -g J -PJBegin = 0 -PFR4Begin = -31 -LFR4Begin = '[WF](G.G)' -PFR4End = -1 imgt_lib_j.fasta imgt_lib_j.json.fasta imgt_lib_j.json this will create library files imgt_lib_j.json and imgt_lib_v.json , along with un-padded imgt_lib_j.json.fasta and imgt_lib_v.json.fasta that libraries refers to (see section above for more information on json library format). Using the library To use your library with MiXCR, just copy json file and all referenced fasta files to ~/.mixcr/libraries folder (example for files form \"Creating library from scratch, based on fasta file\"): > mkdir -p ~/.mixcr/libraries > cp my_library2.json ~/.mixcr/libraries/my_library.json run mixcr as follows: > mixcr align --library my_library -s homsap ... To simplify library distribution, library can be packed into a single file along with all sequence information (notice, this procedure will incorporate only regions of the sequences that are used inside the library, so it will not pack the whole chromosome sequence, but only parts referenced in the library): > repseqio compile my_library2.json my_library.compiled.json.gz (repseqio also supports direct reading from gzipped files) Now just single file must be copied to the library folder > cp my_library2.json ~/.mixcr/libraries/my_library.compiled.json.gz","title":"Assembling custom reference library"},{"location":"mixcr/guides/create-custom-library/#creating-repseqio-formatted-json-library","text":"Suppose we have a bunch of de-novo discovered V/D/J/C sequences in fasta files with the following content: my_genes.v.fasta *` (contain VRegion, i.e. from the FR1 begin to the last nucleotide right before RSS, normally somewhere after conserved cysteine) >TRBV12-348*00|F GATGCTGGAGTTATCCAGTCACCCCGCCATGAGGTGACAGAGATGGGACAAGAAGTGACTCTGAGATGTAAACCA ATTTCAGGCCACAACTCCCTTTTCTGGTACAGACAGACCATGATGCGGGGACTGGAGTTGCTCATTTACTTTAAC AACAACGTTCCGATAGATGATTCAGGGATGCCCGAGGATCGATTCTCAGCTAAGATGCCTAATGCATCATTCTCC ACTCTGAAGATCCAGCCCTCAGAACCCAGGGACTCAGCTGTGTACTTCTGTGCCAGCAGTTTAGC my_genes.j.fasta (contains JRegion, i.e. from first J gene nucleotide, right after RSS, until FR4 end) >TRBJ1-528*00|F TAACAACCAGGCCCAGTATTTTGGAGAAGGGACTCGGCTCTCTGTTCTAG To use these sequences in MiXCR or any other repseqio -based software, we have to create JSON library file for them (see format description here ). There are two main options of creating library file: - create repseqio-JSON formatted library using two automated steps and then, if required, fill in information that was not automatically detected - from scratch, manually provide JSON file with meta information and positions of CDR s (complementarity determining regions) and FR s (framework regions) along with positions of other important gene features required for downstream software (see list of available anchor points here ). Here we will cover automatic import procedure. Please see library format description for more details.","title":"Creating RepSeq.io formatted JSON library"},{"location":"mixcr/guides/create-custom-library/#automatically-create-boilerplate-library","text":"We can do this using fromFasta action: > repseqio fromFasta --taxon-id 9606 \\ --species-name hs --species-name homsap \\ --chain TRB --name-index 0 \\ --gene-type V --gene-feature VRegion \\ my_genes.v.fasta my_library.v.json > repseqio fromFasta --taxon-id 9606 \\ --species-name hs --species-name homsap \\ --chain TRB --name-index 0 \\ --gene-type D --gene-feature DRegion \\ my_genes.d.fasta my_library.d.json > repseqio fromFasta --taxon-id 9606 \\ --species-name hs --species-name homsap \\ --chain TRB --name-index 0 \\ --gene-type J --gene-feature JRegion \\ my_genes.j.fasta my_library.j.json repseqio merge my_library.v.json my_library.d.json my_library.j.json my_library.json rm my_library.v.json my_library.d.json my_library.j.json To check the library file, we have so far, we can run debug command: > repseqio debug my_library.json this will print the following (supposing we used files mentioned above): TRBV12-38*00 (F) TRB WARNINGS: Unable to find CDR3 start V5UTRGermline N: Not Available AA: Not Available ... GermlineVCDR3Part N: Not Available AA: Not Available VRegion N: GATGCTGGAGTTATCCAGTCACCCCGCCATGAGGTGACAGAGATGGGACAAGAAGTGACTCTGAGATGTAAACCAATTTCAGGCCACAACTCCCTTTTCTGGTACAGACAGACCATGATGCGGGGACTGGAGTTGCTCATTTACTTTAACAACAACGTTCCGATAGATGATTCAGGGATGCCCGAGGATCGATTCTCAGCTAAGATGCCTAATGCATCATTCTCCACTCTGAAGATCCAGCCCTCAGAACCCAGGGACTCAGCTGTGTACTTCTGTGCCAGCAGTTTAGC AA: DAGVIQSPRHEVTEMGQEVTLRCKPISGHNSLFWYRQTMMRGLELLIYFNNNVPIDDSGMPEDRFSAKMPNASFSTLKIQPSEPRDSAVYFCASSL_ ... ========= TRBJ1-528*00 (F) TRB WARNINGS: Unable to find CDR3 end JRegion N: TAACAACCAGGCCCAGTATTTTGGAGAAGGGACTCGGCTCTCTGTTCTAG AA: Not Available ... FR4 N: Not Available AA: Not Available ========= basically this shows us how repseqio see the library content. After fromFasta action library contains information only on begin and end positions of genes (strictly speaking begin and end positions of gene feature we specified using --gene-feature option), so the only regions it can extract are VRegion for V gene and JRegion for J (see illustration here ). For normal repertoire extraction we, at least, must specify positions of CDR3Begin (in V gene) and CDR3End (in J gene), and probably also need FR s, if we plan to extract corresponding regions from repertoire data. Here we again have two options: manually specify corresponding positions by adding new items to the anchorPoints field (see library format description ) let repseqio find sequence with known anchor points homologous to our sequences from other library (built-in library in this case) and infer missing anchor point from them. The first option may be the only way if target 'V'/'J' segments are not homologous to any sequences from available library. For the second approach we can use inferPoint action from repseqio utility and built-in repseqio library as a reference (used by default) (see library repo here ): repseqio inferPoints -g VRegion -g JRegion -f my_library.json my_library.json here we inferred points for V genes based on alignment of VRegion with V genes from built-in repseqio library, and for J genes base on alignment of JRegion . my_library.json specified both as input and output file, with -f option, so it will be in-place overwritten with the result ( !! don't use such execution pattern for libraries containing any manual edits or other hands-on time investments, this command may delete or corrupt the file). !! The output (alignments) of this commands should be carefully analysed to detect possible inconsistencies this automated procedure may introduce, or to spot genes for that repseqio failed to find homologous genes. The output file ( my_library2.json ) will contain library with inferred points: [ { \"taxonId\" : 9606 , \"speciesNames\" : [ \"homosapiens\" , \"homsap\" , \"hs\" , \"hsa\" , \"human\" ], \"genes\" : [ { \"baseSequence\" : \"file://my_genes.fasta#TRBV12-348*00\" , \"name\" : \"TRBV12-38*00\" , \"geneType\" : \"V\" , \"isFunctional\" : true , \"chains\" : [ \"TRB\" ], \"anchorPoints\" : { \"FR1Begin\" : 0 , \"CDR1Begin\" : 78 , \"FR2Begin\" : 93 , \"CDR2Begin\" : 144 , \"FR3Begin\" : 162 , \"CDR3Begin\" : 273 , \"VEnd\" : 290 } }, { \"baseSequence\" : \"file://my_genes.fasta#TRBJ1-528*00\" , \"name\" : \"TRBJ1-528*00\" , \"geneType\" : \"J\" , \"isFunctional\" : true , \"chains\" : [ \"TRB\" ], \"anchorPoints\" : { \"JBegin\" : 0 , \"FR4Begin\" : 22 , \"FR4End\" : 50 } } ] } ] After final library is built, consider running repseqio debug -p my_library.json . This will check the library and print information on the problems it detected in the library. To simplify further distribution of the library one may want to compile library into a single file, containing all required sequence information, see repseqio compile docs.","title":"Automatically create boilerplate library"},{"location":"mixcr/guides/create-custom-library/#creating-library-from-imgt-style-padded-fasta-file","text":"(please notice) You can download already converted IMGT library here . repseqio util contain special action fromPaddedFasta to convert IMGT -style libraries to json format. Example input file with V genes (say imgt_lib_v.fasta ): >AE000659|TRAV12-3*01|Homo sapiens|F|V-REGION|221187..221463|277 nt|1| | | | |277+45=322| | | cagaaggaggtggagcaggatcctggaccactcagtgttccagagggagccattgtttct ctcaactgcacttacagcaacagtgct..................tttcaatacttcatg tggtacagacagtattccagaaaaggccctgagttgctgatgtacacatactcc...... ......agtggtaacaaagaagat...............ggaaggtttacagcacaggtc gataaatccagcaagtatatctccttgttcatcagagactcacagcccagtgattcagcc acctacctctgtgcaatgagcg >M17656|TRAV12-3*02|Homo sapiens|(F)|V-REGION|67..343|277 nt|1| | | | |277+45=322| | | cagaaggaggtggagcaggatcctggaccactcagtgttccagagggagccattgtttct ctcaactgcacttacagcaacagtgct..................tttcaatacttcatg tggtacagacagtattccagaataggccctgagttgctgatgtacacatactcc...... ......agtggtaacaaagaagat...............ggaaggtttacagcacaggtc gataaatccagcaagtatatctccttgttcatcagagactcacagcccagtgattcagcc acctacctctgtgcaatgagcg Example input file with J genes (say imgt_lib_j.fasta ): >X02885|TRAJ12*01|Homo sapiens|F|J-REGION|53..112|60 nt|3| | | | |60+0=60| | | ggatggatagcagctataaattgatcttcgggagtgggaccagactgctggtcaggcctg >M94081|TRAJ13*01|Homo sapiens|F|J-REGION|71280..71342|63 nt|3| | | | |63+0=63| | | tgaattctgggggttaccagaaagttacctttggaattggaacaaagctccaagtcatcc caa >AC023226|TRAJ13*02|Homo sapiens|F|J-REGION|51292..51354|63 nt|3| | | | |63+0=63| |rev-compl| tgaattctgggggttaccagaaagttacctttggaactggaacaaagctccaagtcatcc caa To use fromPaddedFasta action, you should specify positions of anchor points (see here ) in padded file. Here is the most common options for V genes in IMGT : -PFR1Begin=0 -PCDR1Begin=78 -PFR2Begin=114 -PCDR2Begin=165 -PFR3Begin=195 -PCDR3Begin=309 -PVEnd=-1 and J genes -PJBegin=0 -PFR4Begin=-31 -LFR4Begin='[WF](G.G)' -PFR4End=-1 Here are example commands for input files provided above: > repseqio fromPaddedFasta -t 9606 -c TRA -j 3 -n 1 -g V -PFR1Begin = 0 -PCDR1Begin = 78 -PFR2Begin = 114 -PCDR2Begin = 165 -PFR3Begin = 195 -PCDR3Begin = 309 -PVEnd = -1 imgt_lib_v.fasta imgt_lib_v.json.fasta imgt_lib_v.json > repseqio fromPaddedFasta -t 9606 -c TRA -j 3 -n 1 -g J -PJBegin = 0 -PFR4Begin = -31 -LFR4Begin = '[WF](G.G)' -PFR4End = -1 imgt_lib_j.fasta imgt_lib_j.json.fasta imgt_lib_j.json this will create library files imgt_lib_j.json and imgt_lib_v.json , along with un-padded imgt_lib_j.json.fasta and imgt_lib_v.json.fasta that libraries refers to (see section above for more information on json library format).","title":"Creating library from IMGT-style padded fasta file"},{"location":"mixcr/guides/create-custom-library/#using-the-library","text":"To use your library with MiXCR, just copy json file and all referenced fasta files to ~/.mixcr/libraries folder (example for files form \"Creating library from scratch, based on fasta file\"): > mkdir -p ~/.mixcr/libraries > cp my_library2.json ~/.mixcr/libraries/my_library.json run mixcr as follows: > mixcr align --library my_library -s homsap ... To simplify library distribution, library can be packed into a single file along with all sequence information (notice, this procedure will incorporate only regions of the sequences that are used inside the library, so it will not pack the whole chromosome sequence, but only parts referenced in the library): > repseqio compile my_library2.json my_library.compiled.json.gz (repseqio also supports direct reading from gzipped files) Now just single file must be copied to the library folder > cp my_library2.json ~/.mixcr/libraries/my_library.compiled.json.gz","title":"Using the library"},{"location":"mixcr/guides/external-libraries/","text":"Using external library MiXCR has a built-in set of reference libraries that were carefully created by our team. However, one can use other external libraries, such as IMGT or any other. These libraries have toi be property compiled to use with MiXCR. Using IMGT library Compiled IMGT library file for MiXCR can be downloaded at https://github.com/repseqio/library-imgt/releases . In order to use the library put the .json library file to one of the following locations: - ~/.mixcr/libraries folder - the directory from where mixcr is started - libraries/ subfolder of mixcr installation folder Use mixcr -v to see what folders mixcr uses to look for library .json file. > mixcr -v ... Library search path: - built-in libraries - /home/username/. - /home/username/.mixcr/libraries - /software/mixcr/libraries Option --library specifies the library to use for mixcr align . If the short name is given (ex. \u2013library imgt ) mixcr will look for the latest version in the folder. Otherwise, to use one of the old versions give the full name including the version number (ex. -library imgt.201631-4 ) Example: > mixcr align --library imgt input_R1.fastq input_R2.fastq alignments.vdjca","title":"Using external libraries"},{"location":"mixcr/guides/external-libraries/#using-external-library","text":"MiXCR has a built-in set of reference libraries that were carefully created by our team. However, one can use other external libraries, such as IMGT or any other. These libraries have toi be property compiled to use with MiXCR.","title":"Using external library"},{"location":"mixcr/guides/external-libraries/#using-imgt-library","text":"Compiled IMGT library file for MiXCR can be downloaded at https://github.com/repseqio/library-imgt/releases . In order to use the library put the .json library file to one of the following locations: - ~/.mixcr/libraries folder - the directory from where mixcr is started - libraries/ subfolder of mixcr installation folder Use mixcr -v to see what folders mixcr uses to look for library .json file. > mixcr -v ... Library search path: - built-in libraries - /home/username/. - /home/username/.mixcr/libraries - /software/mixcr/libraries Option --library specifies the library to use for mixcr align . If the short name is given (ex. \u2013library imgt ) mixcr will look for the latest version in the folder. Otherwise, to use one of the old versions give the full name including the version number (ex. -library imgt.201631-4 ) Example: > mixcr align --library imgt input_R1.fastq input_R2.fastq alignments.vdjca","title":"Using IMGT library"},{"location":"mixcr/guides/generic-multiplex-bcr/","text":"Multiplex BCR cDNA libraries For this tutorial we will use the data published in the following article: Aizik L, Dror Y, Taussig D, Barzel A, Carmi Y, Wine Y. Antibody Repertoire Analysis of Tumor-Infiltrating B Cells Reveals Distinct Signatures and Distributions Across Tissues. Front Immunol. 2021 Jul 19;12:705381. doi: 10.3389/fimmu.2021.705381 . PMID: 34349765; PMCID: PMC8327180. Experiment setting BALB/C mice were injected subcutaneously into mammary fat-pad number five with 2\u00d7105 4T1 cells suspended in 30 \u00b5l of DMEM (Gibco, Thermo Fisher Scientific). The induced tumors were monitored by measuring their size twice a week using calipers. After 23 days, mice were sacrificed, and B cells were isolated from four tissue types, namely, bone marrow, blood, DLNs, and tumors. For the control mice, three tissue types were collected - bone marrow, blood, and lymph nodes. Lymphocytes were isolated from every sample. For all tissues, cells were then incubated with a mixture of anti-IgG, anti-IgM, anti-CD138 magnetic beads. Later, total RNA was isolated following by first-strand cDNA synthesis using SuperScript\u2122 III First-Strand Synthesis System with 200 ng RNA as the template and Oligo (dT) primers. After cDNA synthesis, PCR amplification of the variable heavy Ig genes was performed using a set of 19 forward primers with the gene-specific regions annealing to framework 1 of the VDJ-region and two reverse primers with the gene-specific region binding to the IgG and IgM constant regions. Recovered DNA products from the first PCR was applied to a second PCR amplification to attach Illumina adaptors to the amplified VH genes using the primer extension method. Technical replicates (two per sample) of BCR-Seq libraries were prepared based on cDNA from each mouse/tissue. cDNA was split, and library preparation was performed in parallel with different Illumina indices as described above. cDNA libraries were subjected to NGS on the MiSeq platform with the reagent kit V3 2 \u00d7 300 bp paired-end (Illumina). Show primers # PCR1 Forward primers # Primers inglude step-out(glue) sequence and gene specific region m-VH-glue-Fw1 CCCTCCTTTAATTCCCGAKGTRMAGCTTCAGGAGTC m-VH-glue-Fw2 CCCTCCTTTAATTCCCGAGGTBCAGCTBCAGCAGTC m-VH-glue-Fw3 CCCTCCTTTAATTCCCCAGGTGCAGCTGAAGSASTC m-VH-glue-Fw4 CCCTCCTTTAATTCCCGAGGTCCARCTGCAACARTC m-VH-glue-Fw5 CCCTCCTTTAATTCCCCAGGTYCAGCTBCAGCARTC m-VH-glue-Fw6 CCCTCCTTTAATTCCCCAGGTYCARCTGCAGCAGTC m-VH-glue-Fw7 CCCTCCTTTAATTCCCCAGGTCCACGTGAAGCAGTC m-VH-glue-Fw8 CCCTCCTTTAATTCCCGAGGTGAASSTGGTGGAATC m-VH-glue-Fw9 CCCTCCTTTAATTCCCGAVGTGAWGYTGGTGGAGTC m-VH-glue-Fw10 CCCTCCTTTAATTCCCGAGGTGCAGSKGGTGGAGTC m-VH-glue-Fw11 CCCTCCTTTAATTCCCGAKGTGCAMCTGGTGGAGTC m-VH-glue-Fw12 CCCTCCTTTAATTCCCGAGGTGAAGCTGATGGARTC m-VH-glue-Fw13 CCCTCCTTTAATTCCCGAGGTGCARCTTGTTGAGTC m-VH-glue-Fw14 CCCTCCTTTAATTCCCGARGTRAAGCTTCTCGAGTC m-VH-glue-Fw15 CCCTCCTTTAATTCCCGAAGTGAARSTTGAGGAGTC m-VH-glue-Fw16 CCCTCCTTTAATTCCCCAGGTTACTCTRAAAGWGTSTG m-VH-glue-Fw17 CCCTCCTTTAATTCCCCAGGTCCAACTVCAGCARCC m-VH-glue-Fw18 CCCTCCTTTAATTCCCGATGTGAACTTGGAAGTGTC m-VH-glue-Fw19 CCCTCCTTTAATTCCCGAGGTGAAGGTCATCGAGTC # PCR1 Reverse primers # Primers inglude step-out(glue) sequence and gene specific region m-IgMC-BC-glue-REV GAGGAGAGAGAGAGAGCGAGGGGGAAGACATTTGGG m-IgGall-BC-glue-REV GAGGAGAGAGAGAGAGCCARKGGATAGACHGATGGG # PCR2 Forward primer # Primer ingludes Universal trueSeq Illumina adaptor and glue sequence from PCR1 forward primers PE-IgALL-Univ-FW AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCTNNNNCCCTCCTTTAATTCCC # PCR2 Reverse primer # Primer ingludes Universal trueSeq Illumina adaptor and glue sequence from PCR1 reverse primers YW23X_PE-Idx-REV CAAGCAGAAGACGGCATACGAGATNNNNNNGTGACTGGAGTTCAGACGTGTGCTCTTCCGATCTNNNNGAGGAGAGAGAGAGAG Data for this project is available under PRJNA699402 BioProject id. One command Solution The easiest way to obtain clonotype tables for this type of data is to use a universal mixcr analyze command. The exact command for a single sample you can see bellow: ' > mixcr analyze amplicon \\ --species mmu \\ --starting-material rna \\ --receptor-type bcr \\ --align \"-OvParameters.geneFeatureToAlign={CDR1Begin:VEnd}+{VEnd:VEnd(-20)}\" \\ --5-end no-v-primers \\ --3-end c-primers \\ --adapters adapters-present \\ --assemble \"-OassemblingFeatures={CDR1Begin:FR4End} -OseparateByC=true\" \\ M1_4T1_Blood_S2_L001_R1_001_B3.1.fastq.gz \\ M1_4T1_Blood_S2_L001_R1_001_B3.1.fastq.gz \\ M1_4T1_Blood_S2 The meaning of these options is the following. --species is set to mmu for Mus Musculus --starting-material is set to rna and corresponds to VTranscriptWithout5UTRWithP alignment feature for V-gene (see Gene features and anchor points for details) --receptor-type bcr . It affects the choice of alignment algorithms. MiXCR uses a specific set of algorithms for BCR data. --align \"-OvParameters.geneFeatureToAlign={CDR1Begin:VEnd}+{VEnd:VEnd(-20)}\" Here we pass an extra argument for mixcr align step of the pipeline. From the library structure we see, that all V-gene specific primers are located inside FR1 region, thus we crop the alignment region to start from beginning of CDR1 . Thus, we can trust our alignment, knowing that there are no nucleotides that could have come from the primer sequence. Ideologically this equals to primer trimming. --5-end is set to no-v-primers because we have cropped -OvParameters.geneFeatureToAlign in a way that it does not cover the region where primers are located. This leads to a global alignment algorithms to align the left bound of V gene. --3-end-primers is set to c-primers . Here, C primers were used in cDNA synthesis. We did not adjust this with alignment feature for C gene, because these primers are isotype specific, and we do need these sequences for correct isotype determination. If we had shrunk -OcParameters.geneFeatureToAlign , trimming the C-primer region, there would be too few nucleotides left from C gene for correct isotype identification. This choice leads to a global alignment algorithms to align the right bound of J gene and a local alignment algorithm for the left bound of C-gene. --adapers adapters-present because we still have C-primer sequences in our data. --assemble \"-OassemblingFeatures={CDR1Begin:FR4End} -OseparateByC=true\" . Here we pass two extra arguments for mixcr assemble step of the pipeline. First we extend the assembling feature to start from CDR1 . That is because this is BCR data, where hypermutations occur throughout V gene, and we want to capture as much as we can. Second, we use -OseparateByC=true option to separate clones with the same assembling feature sequence but different C genes, which is essential for isotype identification. M1_4T1_Blood_S2_L001_R1_001_B3.1.fastq.gz M1_4T1_Blood_S2_L001_R1_001_B3.1.fastq.gz M1_4T1_Blood_S2 Finally, we provide the names of input files and an output prefix: Now, since we have multiple files ist easier to process them all together instead of running the same command multiple times. One of the ways to achieve it is to use GNU Parallel : > fastq/*R1* | parallel -j2 \\ '~/mixcr-private/mixcr analyze amplicon \\ --species mmu \\ --starting-material rna \\ --receptor-type bcr \\ --5-end no-v-primers \\ --3-end c-primers \\ --adapters adapters-present \\ --align \"-OvParameters.geneFeatureToAlign={CDR1Begin:VEnd}+{VEnd:VEnd(-20)}\" \\ --assemble \"-OassemblingFeatures={CDR1Begin:FR4End} -OseparateByC=true\" \\ {} \\ {=s:R1:R2:=} \\ {=s:.*/:results/:;s:_L001.*::=}' Under the hood of mixcr analyze pipeline Under the hood, mixcr analyze amplicon command that we use above actually executes the following pipeline of MiXCR actions: align Performs : alignment of raw sequencing reads against reference database of V-, D-, J- and C- gene segments pattern matching of tag pattern sequence and extraction of barcodes > mixcr align \\ --species mmu \\ --report result/Multi_TRA_10ng_3.report \\ --json-report result/Multi_TRA_10ng_3.report.json \\ -OvParameters.geneFeatureToAlign ={ CDR1Begin:VEnd } + { VEnd:VEnd ( -20 )} \\ -OvParameters.parameters.floatingLeftBound = false \\ -OjParameters.parameters.floatingRightBound = false \\ -OcParameters.parameters.floatingRightBound = true \\ fastq/M1_4T1_Blood_S2_L001_R1_001_B3.1.fastq.gz \\ fastq/M1_4T1_Blood_S2_L001_R2_001_B3.1.fastq.gz \\ results/M1_4T1_Blood_S2.vdjca Options --report and --json-report are specified here explicitly. Since we start from RNA data we use VTranscriptWithout5UTRWithP for the alignment of V segments (see Gene features and anchor points . -OvParameters.parameters.floatingLeftBound=false -OjParameters.parameters floatingRightBound=false -OcParameters.parameters.floatingRightBound=true These option determine global vs local alignment algorithm on the bounds of gene segments. As have been mentioned above we will use global alignment on the left bound of V gene and right bound of J gene. The alignment on the right bound of C gene will be local due to the presence of primer sequence. This step utilizes all available CPUs and scales perfectly. When there are a lot of CPUs, the only limiting factor is the speed of disk I/O. To limit the number of used CPUs one can pass --threads N option. assemble Assembles clonotypes and applies several layers of errors correction: assembly consensus CDR3 sequence quality-awared correction for sequencing errors clustering to correct for PCR errors > mixcr assemble \\ --report results/Multi_TRA_10ng_3.report \\ --json-report results/Multi_TRA_10ng_3.report.json \\ -OassemblingFeatures ={ CDR1Begin:FR4End } \\ -OseparateByC = true \\ M1_4T1_Blood_S2.vdjca \\ M1_4T1_Blood_S2.clns Options --report and --json-report are specified here explicitly so that the report files will be appended with assembly report. exportClones Finally, to export clonotype tables in tabular form exportClones is used: > mixcr exportClones \\ -p full \\ M1_4T1_Blood_S2.clns \\ M1_4T1_Blood_S2.tsv Here -p full is a shorthand for the full preset of common export columns. Quality control Now when the upstream analysis is finished we can move on to quality control. First lets look at the alignment report plot. # obtain alignment quality control > mixcr exportQc align \\ result/*.vdjca \\ alignQc.pdf We see that all samples have a very high score of successfully aligned reads. No signficat issues present. Next, lets examine chane usage distribution We don't see any contamination from other Ig chains. As expected, all samples consist only of IGH chains. Downstream analysis There are two types of basic downstream analysis: individual and overlap . Individual computes CDR3 metrics, diversity and gene usage metrics for each dataset. Overlap computes statistical metrics of repertoire overlap. In both cases MiXCR applies appropriate sample normalization. To run postanalysis routines we need to prepare a metadata file in a .tsv or .csv form. Metadata must contain a sample column which will be used to match metadata with cloneset files. Bellow you can find a metadata table for our samples. Metadata sample mice_id condition tissue replica M1_4T1_Blood_S2 M1 4T1 Blood 1 M1_4T1_Blood_S6 M1 4T1 Blood 2 M1_4T1_BM_S4 M1 4T1 BM 1 M1_4T1_BM_S8 M1 4T1 BM 2 M1_4T1_DLN_S3 M1 4T1 DLN 1 M1_4T1_DLN_S7 M1 4T1 DLN 2 M1_4T1_Tumor_S5 M1 4T1 Tumor 1 M1_4T1_Tumor_S1 M1 4T1 Tumor 2 M2_4T1_Blood_S2 M2 4T1 Blood 1 M2_4T1_Blood_S6 M2 4T1 Blood 2 M2_4T1_BM_S4 M2 4T1 BM 1 M2_4T1_BM_S8 M2 4T1 BM 2 M2_4T1_DLN_S3 M2 4T1 DLN 1 M2_4T1_DLN_S7 M2 4T1 DLN 2 M2_4T1_Tumor_S1 M2 4T1 Tumor 1 M2_4T1_Tumor_S5 M2 4T1 Tumor 2 M3_4T1_Blood_S10 M3 4T1 Blood 1 M3_4T1_Blood_S9 M3 4T1 Blood 2 M3_4T1_BM_S7 M3 4T1 BM 1 M3_4T1_BM_S8 M3 4T1 BM 2 M3_4T1_DLN_S11 M3 4T1 DLN 1 M3_4T1_DLN_S12 M3 4T1 DLN 2 M3_4T1_Tumor_S13 M3 4T1 Tumor 1 M3_4T1_Tumor_S14 M3 4T1 Tumor 2 M4_4T1_Blood_S2 M4 4T1 Blood 1 M4_4T1_Blood_S7 M4 4T1 Blood 2 M4_4T1_BM_S10 M4 4T1 BM 1 M4_4T1_BM_S5 M4 4T1 BM 2 M4_4T1_DLN_S4 M4 4T1 DLN 1 M4_4T1_DLN_S9 M4 4T1 DLN 2 M4_4T1_Tumor_S1 M4 4T1 Tumor 1 M4_4T1_Tumor_S6 M4 4T1 Tumor 2 N1_control_Blood_S5 N1 control Blood 1 N1_control_Blood_S6 N1 control Blood 2 N1_control_BM_S1 N1 control BM 1 N1_control_BM_S2 N1 control BM 2 N1_control_LN_S3 N1 control LN 1 N1_control_LN_S4 N1 control LN 2 N2_control_Blood_S5 N2 control Blood 1 N2_control_Blood_S6 N2 control Blood 2 N2_control_BM_S1 N2 control BM 1 N2_control_BM_S2 N2 control BM 2 N2_control_LN_S3 N2 control LN 1 N2_control_LN_S4 N2 control LN 2 Individual postanalysis To compute a set of individual metrics we run the following command: > mixcr postanalysis individual \\ --metadata metadata.tsv \\ --default-downsampling count-reads-auto \\ --default-weight-function read \\ --only-productive \\ --chains IGH \\ --tables postanalysis/pa.i.tsv \\ --preproc-tables postanalysis/preproc.i.tsv \\ results/*.clns \\ postanalysis/individual.json.gz The meaning of specified options is the following: --metadata specified metadata file to use --default-downsampling downsampling applied to normalize the clonesets. Without appropriate normalization it is not possible to make a statistical comparisons between datasets. In the considered case we normalize data to the same number of reads, and this number is computed automatically based on the number of unique reads in each clone in each dataset. See reference for all downsampling options. Default downsampling may be overridden for individual metrics. --default-weight-function defines weight of each clonotype. Set read beacause there are no barcodes in the data. --only-productive drop clonotypes with out-of-frame CDR3 sequences or containing stop codons --tables path for postanalysis metrics in a tabular form --preproc-tables path for tabular summary of the applied downsampling and other samples preprocessing (for example filtering productive clonotypes) --chains Since only IGH chain is present in the samples we can specify it directly. After execution, we will have the following files: > ls postanalysis/ # gzipped JSON with all results individual.json.gz # summary of applied preprocessors preproc.i.IGH.tsv # diversity tables pa.i.diversity.IGH.tsv # CDR3 metrics tables & CDR3 properties pa.i.cdr3metrics.IGH.tsv # V- / J- / VJ- usage tables pa.i.vUsage.IGH.tsv pa.i.JUsage.IGH.tsv pa.i.VJUsage.IGH.tsv # Isotype usage table pa.i.IsotypeUsage.IGH.tsv #V Spectratype tables pa.i.VSpectratype.IGH.tsv pa.i.VSpectratypeMean.IGH.tsv Preprocessing summary tables (e.g. preproc.i.IGH.tsv ) contain detailed information on how downsampling was applied for each metric: characteristic sample preprocessor nElementsBefore sumWeightBefore nElementsAfter sumWeightAfter preprocessor#1 nElementsBefore#1 sumWeightBefore#1 nElementsAfter#1 sumWeightAfter#1 preprocessor#2 nElementsBefore#2 sumWeightBefore#2 nElementsAfter#2 sumWeightAfter#2 preprocessor#3 nElementsBefore#3 sumWeightBefore#3 nElementsAfter#3 sumWeightAfter#3 IsotypeUsage M2_4T1_BM_S8.clns FilterIGHchains|FilterstopsinCDR3,OOFinCDR3|Downsampleautomatic 72121 1120769.0 30741 125550.0 FilterIGHchains 72121 1120769.0 72121 1120769.0 FilterstopsinCDR3,OOFinCDR3 72121 1120769.0 64734 1024106.0 Downsampleautomatic 64734 1024106.0 30741 125550 IsotypeUsage M2_4T1_DLN_S7.clns FilterIGHchains|FilterstopsinCDR3,OOFinCDR3|Downsampleautomatic 95523 648857.0 45810 125550.0 FilterIGHchains 95523 648857.0 95523 648857.0 FilterstopsinCDR3,OOFinCDR3 95523 648857.0 86623 601517.0 Downsampleautomatic 86623 601517.0 45810 125550 IsotypeUsage N1_control_BM_S1.clns FilterIGHchains|FilterstopsinCDR3,OOFinCDR3|Downsampleautomatic 92761 1111263.0 33352 125550.0 FilterIGHchains 92761 1111263.0 92761 1111263.0 FilterstopsinCDR3,OOFinCDR3 92761 1111263.0 83364 1019615.0 Downsampleautomatic 83364 1019615.0 33352 125550 IsotypeUsage M1_4T1_Tumor_S1.clns FilterIGHchains|FilterstopsinCDR3,OOFinCDR3|Downsampleautomatic 1910 1542543.0 653 125550.0 FilterIGHchains 1910 1542543.0 1910 1542543.0 FilterstopsinCDR3,OOFinCDR3 1910 1542543.0 1771 1320389.0 Downsampleautomatic 1771 1320389.0 653 125550 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... Columns explained: characteristic metrics name (ex. IsotypeUsage ) sample name of the .clns file (ex. M2_4T1_BM_S8.clns ) preprocessor the name of the overall preprocessors chain applied to the dataset. FilterIGHchains|FilterstopsinCDR3,OOFinCDR3|Downsampleautomatic means the data has been subjected to three consecutive preprocessors: Only IGH chains were filtered Non-functional clonotypes containing stop-codons and OOF clones were filltered out and only functional were left Automatic Downsampling function has been applied to normalize sample sizes nElementsBefore number of clonotypes before any preprocessing applied (that is in the initial dataset) (ex. 72121 clones) sumWeightBefore total weight of all clonotypes before any preprocessing applied. The weight may be either number of reads, UMIs or cells, depending on the selected downsampling. In this case it represents the total number of reads that contribute to clonotypes (ex. 1120769 reads) nElementsAfter number of clonotypes in the dataset after all preprocessors have been applied (ex. 30741 clones) sumWeightBefore total weight of all clonotypes after all preprocessors have been applied (ex. 125550 ). Note that all samples will have the same value for sumWeightBefore in this case, because downsampling was applied, thus all samples have been normalized to the same weight. preprocessor#i i-th part of the preprocessing chain (ex. preprocessor#1 : Filter IGH chains ) nElementsBefore#i number of clonotypes before i-th preprocessor has been applied (ex. nElementsBefore#1 : 72121 ) sumWeightBefore#i total weight of all clonotypes before i-th preprocessor has been applied (ex. sumWeightBefore#1 : 1120769 ) nElementsAfter#i number of clonotypes after i-th preprocessor has been applied (ex. nElementsAfter#1 : 30741 ) sumWeightAfter#i total weight of all clonotypes after i-th preprocessor has been applied (ex. sumWeightAfter#1 : 125550 ) . . . Various postanalysis tables contain information about each metric computed for each sample. For example, let's have a look inside pa.i.JUsage.IGH.tsv . This table contains frequencies for each J segment present in the sample : sample IGHJ3*00 IGHJ2*00 IGHJ1*00 IGHJ4*00 M1_4T1_Blood_S2.clns 0.24678614097968937 0.356726403823178 0.12035045798486659 0.27613699721226603 M1_4T1_Blood_S6.clns 0.2431620868180008 0.37610513739546 0.1291358024691358 0.25159697331740344 M1_4T1_BM_S4.clns 0.24498606133014736 0.2887216248506571 0.13416168857029073 0.3321306252489048 M1_4T1_BM_S8.clns 0.24844285145360415 0.2861091198725607 0.13389088012743927 0.33155714854639584 M1_4T1_DLN_S3.clns 0.24744723217841497 0.2569573874950219 0.06846674631620868 0.42712863401035445 ... ... ... ... ... Graphical output MiXCR allows to export graphical results in PDF, EPS, PNG and SVG formats using exportPlots command. For diversity metrics and CDR3 properties MiXCR allows to group data in different ways according to the submitted metadata.tsv and apply various statistical tests for group comparison. Diversity Let's reconstruct one of the figures from the paper. Let's say we want to look at the Normalized ShannonWiener diversity index. We will group samples by tissues and use separate facets for contol and experiment group. That can be easily done with a single command: > mixcr exportPlots diversity \\ --metadata metadata.tsv \\ --plot-type boxplot \\ --metric normalizedShannonWienerIndex \\ --primary-group tissue \\ --facet-by condition \\ --primary-group-values Tumor,LN,DLN,Blood,BM \\ postanalysis/individual.json.gz \\ normalizedShannonWienerIndex.pdf Arguments explained: --metadata metadata.tsv is the name of metadata file. --plot-type boxplot is the type of plot to generate. See mixcr exportPlots for other options. --metric : normalizedShannonWienerIndex is the name of the metric to visualize. See diversity metrics for other options. If not specified multiple plots will be generated for each available diversity metric. --primary-group tissue is name of the column with metadata values from metadata.tsv to group samples by. --primary-group-values Tumor,LN,DLN,Blood,BM represents the order of --primary-group values on the plot ( tissue in this case) --facet-by condition is name of the column with metadata values from metadata.tsv to group samples and represent on separate facets for each group. postanalysis/individual.json.gz the name of gzipped JSON file with all postanalysis results generated by `mixcr postanalysis individual normalizedShannonWienerIndex.pdf the name of output file. Also specifies the extension of the output file. One can use one of the following graphical out formats: .pdf , .eps , .png and .svg . V usage Now lets look at the J gene distribution among all samples. > mixcr exportPlots jUsage \\ --metadata metadata.tsv \\ --chains IGH \\ --palette sequential \\ --color-key tissue \\ postanalysis/individual.json.gz \\ jUsage.pdf --palette sequential . Determines color palette to be used for the heatmap. See gene segment usage plots for other options. --color-key tissue . Metadata column name. Overlap postanalysis Two samples overlap Since our samples were prepared in replicas, it is often usefully to check if clone frequencies correlate between replicas. Let's take two replicas of one biological sample and overlap two repertoires. We will use mixcr overlapScatterPlot function : > mixcr overlapScatterPlot \\ --downsampling none \\ --chains IGH \\ results/M1_4T1_Blood_S2.clns results/M1_4T1_Blood_S6.clns \\ M1_4T1_Blood.overlap.pdf All-vs-All overlap MiXCR also allows performing an overall overlap analysis using mixcr postanalysis overlap . But here, since there are a lot of samples we want to actually overlap groups of samples. Running the following command will perform pairwise overlap comparison between groups of samples with different tissue and condition values. > mixcr postanalysis overlap -f \\ --factor-by tissue,condition \\ --metadata metadata.tsv \\ --default-downsampling count-reads-auto \\ --default-weight-function read \\ --only-productive \\ --tables postanalysis/postanalysis.overlap.tsv \\ --preproc-tables postanalysis/preproc.overlap.tsv \\ results/*.clns \\ postanalysisls /overlap.tissue_condition.json.gz --factor-by tissue,condition defines the set of metadata columns for which a list of unique intersections will be created and used for group comparison Other arguments are same as for individual postanalysis mentioned above. This command will generate a set of files: #Tsv files for every metric postanalysis.overlap.F1Index.IGH.tsv postanalysis.overlap.F2Index.IGH.tsv postanalysis.overlap.JaccardIndex.IGH.tsv postanalysis.overlap.PearsonAll.IGH.tsv postanalysis.overlap.Pearson.IGH.tsv postanalysis.overlap.RelativeDiversity.IGH.tsv postanalysis.overlap.SharedClonotypes.IGH.tsv # summary of applied preprocessors preproc.overlap.IGH.tsv # gzipped JSON with all results overlap.tissue_condition.json.gz The tabular output for example for F2 metric will look like: LN,control BM,4T1 BM,control DLN,4T1 Blood,4T1 Blood,control Tumor,4T1 LN,control 1.0 0.013774364765374518 0.04650437588957222 0.014099278585204775 0.031036354127937787 0.027203139358090662 0.010163687504766344 BM,4T1 0.013774364765374518 1.0 0.05529474567524548 0.04405383350942532 0.10645680248929848 0.07417602888238424 0.09466939004888049 BM,control 0.04650437588957222 0.05529474567524548 1.0 0.03286381709464843 0.233349361966603 0.11870207376989239 0.06314011150401469 DLN,4T1 0.014099278585204775 0.04405383350942532 0.03286381709464843 1.0 0.1768279650269904 0.0188038306990065 0.10982393111366022 Blood,4T1 0.031036354127937787 0.10645680248929848 0.233349361966603 0.1768279650269904 1.0 0.0634481121480744 0.13415831269714423 Blood,control 0.027203139358090662 0.07417602888238424 0.11870207376989239 0.0188038306990065 0.0634481121480744 1.0 0.03867881035646659 Tumor,4T1 0.010163687504766344 0.09466939004888049 0.06314011150401469 0.10982393111366022 0.13415831269714423 0.03867881035646659 1.0 Every overlap metric is also possible to present in a graphical format: > mixcr exportPlots overlap \\ --chains IGH \\ --palette density \\ --metric f2Index \\ postanalysis/overlap.tissue_condition.json.gz \\ overlap.time_marker.pdf For list of available metrics see mixcr exportPlots overlap For further details see overlap postanalysis reference .","title":"Targeted BCR Multiplex libraries"},{"location":"mixcr/guides/generic-multiplex-bcr/#multiplex-bcr-cdna-libraries","text":"For this tutorial we will use the data published in the following article: Aizik L, Dror Y, Taussig D, Barzel A, Carmi Y, Wine Y. Antibody Repertoire Analysis of Tumor-Infiltrating B Cells Reveals Distinct Signatures and Distributions Across Tissues. Front Immunol. 2021 Jul 19;12:705381. doi: 10.3389/fimmu.2021.705381 . PMID: 34349765; PMCID: PMC8327180.","title":"Multiplex BCR cDNA libraries"},{"location":"mixcr/guides/generic-multiplex-bcr/#experiment-setting","text":"BALB/C mice were injected subcutaneously into mammary fat-pad number five with 2\u00d7105 4T1 cells suspended in 30 \u00b5l of DMEM (Gibco, Thermo Fisher Scientific). The induced tumors were monitored by measuring their size twice a week using calipers. After 23 days, mice were sacrificed, and B cells were isolated from four tissue types, namely, bone marrow, blood, DLNs, and tumors. For the control mice, three tissue types were collected - bone marrow, blood, and lymph nodes. Lymphocytes were isolated from every sample. For all tissues, cells were then incubated with a mixture of anti-IgG, anti-IgM, anti-CD138 magnetic beads. Later, total RNA was isolated following by first-strand cDNA synthesis using SuperScript\u2122 III First-Strand Synthesis System with 200 ng RNA as the template and Oligo (dT) primers. After cDNA synthesis, PCR amplification of the variable heavy Ig genes was performed using a set of 19 forward primers with the gene-specific regions annealing to framework 1 of the VDJ-region and two reverse primers with the gene-specific region binding to the IgG and IgM constant regions. Recovered DNA products from the first PCR was applied to a second PCR amplification to attach Illumina adaptors to the amplified VH genes using the primer extension method. Technical replicates (two per sample) of BCR-Seq libraries were prepared based on cDNA from each mouse/tissue. cDNA was split, and library preparation was performed in parallel with different Illumina indices as described above. cDNA libraries were subjected to NGS on the MiSeq platform with the reagent kit V3 2 \u00d7 300 bp paired-end (Illumina). Show primers # PCR1 Forward primers # Primers inglude step-out(glue) sequence and gene specific region m-VH-glue-Fw1 CCCTCCTTTAATTCCCGAKGTRMAGCTTCAGGAGTC m-VH-glue-Fw2 CCCTCCTTTAATTCCCGAGGTBCAGCTBCAGCAGTC m-VH-glue-Fw3 CCCTCCTTTAATTCCCCAGGTGCAGCTGAAGSASTC m-VH-glue-Fw4 CCCTCCTTTAATTCCCGAGGTCCARCTGCAACARTC m-VH-glue-Fw5 CCCTCCTTTAATTCCCCAGGTYCAGCTBCAGCARTC m-VH-glue-Fw6 CCCTCCTTTAATTCCCCAGGTYCARCTGCAGCAGTC m-VH-glue-Fw7 CCCTCCTTTAATTCCCCAGGTCCACGTGAAGCAGTC m-VH-glue-Fw8 CCCTCCTTTAATTCCCGAGGTGAASSTGGTGGAATC m-VH-glue-Fw9 CCCTCCTTTAATTCCCGAVGTGAWGYTGGTGGAGTC m-VH-glue-Fw10 CCCTCCTTTAATTCCCGAGGTGCAGSKGGTGGAGTC m-VH-glue-Fw11 CCCTCCTTTAATTCCCGAKGTGCAMCTGGTGGAGTC m-VH-glue-Fw12 CCCTCCTTTAATTCCCGAGGTGAAGCTGATGGARTC m-VH-glue-Fw13 CCCTCCTTTAATTCCCGAGGTGCARCTTGTTGAGTC m-VH-glue-Fw14 CCCTCCTTTAATTCCCGARGTRAAGCTTCTCGAGTC m-VH-glue-Fw15 CCCTCCTTTAATTCCCGAAGTGAARSTTGAGGAGTC m-VH-glue-Fw16 CCCTCCTTTAATTCCCCAGGTTACTCTRAAAGWGTSTG m-VH-glue-Fw17 CCCTCCTTTAATTCCCCAGGTCCAACTVCAGCARCC m-VH-glue-Fw18 CCCTCCTTTAATTCCCGATGTGAACTTGGAAGTGTC m-VH-glue-Fw19 CCCTCCTTTAATTCCCGAGGTGAAGGTCATCGAGTC # PCR1 Reverse primers # Primers inglude step-out(glue) sequence and gene specific region m-IgMC-BC-glue-REV GAGGAGAGAGAGAGAGCGAGGGGGAAGACATTTGGG m-IgGall-BC-glue-REV GAGGAGAGAGAGAGAGCCARKGGATAGACHGATGGG # PCR2 Forward primer # Primer ingludes Universal trueSeq Illumina adaptor and glue sequence from PCR1 forward primers PE-IgALL-Univ-FW AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCTNNNNCCCTCCTTTAATTCCC # PCR2 Reverse primer # Primer ingludes Universal trueSeq Illumina adaptor and glue sequence from PCR1 reverse primers YW23X_PE-Idx-REV CAAGCAGAAGACGGCATACGAGATNNNNNNGTGACTGGAGTTCAGACGTGTGCTCTTCCGATCTNNNNGAGGAGAGAGAGAGAG Data for this project is available under PRJNA699402 BioProject id.","title":"Experiment setting"},{"location":"mixcr/guides/generic-multiplex-bcr/#one-command-solution","text":"The easiest way to obtain clonotype tables for this type of data is to use a universal mixcr analyze command. The exact command for a single sample you can see bellow: ' > mixcr analyze amplicon \\ --species mmu \\ --starting-material rna \\ --receptor-type bcr \\ --align \"-OvParameters.geneFeatureToAlign={CDR1Begin:VEnd}+{VEnd:VEnd(-20)}\" \\ --5-end no-v-primers \\ --3-end c-primers \\ --adapters adapters-present \\ --assemble \"-OassemblingFeatures={CDR1Begin:FR4End} -OseparateByC=true\" \\ M1_4T1_Blood_S2_L001_R1_001_B3.1.fastq.gz \\ M1_4T1_Blood_S2_L001_R1_001_B3.1.fastq.gz \\ M1_4T1_Blood_S2 The meaning of these options is the following. --species is set to mmu for Mus Musculus --starting-material is set to rna and corresponds to VTranscriptWithout5UTRWithP alignment feature for V-gene (see Gene features and anchor points for details) --receptor-type bcr . It affects the choice of alignment algorithms. MiXCR uses a specific set of algorithms for BCR data. --align \"-OvParameters.geneFeatureToAlign={CDR1Begin:VEnd}+{VEnd:VEnd(-20)}\" Here we pass an extra argument for mixcr align step of the pipeline. From the library structure we see, that all V-gene specific primers are located inside FR1 region, thus we crop the alignment region to start from beginning of CDR1 . Thus, we can trust our alignment, knowing that there are no nucleotides that could have come from the primer sequence. Ideologically this equals to primer trimming. --5-end is set to no-v-primers because we have cropped -OvParameters.geneFeatureToAlign in a way that it does not cover the region where primers are located. This leads to a global alignment algorithms to align the left bound of V gene. --3-end-primers is set to c-primers . Here, C primers were used in cDNA synthesis. We did not adjust this with alignment feature for C gene, because these primers are isotype specific, and we do need these sequences for correct isotype determination. If we had shrunk -OcParameters.geneFeatureToAlign , trimming the C-primer region, there would be too few nucleotides left from C gene for correct isotype identification. This choice leads to a global alignment algorithms to align the right bound of J gene and a local alignment algorithm for the left bound of C-gene. --adapers adapters-present because we still have C-primer sequences in our data. --assemble \"-OassemblingFeatures={CDR1Begin:FR4End} -OseparateByC=true\" . Here we pass two extra arguments for mixcr assemble step of the pipeline. First we extend the assembling feature to start from CDR1 . That is because this is BCR data, where hypermutations occur throughout V gene, and we want to capture as much as we can. Second, we use -OseparateByC=true option to separate clones with the same assembling feature sequence but different C genes, which is essential for isotype identification. M1_4T1_Blood_S2_L001_R1_001_B3.1.fastq.gz M1_4T1_Blood_S2_L001_R1_001_B3.1.fastq.gz M1_4T1_Blood_S2 Finally, we provide the names of input files and an output prefix: Now, since we have multiple files ist easier to process them all together instead of running the same command multiple times. One of the ways to achieve it is to use GNU Parallel : > fastq/*R1* | parallel -j2 \\ '~/mixcr-private/mixcr analyze amplicon \\ --species mmu \\ --starting-material rna \\ --receptor-type bcr \\ --5-end no-v-primers \\ --3-end c-primers \\ --adapters adapters-present \\ --align \"-OvParameters.geneFeatureToAlign={CDR1Begin:VEnd}+{VEnd:VEnd(-20)}\" \\ --assemble \"-OassemblingFeatures={CDR1Begin:FR4End} -OseparateByC=true\" \\ {} \\ {=s:R1:R2:=} \\ {=s:.*/:results/:;s:_L001.*::=}'","title":"One command Solution"},{"location":"mixcr/guides/generic-multiplex-bcr/#under-the-hood-of-mixcr-analyze-pipeline","text":"Under the hood, mixcr analyze amplicon command that we use above actually executes the following pipeline of MiXCR actions:","title":"Under the hood of mixcr analyze pipeline"},{"location":"mixcr/guides/generic-multiplex-bcr/#align","text":"Performs : alignment of raw sequencing reads against reference database of V-, D-, J- and C- gene segments pattern matching of tag pattern sequence and extraction of barcodes > mixcr align \\ --species mmu \\ --report result/Multi_TRA_10ng_3.report \\ --json-report result/Multi_TRA_10ng_3.report.json \\ -OvParameters.geneFeatureToAlign ={ CDR1Begin:VEnd } + { VEnd:VEnd ( -20 )} \\ -OvParameters.parameters.floatingLeftBound = false \\ -OjParameters.parameters.floatingRightBound = false \\ -OcParameters.parameters.floatingRightBound = true \\ fastq/M1_4T1_Blood_S2_L001_R1_001_B3.1.fastq.gz \\ fastq/M1_4T1_Blood_S2_L001_R2_001_B3.1.fastq.gz \\ results/M1_4T1_Blood_S2.vdjca Options --report and --json-report are specified here explicitly. Since we start from RNA data we use VTranscriptWithout5UTRWithP for the alignment of V segments (see Gene features and anchor points . -OvParameters.parameters.floatingLeftBound=false -OjParameters.parameters floatingRightBound=false -OcParameters.parameters.floatingRightBound=true These option determine global vs local alignment algorithm on the bounds of gene segments. As have been mentioned above we will use global alignment on the left bound of V gene and right bound of J gene. The alignment on the right bound of C gene will be local due to the presence of primer sequence. This step utilizes all available CPUs and scales perfectly. When there are a lot of CPUs, the only limiting factor is the speed of disk I/O. To limit the number of used CPUs one can pass --threads N option.","title":"align"},{"location":"mixcr/guides/generic-multiplex-bcr/#assemble","text":"Assembles clonotypes and applies several layers of errors correction: assembly consensus CDR3 sequence quality-awared correction for sequencing errors clustering to correct for PCR errors > mixcr assemble \\ --report results/Multi_TRA_10ng_3.report \\ --json-report results/Multi_TRA_10ng_3.report.json \\ -OassemblingFeatures ={ CDR1Begin:FR4End } \\ -OseparateByC = true \\ M1_4T1_Blood_S2.vdjca \\ M1_4T1_Blood_S2.clns Options --report and --json-report are specified here explicitly so that the report files will be appended with assembly report.","title":"assemble"},{"location":"mixcr/guides/generic-multiplex-bcr/#exportclones","text":"Finally, to export clonotype tables in tabular form exportClones is used: > mixcr exportClones \\ -p full \\ M1_4T1_Blood_S2.clns \\ M1_4T1_Blood_S2.tsv Here -p full is a shorthand for the full preset of common export columns.","title":"exportClones"},{"location":"mixcr/guides/generic-multiplex-bcr/#quality-control","text":"Now when the upstream analysis is finished we can move on to quality control. First lets look at the alignment report plot. # obtain alignment quality control > mixcr exportQc align \\ result/*.vdjca \\ alignQc.pdf We see that all samples have a very high score of successfully aligned reads. No signficat issues present. Next, lets examine chane usage distribution We don't see any contamination from other Ig chains. As expected, all samples consist only of IGH chains.","title":"Quality control"},{"location":"mixcr/guides/generic-multiplex-bcr/#downstream-analysis","text":"There are two types of basic downstream analysis: individual and overlap . Individual computes CDR3 metrics, diversity and gene usage metrics for each dataset. Overlap computes statistical metrics of repertoire overlap. In both cases MiXCR applies appropriate sample normalization. To run postanalysis routines we need to prepare a metadata file in a .tsv or .csv form. Metadata must contain a sample column which will be used to match metadata with cloneset files. Bellow you can find a metadata table for our samples. Metadata sample mice_id condition tissue replica M1_4T1_Blood_S2 M1 4T1 Blood 1 M1_4T1_Blood_S6 M1 4T1 Blood 2 M1_4T1_BM_S4 M1 4T1 BM 1 M1_4T1_BM_S8 M1 4T1 BM 2 M1_4T1_DLN_S3 M1 4T1 DLN 1 M1_4T1_DLN_S7 M1 4T1 DLN 2 M1_4T1_Tumor_S5 M1 4T1 Tumor 1 M1_4T1_Tumor_S1 M1 4T1 Tumor 2 M2_4T1_Blood_S2 M2 4T1 Blood 1 M2_4T1_Blood_S6 M2 4T1 Blood 2 M2_4T1_BM_S4 M2 4T1 BM 1 M2_4T1_BM_S8 M2 4T1 BM 2 M2_4T1_DLN_S3 M2 4T1 DLN 1 M2_4T1_DLN_S7 M2 4T1 DLN 2 M2_4T1_Tumor_S1 M2 4T1 Tumor 1 M2_4T1_Tumor_S5 M2 4T1 Tumor 2 M3_4T1_Blood_S10 M3 4T1 Blood 1 M3_4T1_Blood_S9 M3 4T1 Blood 2 M3_4T1_BM_S7 M3 4T1 BM 1 M3_4T1_BM_S8 M3 4T1 BM 2 M3_4T1_DLN_S11 M3 4T1 DLN 1 M3_4T1_DLN_S12 M3 4T1 DLN 2 M3_4T1_Tumor_S13 M3 4T1 Tumor 1 M3_4T1_Tumor_S14 M3 4T1 Tumor 2 M4_4T1_Blood_S2 M4 4T1 Blood 1 M4_4T1_Blood_S7 M4 4T1 Blood 2 M4_4T1_BM_S10 M4 4T1 BM 1 M4_4T1_BM_S5 M4 4T1 BM 2 M4_4T1_DLN_S4 M4 4T1 DLN 1 M4_4T1_DLN_S9 M4 4T1 DLN 2 M4_4T1_Tumor_S1 M4 4T1 Tumor 1 M4_4T1_Tumor_S6 M4 4T1 Tumor 2 N1_control_Blood_S5 N1 control Blood 1 N1_control_Blood_S6 N1 control Blood 2 N1_control_BM_S1 N1 control BM 1 N1_control_BM_S2 N1 control BM 2 N1_control_LN_S3 N1 control LN 1 N1_control_LN_S4 N1 control LN 2 N2_control_Blood_S5 N2 control Blood 1 N2_control_Blood_S6 N2 control Blood 2 N2_control_BM_S1 N2 control BM 1 N2_control_BM_S2 N2 control BM 2 N2_control_LN_S3 N2 control LN 1 N2_control_LN_S4 N2 control LN 2","title":"Downstream analysis"},{"location":"mixcr/guides/generic-multiplex-bcr/#individual-postanalysis","text":"To compute a set of individual metrics we run the following command: > mixcr postanalysis individual \\ --metadata metadata.tsv \\ --default-downsampling count-reads-auto \\ --default-weight-function read \\ --only-productive \\ --chains IGH \\ --tables postanalysis/pa.i.tsv \\ --preproc-tables postanalysis/preproc.i.tsv \\ results/*.clns \\ postanalysis/individual.json.gz The meaning of specified options is the following: --metadata specified metadata file to use --default-downsampling downsampling applied to normalize the clonesets. Without appropriate normalization it is not possible to make a statistical comparisons between datasets. In the considered case we normalize data to the same number of reads, and this number is computed automatically based on the number of unique reads in each clone in each dataset. See reference for all downsampling options. Default downsampling may be overridden for individual metrics. --default-weight-function defines weight of each clonotype. Set read beacause there are no barcodes in the data. --only-productive drop clonotypes with out-of-frame CDR3 sequences or containing stop codons --tables path for postanalysis metrics in a tabular form --preproc-tables path for tabular summary of the applied downsampling and other samples preprocessing (for example filtering productive clonotypes) --chains Since only IGH chain is present in the samples we can specify it directly. After execution, we will have the following files: > ls postanalysis/ # gzipped JSON with all results individual.json.gz # summary of applied preprocessors preproc.i.IGH.tsv # diversity tables pa.i.diversity.IGH.tsv # CDR3 metrics tables & CDR3 properties pa.i.cdr3metrics.IGH.tsv # V- / J- / VJ- usage tables pa.i.vUsage.IGH.tsv pa.i.JUsage.IGH.tsv pa.i.VJUsage.IGH.tsv # Isotype usage table pa.i.IsotypeUsage.IGH.tsv #V Spectratype tables pa.i.VSpectratype.IGH.tsv pa.i.VSpectratypeMean.IGH.tsv Preprocessing summary tables (e.g. preproc.i.IGH.tsv ) contain detailed information on how downsampling was applied for each metric: characteristic sample preprocessor nElementsBefore sumWeightBefore nElementsAfter sumWeightAfter preprocessor#1 nElementsBefore#1 sumWeightBefore#1 nElementsAfter#1 sumWeightAfter#1 preprocessor#2 nElementsBefore#2 sumWeightBefore#2 nElementsAfter#2 sumWeightAfter#2 preprocessor#3 nElementsBefore#3 sumWeightBefore#3 nElementsAfter#3 sumWeightAfter#3 IsotypeUsage M2_4T1_BM_S8.clns FilterIGHchains|FilterstopsinCDR3,OOFinCDR3|Downsampleautomatic 72121 1120769.0 30741 125550.0 FilterIGHchains 72121 1120769.0 72121 1120769.0 FilterstopsinCDR3,OOFinCDR3 72121 1120769.0 64734 1024106.0 Downsampleautomatic 64734 1024106.0 30741 125550 IsotypeUsage M2_4T1_DLN_S7.clns FilterIGHchains|FilterstopsinCDR3,OOFinCDR3|Downsampleautomatic 95523 648857.0 45810 125550.0 FilterIGHchains 95523 648857.0 95523 648857.0 FilterstopsinCDR3,OOFinCDR3 95523 648857.0 86623 601517.0 Downsampleautomatic 86623 601517.0 45810 125550 IsotypeUsage N1_control_BM_S1.clns FilterIGHchains|FilterstopsinCDR3,OOFinCDR3|Downsampleautomatic 92761 1111263.0 33352 125550.0 FilterIGHchains 92761 1111263.0 92761 1111263.0 FilterstopsinCDR3,OOFinCDR3 92761 1111263.0 83364 1019615.0 Downsampleautomatic 83364 1019615.0 33352 125550 IsotypeUsage M1_4T1_Tumor_S1.clns FilterIGHchains|FilterstopsinCDR3,OOFinCDR3|Downsampleautomatic 1910 1542543.0 653 125550.0 FilterIGHchains 1910 1542543.0 1910 1542543.0 FilterstopsinCDR3,OOFinCDR3 1910 1542543.0 1771 1320389.0 Downsampleautomatic 1771 1320389.0 653 125550 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... Columns explained: characteristic metrics name (ex. IsotypeUsage ) sample name of the .clns file (ex. M2_4T1_BM_S8.clns ) preprocessor the name of the overall preprocessors chain applied to the dataset. FilterIGHchains|FilterstopsinCDR3,OOFinCDR3|Downsampleautomatic means the data has been subjected to three consecutive preprocessors: Only IGH chains were filtered Non-functional clonotypes containing stop-codons and OOF clones were filltered out and only functional were left Automatic Downsampling function has been applied to normalize sample sizes nElementsBefore number of clonotypes before any preprocessing applied (that is in the initial dataset) (ex. 72121 clones) sumWeightBefore total weight of all clonotypes before any preprocessing applied. The weight may be either number of reads, UMIs or cells, depending on the selected downsampling. In this case it represents the total number of reads that contribute to clonotypes (ex. 1120769 reads) nElementsAfter number of clonotypes in the dataset after all preprocessors have been applied (ex. 30741 clones) sumWeightBefore total weight of all clonotypes after all preprocessors have been applied (ex. 125550 ). Note that all samples will have the same value for sumWeightBefore in this case, because downsampling was applied, thus all samples have been normalized to the same weight. preprocessor#i i-th part of the preprocessing chain (ex. preprocessor#1 : Filter IGH chains ) nElementsBefore#i number of clonotypes before i-th preprocessor has been applied (ex. nElementsBefore#1 : 72121 ) sumWeightBefore#i total weight of all clonotypes before i-th preprocessor has been applied (ex. sumWeightBefore#1 : 1120769 ) nElementsAfter#i number of clonotypes after i-th preprocessor has been applied (ex. nElementsAfter#1 : 30741 ) sumWeightAfter#i total weight of all clonotypes after i-th preprocessor has been applied (ex. sumWeightAfter#1 : 125550 ) . . . Various postanalysis tables contain information about each metric computed for each sample. For example, let's have a look inside pa.i.JUsage.IGH.tsv . This table contains frequencies for each J segment present in the sample : sample IGHJ3*00 IGHJ2*00 IGHJ1*00 IGHJ4*00 M1_4T1_Blood_S2.clns 0.24678614097968937 0.356726403823178 0.12035045798486659 0.27613699721226603 M1_4T1_Blood_S6.clns 0.2431620868180008 0.37610513739546 0.1291358024691358 0.25159697331740344 M1_4T1_BM_S4.clns 0.24498606133014736 0.2887216248506571 0.13416168857029073 0.3321306252489048 M1_4T1_BM_S8.clns 0.24844285145360415 0.2861091198725607 0.13389088012743927 0.33155714854639584 M1_4T1_DLN_S3.clns 0.24744723217841497 0.2569573874950219 0.06846674631620868 0.42712863401035445 ... ... ... ... ...","title":"Individual postanalysis"},{"location":"mixcr/guides/generic-multiplex-bcr/#graphical-output","text":"MiXCR allows to export graphical results in PDF, EPS, PNG and SVG formats using exportPlots command. For diversity metrics and CDR3 properties MiXCR allows to group data in different ways according to the submitted metadata.tsv and apply various statistical tests for group comparison.","title":"Graphical output"},{"location":"mixcr/guides/generic-multiplex-bcr/#diversity","text":"Let's reconstruct one of the figures from the paper. Let's say we want to look at the Normalized ShannonWiener diversity index. We will group samples by tissues and use separate facets for contol and experiment group. That can be easily done with a single command: > mixcr exportPlots diversity \\ --metadata metadata.tsv \\ --plot-type boxplot \\ --metric normalizedShannonWienerIndex \\ --primary-group tissue \\ --facet-by condition \\ --primary-group-values Tumor,LN,DLN,Blood,BM \\ postanalysis/individual.json.gz \\ normalizedShannonWienerIndex.pdf Arguments explained: --metadata metadata.tsv is the name of metadata file. --plot-type boxplot is the type of plot to generate. See mixcr exportPlots for other options. --metric : normalizedShannonWienerIndex is the name of the metric to visualize. See diversity metrics for other options. If not specified multiple plots will be generated for each available diversity metric. --primary-group tissue is name of the column with metadata values from metadata.tsv to group samples by. --primary-group-values Tumor,LN,DLN,Blood,BM represents the order of --primary-group values on the plot ( tissue in this case) --facet-by condition is name of the column with metadata values from metadata.tsv to group samples and represent on separate facets for each group. postanalysis/individual.json.gz the name of gzipped JSON file with all postanalysis results generated by `mixcr postanalysis individual normalizedShannonWienerIndex.pdf the name of output file. Also specifies the extension of the output file. One can use one of the following graphical out formats: .pdf , .eps , .png and .svg .","title":"Diversity"},{"location":"mixcr/guides/generic-multiplex-bcr/#v-usage","text":"Now lets look at the J gene distribution among all samples. > mixcr exportPlots jUsage \\ --metadata metadata.tsv \\ --chains IGH \\ --palette sequential \\ --color-key tissue \\ postanalysis/individual.json.gz \\ jUsage.pdf --palette sequential . Determines color palette to be used for the heatmap. See gene segment usage plots for other options. --color-key tissue . Metadata column name.","title":"V usage"},{"location":"mixcr/guides/generic-multiplex-bcr/#overlap-postanalysis","text":"","title":"Overlap postanalysis"},{"location":"mixcr/guides/generic-multiplex-bcr/#two-samples-overlap","text":"Since our samples were prepared in replicas, it is often usefully to check if clone frequencies correlate between replicas. Let's take two replicas of one biological sample and overlap two repertoires. We will use mixcr overlapScatterPlot function : > mixcr overlapScatterPlot \\ --downsampling none \\ --chains IGH \\ results/M1_4T1_Blood_S2.clns results/M1_4T1_Blood_S6.clns \\ M1_4T1_Blood.overlap.pdf","title":"Two samples overlap"},{"location":"mixcr/guides/generic-multiplex-bcr/#all-vs-all-overlap","text":"MiXCR also allows performing an overall overlap analysis using mixcr postanalysis overlap . But here, since there are a lot of samples we want to actually overlap groups of samples. Running the following command will perform pairwise overlap comparison between groups of samples with different tissue and condition values. > mixcr postanalysis overlap -f \\ --factor-by tissue,condition \\ --metadata metadata.tsv \\ --default-downsampling count-reads-auto \\ --default-weight-function read \\ --only-productive \\ --tables postanalysis/postanalysis.overlap.tsv \\ --preproc-tables postanalysis/preproc.overlap.tsv \\ results/*.clns \\ postanalysisls /overlap.tissue_condition.json.gz --factor-by tissue,condition defines the set of metadata columns for which a list of unique intersections will be created and used for group comparison Other arguments are same as for individual postanalysis mentioned above. This command will generate a set of files: #Tsv files for every metric postanalysis.overlap.F1Index.IGH.tsv postanalysis.overlap.F2Index.IGH.tsv postanalysis.overlap.JaccardIndex.IGH.tsv postanalysis.overlap.PearsonAll.IGH.tsv postanalysis.overlap.Pearson.IGH.tsv postanalysis.overlap.RelativeDiversity.IGH.tsv postanalysis.overlap.SharedClonotypes.IGH.tsv # summary of applied preprocessors preproc.overlap.IGH.tsv # gzipped JSON with all results overlap.tissue_condition.json.gz The tabular output for example for F2 metric will look like: LN,control BM,4T1 BM,control DLN,4T1 Blood,4T1 Blood,control Tumor,4T1 LN,control 1.0 0.013774364765374518 0.04650437588957222 0.014099278585204775 0.031036354127937787 0.027203139358090662 0.010163687504766344 BM,4T1 0.013774364765374518 1.0 0.05529474567524548 0.04405383350942532 0.10645680248929848 0.07417602888238424 0.09466939004888049 BM,control 0.04650437588957222 0.05529474567524548 1.0 0.03286381709464843 0.233349361966603 0.11870207376989239 0.06314011150401469 DLN,4T1 0.014099278585204775 0.04405383350942532 0.03286381709464843 1.0 0.1768279650269904 0.0188038306990065 0.10982393111366022 Blood,4T1 0.031036354127937787 0.10645680248929848 0.233349361966603 0.1768279650269904 1.0 0.0634481121480744 0.13415831269714423 Blood,control 0.027203139358090662 0.07417602888238424 0.11870207376989239 0.0188038306990065 0.0634481121480744 1.0 0.03867881035646659 Tumor,4T1 0.010163687504766344 0.09466939004888049 0.06314011150401469 0.10982393111366022 0.13415831269714423 0.03867881035646659 1.0 Every overlap metric is also possible to present in a graphical format: > mixcr exportPlots overlap \\ --chains IGH \\ --palette density \\ --metric f2Index \\ postanalysis/overlap.tissue_condition.json.gz \\ overlap.time_marker.pdf For list of available metrics see mixcr exportPlots overlap For further details see overlap postanalysis reference .","title":"All-vs-All overlap"},{"location":"mixcr/guides/generic-umi-tcr/","text":"Analysis of TCR amplicon libraries with UMIs Data libraries This tutorial uses the data from the publication: Simon S, Voillet V, Vignard V, et al, PD-1 and TIGIT coexpression identifies a circulating CD8 T cell subset predictive of response to anti-PD-1 therapy , Journal for ImmunoTherapy of Cancer 2020;8:e001631. doi: 10.1136/jitc-2020-001631 The data was collected from 12 patients. PBMC samples were obtained at three time points for each patient. The libraries were generated using Human TCR Panel QIAseq Immune Repertoire RNA Library Kit (QIAGEN\u2122) . Sequencing was performed using Illumina NextSeq\u2122 sequencing machine. Each samples contain sequences of TCR\u03b1 and TCR\u03b2 chains enriched cDNA libraries of human. 261bp Read 1 holds CDR3 region and 41bp Read 2 with UMI (first 12bp): All data may be downloaded directly from SRA using e.g. SRA Explorer : > curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR105/059/SRR10545759/SRR10545759_1.fastq.gz -o SRR10545759_GSM4195469_TCR-seq_P15-M2-TIGIT_Homo_sapiens_OTHER_1.fastq.gz > curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR105/059/SRR10545759/SRR10545759_2.fastq.gz -o SRR10545759_GSM4195469_TCR-seq_P15-M2-TIGIT_Homo_sapiens_OTHER_2.fastq.gz ... The project contains 544 paired fastq files, separated in multiple lanes and biosample ids: > ls fastq/ SRR10545725_GSM4195461_TCR-seq_P15-T0-TIGIT_Homo_sapiens_OTHER_1.fastq.gz SRR10545725_GSM4195461_TCR-seq_P15-T0-TIGIT_Homo_sapiens_OTHER_2.fastq.gz SRR10545726_GSM4195461_TCR-seq_P15-T0-TIGIT_Homo_sapiens_OTHER_1.fastq.gz SRR10545726_GSM4195461_TCR-seq_P15-T0-TIGIT_Homo_sapiens_OTHER_2.fastq.gz SRR10545727_GSM4195461_TCR-seq_P15-T0-TIGIT_Homo_sapiens_OTHER_1.fastq.gz SRR10545727_GSM4195461_TCR-seq_P15-T0-TIGIT_Homo_sapiens_OTHER_2.fastq.gz SRR10545728_GSM4195461_TCR-seq_P15-T0-TIGIT_Homo_sapiens_OTHER_1.fastq.gz SRR10545728_GSM4195461_TCR-seq_P15-T0-TIGIT_Homo_sapiens_OTHER_2.fastq.gz ... Each file name encodes the information about lane, biosample id, metadata, R1 or R2. For example for the first file from above listing: SRR10545497 - lane GSM4195404 - biosample id P5 - patient id T0 - time point DPOS - double positive OTHER_1 - first mate of paired-end data. Upstream analysis The most straightforward way to get clonotype tables is to use a universal mixcr analyze command. According to the library preparation protocol, the library has V primers on 5'-end and C primers on 3', so the command for a single sample is the following: > mixcr analyze amplicon \\ --species hsa \\ --starting-material rna \\ --receptor-type tcr \\ --5-end no-v-primers \\ --3-end c-primers \\ --adapters adapters-present \\ --umi-pattern '^(R1:*)\\^(UMI:N{12})' \\ fastq/SRR {{ n }} _GSM4195461_TCR-seq_P15-T0-TIGIT_Homo_sapiens_OTHER_1.fastq.gz \\ fastq/SRR {{ n }} _GSM4195461_TCR-seq_P15-T0-TIGIT_Homo_sapiens_OTHER_2.fastq.gz \\ results/P15-T0-TIGIT The meaning of these options is the following. --species is set to hsa for Homo Sapience --starting-material RNA or DNA. It affects the choice of V gene region which will be used as target in align step ( vParameters.geneFeatureToAlign , see align documentation ): rna corresponds to the VTranscriptWithout5UTRWithP and dna to VGeneWithP (see Gene features and anchor points for details) --receptor-type TCR or BCR. It affects the choice of underlying alignment algorithms: MiXCR uses fundamentally different algorithms for TCRs and BCRs because BCRs have somatic hypermutations and long indels. --5-end may be no-v-primers or v-primers . For this library structure we use no-v-primers while e.g. Depending on the presence of primers or adapters at 5'-end MiXCR uses either global or local alignment algorithm to align the left bound of V. --3-end-primers may be j-primers , j-c-intron-primers or c-primers . Here we use c-primers since the primer used for library preparation is complimentary to C-region of TCR genes. Depending on the presence of primers or adapters at 3'-end MiXCR uses either global or local alignment algorithms to align the right bound of J and C gene segments. --adapers may be adapters-present or no-adapters . We use adapters-present because primer sequence is present in the data and has not been cut prior to. Presence or absence of adapter sequences results in the choice between local and global alignment algorithms on the edges of the target sequence. --umi-pattern is used to specify UMI pattern for the library. MiXCR provides a powerful regex-like language allowing to specify almost arbitrary barcode structure. Here we use ^(R1:*)\\^(UMI:N{12}) pattern to specify that R1 should be used as is, UMI spans the first 12 letters of R2 and the rest of R2 is ignored. Finally we specify paths for both input files and a path to output folder with prefix describing the sample. Note that {{n}} syntax is similar to Linux wildcard behaviour: it will concatenate all fastq files matching this pattern into one sample. This is very useful when you have for example multiple lanes. Running the command above will generate the following files: > ls result/ # human-readable reports P15-T0-TIGIT.report # raw alignments (highly compressed binary file) P15-T0-TIGIT.vdjca # alignments with corrected UMI barcode sequences P15-T0-TIGIT.corrected.vdjca # TCR\u03b1 & TCR\u03b2 CDR3 clonotypes (highly compressed binary file) P15-T0-TIGIT.clns # TCR\u03b1 & TCR\u03b2 CDR3 clonotypes exported in tab-delimited txt P15-T0-TIGIT.clonotypes.TRA.tsv P15-T0-TIGIT.clonotypes.TRB.tsv Clonotype tables is the main result of the upstream analysis. They are stored in a highly compressed and efficient binary .clns file and can be exported in many ways: detailed tab-delimited format with dozens of customizable columns, human readable for manual inspection, and AIRR format suitable for many scientific downstream analysis tools. By default, MiXCR exports clonotypes in a tab-delimited format separately for each immunological chain. In order to run the analysis for all samples in the project on Linux we can for example use GNU Parallel in the following way: > ls /fastq/*_1* | \\ sed 's:SRR[0-9]*_:SRR\\{\\{n\\}\\}_:g' | \\ uniq | \\ parallel -j2 \\ 'mixcr analyze amplicon \\ --species hsa \\ --starting-material rna \\ --receptor-type tcr \\ --5-end v-primers \\ --3-end c-primers \\ --adapters adapters-present \\ --tag-pattern ' ^ ( R1:* ) \\^ ( UMI:N { 12 }) ' \\ {} \\ {=s:OTHER_1:OTHER_2:=} \\ results/{=s:.*TCR-seq_:PRJNA592172/:; s:_Homo.*::=}' Briefly, we list all R1 files in the fastq directory, replace lane specifications with MiXCR {{n}} wildcard, pipe the list to parallel, then run mixcr analyze for each pair, again using sed to obtain R2 filename from R1 and the name of output. Details and fine-tuning Under the hood, mixcr analyze amplicon executes the following pipeline of MiXCR actions: Each step in this pipeline is executed with a specific options inherited from the options supplied to mixcr analyze amplicon . Instead of running analyze one can run the whole pipeline step by step and additionally fine tune the analysis parameters at each step. Another reason why sometimes it is better to execute the pipeline step by step is the ability to better manage hardware resources allocated to each step, because some steps are memory intensive and less CPU intensive, while others are vice a versa. Let's go throw each step executed in the considered case. align Performs : alignment of raw sequencing reads against reference database of V-, D-, J- and C- gene segments pattern matching of tag pattern sequence and extraction of barcodes > mixcr align \\ --species hsa \\ --tag-pattern '^(R1:*)\\^(UMI:N{12})' \\ --report result/P15-T0-TIGIT.report \\ --json-report result/P15-T0-TIGIT.report.json \\ -OvParameters.geneFeatureToAlign = \"VTranscriptWithout5UTRWithP\" \\ -OvParameters.parameters.floatingLeftBound = false \\ -OjParameters.parameters.floatingRightBound = false \\ -OcParameters.parameters.floatingRightBound = true \\ fastq/SRR {{ n }} _GSM4195461_TCR-seq_P15-T0-TIGIT_Homo_sapiens_OTHER_1.fastq.gz \\ fastq/SRR {{ n }} _GSM4195461_TCR-seq_P15-T0-TIGIT_Homo_sapiens_OTHER_2.fastq.gz \\ results/P15-T0-TIGIT.vdjca Options --report and --json-report are specified here explicitly. Since we start from RNA data we use VTranscriptWithout5UTRWithP for the alignment of V segments (see Gene features and anchor points . Because we have primers on V segment, we use local alignment on the left bound of V and since we have primers on C segment, we use global alignment for J and local on the right bound of C. This step utilizes all available CPUs and scales perfectly. When there are a lot of CPUs, the only limiting factor is the speed of disk I/O. To limit the number of used CPUs one can pass --threads N option. correctAndSortTags Corrects sequencing and PCR errors inside barcode sequences. This step does extremely important job by correcting artificial diversity caused by errors in barcodes. In the considered example project it corrects only sequences of UMIs. > mixcr correctAndSortTags \\ --report results/P15-T0-TIGIT.report \\ --json-report results/P15-T0-TIGIT.report.json \\ P15-T0-TIGIT.vdjca \\ P15-T0-TIGIT.corrected.vdjca Options --report and --json-report are specified here explicitly so that the report files will be appended with the barcode correction report. assemble Assembles clonotypes and applies several layers of errors correction. In the current example project we consider TCR\u03b1 & TCR\u03b2 separately and clonotype by its CDR3 sequence. The layers of correction applied in this example are: assembly consensus CDR3 sequence for each UMI quality-awared correction for sequencing errors clustering to correct for PCR errors, which still may present even in the case of UMI data, since a error may be introduced e.g. on the first reverse-transcription cycle > mixcr assemble \\ --report results/P15-T0-TIGIT.report \\ --json-report results/P15-T0-TIGIT.report.json \\ P15-T0-TIGIT.corrected.vdjca \\ P15-T0-TIGIT.clns Options --report and --json-report are specified here explicitly so that the report files will be appended with assembly report. Assembly step may be quite memory consuming for very big datasets. MiXCR offloads memory intensive computations to disk and does it in a highly efficient and parallelized way, fully utilizing all hardware facilities. For such big samples it may be worth to control the amount of RAM provided to MiXCR using -Xmx JVM option (the more RAM supplied the faster execution): > mixcr -Xmx16g assemble ... exportClones Finally, to export clonotype tables in tabular form exportClones is used: > mixcr exportClones \\ -p full \\ -uniqueTagCount UMI \\ P15-T0-TIGIT.clns \\ P15-T0-TIGIT.tsv Here -p full is a shorthand for the full preset of common export columns and -uniqueTagCount UMI adds a column with the UMI count for each clone. Quality controls MiXCR generates comprehensive reports for each step of the pipeline, containing exhaustive information about quality of the library and performance of the algorithms. These reports are a primary source of the feedback to the wet lab, and also may be used to tune the parameters of the pipeline. The very basic overview of the library performance may be generated in a graphical form using mixcr exportQc align command: > mixcr exportQc align results/*.clns alignQc.pdf This plot shows the fraction of raw reads that were successfully aligned against reference V/D/J/C-gene segment library. Rate of successful alignments is expected to be higher than 90% for a high quality targeted TCR library. So in the considered example something went not as expected. In most cases when we observe low alignment rate for amplicon library, the reason lies either in a wrong understanding of the library architecture or some sample preparation artefacts. From the plot we see two primary reasons for failed alignments: Alignment failed, no any hits (not TCR/IG) - read was not covered by any part of V/D/J/C-gene segments, which is probably due to a contamination in the lab Alignments failed because of absence of J hits - read was covered by V segment, but not by J To dig deeper one can re-align one problematic sample with the options to preserve partial alignments and save not-aligned reads: > mixcr align \\ --species hsa \\ --tag-pattern '^(R1:*)\\^(UMI:N{12})' \\ -OvParameters.geneFeatureToAlign = \"VTranscriptWithout5UTRWithP\" \\ -OvParameters.parameters.floatingLeftBound = true \\ -OjParameters.parameters.floatingRightBound = false \\ -OcParameters.parameters.floatingRightBound = true \\ -OallowNoCDR3PartAlignments = true \\ -OallowPartialAlignments = true \\ --not-aligned-R1 na.fastq \\ SRR {{ n }} _GSM4195532_TCR-seq_P23-T0-DPOS_Homo_sapiens_OTHER_1.fastq.gz \\ SRR {{ n }} _GSM4195532_TCR-seq_P23-T0-DPOS_Homo_sapiens_OTHER_2.fastq.gz \\ P23-T0-DPOS_debug.vdjca Additional options are: -OallowNoCDR3PartAlignments preserve alignments that do not fully cover CDR3 region in the output -OallowPartialAlignments preserve alignments that lack either V or J hit in the output --not-aligned-R1 save all not aligned reads to na.fastq Now one can check how reads cover V-D-J region using exportQc coverage command: > mixcr exportQc coverage \\ P23-T0-DPOS_debug.vdjca \\ P23-T0-DPOS_debug.coverage.pdf From this plot it is seen that there are nearly 50% of not-spliced reads in the data, which is a clear signal of some library preparation artefacts. To dig even deeper one can also export raw alignments in a human-readable way for further manual inspection: > mixcr exportAlignmentsPretty P23-T0-DPOS_debug.vdjca Some examples from the output illustrating wet lab artefacts: >>> Read ids: 1 Quality 22222224225262622222222727222 Target0 0 CATAAAATCATCGTGTCAGAGAAGGGAAA 28 Score TRBV7-2*00 94 cagagaagggaaa 106 65 TRBV7-3*00 94 cagagaagggaaa 106 65 _ T P H P P P H P A A P D P P P P T P P L H P P P P P Quality 26222554266244522552226622622255252424222424522222224572655225265422265622726222 Target1 0 CACACCCCACCCCCCCCCCCACCCCGCCGCCCCCGACCCCCCTCCCCCGACCCCCCCCCTCCACCCCCCCCCCCCCCCCC 79 Score <J CD P H P P P P P P H A P P P P P P P P P R A G R H T Q Y Quality 56264672227222227277727225222242256272762722222226222262222222222222222767777752 Target1 80 CCCACCCCCCCCCCCCCCCCCCCCACGCGCCCCCCCCCCCCCCCCCCCCCCCCCCCCGCGCCGGCCGCCACACCCAGTAC 159 Score TRBJ2-5*00 28 acccagtac 36 186 R3><FR4 FR4><C F G P G T R L L V L E D L K N V F P P E V A V F E P S Quality 77462776776777222727275627625777775676777777767777772727666777767577676777777777 Target1 160 TTCGGGCCAGGCACGCGGCTACTGGTGCTCGAGGACCTGAAAAACGTGTTCCCACCCGAGGTCGCTGTGTTTGAGCCATC 239 Score TRBJ2-5*00 37 ttcgggccaggcacgcggctCctggtgctcg 67 186 TRBC2*00 0 aggacctgaaaaacgtgttcccacccgaggtcgctgtgtttgagccatc 48 330 TRBC1*00 0 aggacctgaaCaaGgtgttcccacccgaggtcgctgtgtttgagccatc 48 302 >>> Read ids: 17 Quality 22222222222777777727776774777 Target0 0 ACTAGAGGTGGTCTTAATAACATCAGGGA 28 Score _ E S I I R Q L Y S L L I T S G K S L K F I L E N L I Quality 24624425222562545262542222265255252255252252467657526665566526226544775226266625 Target1 0 TGAGAGCATAATTAGACAATTGTATTCCTTATTAATAACATCAGGGAAAAGCCTTAAATTTATACTGGAAAATCTAATTG 79 Score TRGV8*00 274 cagggaaGagccttaaatttatactggaaaatctaattg 312 356 FR3><CDR3 V> <J CDR3><FR4 E R D S G V Y Y C A T W I Q G _ T G W F K I F A E G T K Quality 66446666665444255226265657272527756756665255757525576277277777766767777777677777 Target1 80 AACGTGACTCTGGGGTCTATTACTGTGCCACCTGGATTCAGGGGCACTGGTTGGTTCAAGATATTTGCTGAAGGGACTAA 159 Score TRGV8*00 313 aacgtgactctggggtctattactgtgccacctgg 347 356 TRGJP1*00 24 cactggttggttcaagatatttgctgaagggactaa 59 280 FR4><C L I V T S P D K Q L D A D V S P K P T I F L P S I A Quality 77777777777577776777777777777776767777776677777677777777777777777777767777777777 Target1 160 GCTCATAGTAACTTCACCTGATAAACAACTTGATGCAGATGTTTCCCCCAAGCCCACTATTTTTCTTCCTTCAATTGCTG 239 Score TRGJP1*00 60 gctcatagtaacttcacctg 79 280 TRGC1*00 0 ataaacaacttgatgcagatgtttcccccaagcccactatttttcttccttcaattgctg 59 391 TRGC2*00 0 ataaacaacttgatgcagatgtttcccccaagcccactatttttcttccttcaattgctg 59 377 Finally, one can use na.fastq to blast not aligned sequences and precisely determine the source of not aligned reads: contamination, artefacts in the library preparation etc. Another useful report is a chain usage report: > mixcr exportQc chainUsage results/*.clns chainUsage.pdf Here we see a small fraction of TRG sequences, which are not supposed to be present in the library, thus the initial cell selection probably was not ideal. Individual reports generated at each step of MiXCR pipeline can be exported either in JSON or text form using exportReports command: > mixcr exportReports \\ --json \\ results/P15-T0-TIGIT.clns \\ results/P15-T0-TIGIT.report.json Detailed description of each report can be found in [TODO]. Downstream analysis There are two types of basic downstream analysis: individual and overlap . Individual computes CDR3 metrics, diversity and gene usage metrics for each dataset. Overlap computes statistical metrics of repertoire overlap. In both cases MiXCR applies appropriate sample normalization. To run postanalysis routines we need to prepare a metadata file in a .tsv or .csv form. Table must contain sample column which will be used to match metadata with cloneset files. For our project metadata table looks like: Sample Patient Time Marker P14-M1-DNEG P14 M1 DNEG P14-M1-DPOS P14 M1 DPOS P14-M2-TIGIT P14 M2 TIGIT ... ... ... ... Individual metrics To compute individual metrics of datasets we run > mixcr postanalysis individual \\ --metadata metadata.tsv \\ --default-downsampling count-umi-auto \\ --default-weight-function umi \\ --only-productive \\ --tables pa/pa.i.tsv \\ --preproc-tables pa/preproc.i.tsv \\ results/*.clns \\ pa/i.json.gz The meaning of specified options is the following: --metadata specified metadata file to use --default-downsampling downsampling applied to normalize the clonesets. Without appropriate normalization it is not possible to make a statistical comparisons between datasets. In the considered case we normalize data to the same number of UMIs, and this number is computed automatically based on the number of unique UMIs in each clone in each dataset. For all downsampling options see [TODO]. Default downsampling may be overridden for individual metrics. --default-weight-function defines weight of each clonotype. May be read , umi or cell --only-productive drop clonotypes with out-of-frame CDR3 sequences or containing stop codons --tables path for postanalysis metrics in a tabular form --preproc-tables path for tabular summary of the applied downsampling and other samples preprocessing (for example filtering productive clonotypes) After execution, we will have the following files: > ls pa/ # gzipped JSON with all results i.json.gz # summary of applied downsampling i.pa.preproc.TRAD.tsv i.pa.preproc.TRB.tsv # diversity tables i.pa.diversity.TRAD.tsv i.pa.diversity.TRB.tsv # CDR3 metrics tables & CDR3 properties i.pa.cdr3metrics.TRAD.tsv i.pa.cdr3metrics.TRB.tsv # V-gene usage i.pa.vUsage.TRAD.tsv i.pa.vUsage.TRB.tsv ... MiXCR runs postanalysis for each chain individually, so we have result per each chain in the output. One can specify --chains option to select specific chains for the analysis. Also in case if you have separate .fastq files for separate chains, it is possible to specify chains metadata column. Preprocessing summary tables (e.g. i.pa.preproc.TRAD.tsv ) contain detailed information on how downsampling was applied for each metric: characteristic sample preprocessor nElementsBefore sumWeightBefore nElementsAfter sumWeightAfter preprocessor#1 nElementsBefore#1 sumWeightBefore#1 nElementsAfter#1 sumWeightAfter#1 preprocessor#2 nElementsBefore#2 sumWeightBefore#2 nElementsAfter#2 sumWeightAfter#2 preprocessor#3 nElementsBefore#3 sumWeightBefore#3 nElementsAfter#3 sumWeightAfter#3 Diversity ShannonWiener,Chao1... P21-M1-PD1.clns Filter TRA... 309 2141.0 110 796.0 Filter TRA,TRD chains 309 2141.0 162 1186.0 Filter stops in CDR3, OOF in CDR3 162 1186.0 139 1143.0 Downsample by umi automatic 139 1143.0 110 796.0 Diversity ShannonWiener,Chao1... P14-T0-TIGIT.clns Filter TRA... 863 8478.0 189 796.0 Filter TRA,TRD chains 863 8478.0 412 3688.0 Filter stops in CDR3, OOF in CDR3 412 3688.0 311 3071.0 Downsample by umi automatic 311 3071.0 189 796.0 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... The meaning of the columns is the following: characteristic name for a set of metrics preprocessor the name of the overall preprocessor chain applied to the dataset nElementsBefore number of clonotypes before any preprocessing applied (that is in the initial dataset) sumWeightBefore total weight of all clonotypes before any preprocessing applied. The weight may be either number of reads or UMIs or cells, depending on the selected downsampling. nElementsAfter number of clonotypes in the dataset after all preprocessing applied sumWeightBefore total weight of all clonotypes after all preprocessing applied. preprocessor#i i-th part of the preprocessing chain Finally, tabular results for postonalysis metrics contain information about each metric computed for each sample. For example, for diversity metrics: Sample Observed ShannonWiener NormalizedShannonWeinerIndex InverseSimpson Gini Chao1 EfronThisted d50 P14-M1-DNEG.clns 338.0 200.6799343900461 0.9104704595906409 120.45605983947769 1.00830178242035 344.42857142857144 361.0 60.0 P14-T0-PD1.clns 94.0 37.018756276701254 0.7948911271817959 19.176578099078075 1.052146946907492 103.0 109.0 10.0 P14-T0-TIGIT.clns 189.0 76.93036805538294 0.82852161488747 32.93252403521533 1.030365118656884 189.25 183.0 19.0 P15-M2-DNEG.clns 415.0 105.62518891441341 0.7730062336330527 14.285608639572564 1.0700005176699228 421.0 426.0 39.0 ... ... ... ... ... ... ... ... ... Graphical output MiXCR allows to export graphical results in PDF, EPS, PNG and SVG formats using exportPlots command. For diversity metrics and CDR3 properties MiXCR allows to group data in a different ways and apply various statistical tests. For example, if one interested in how diversity metrics are changed between time points for different markers we can use a combination of primary grouping and faceting: > mixcr exportPlots diversity -f \\ --plot-type boxplot-bindot \\ --primary-group Time \\ --primary-group-values T0,M1,M2 \\ --facet-by Marker \\ pa/i.json.gz \\ plots/diversity_facets.pdf Or using secondary grouping: > mixcr exportPlots diversity -f \\ --primary-group Marker \\ --secondary-group Time \\ --secondary-group-values T0,M1,M2 \\ pa/i.json.gz \\ plots/diversity.pdf For further details see exportPlots reference . Gene usage plots may be exported as heatmaps: > mixcr exportPlots vUsage -f \\ --palette density \\ --color-key Patient \\ pa/i.json.gz \\ plots/vUsage.pdf For further details see gene usage plots reference . Overlap metrics To compute samples pairwise overlap metrics we run > mixcr postanalysis overlap \\ --metadata metadata.tsv \\ --default-downsampling count-umi-auto \\ --default-weight-function umi \\ --only-productive \\ --tables pa/pa.o.tsv \\ --preproc-tables pa/preproc.o.tsv \\ results/*.clns \\ pa/o.json.gz Then we can export graphical heatmap using exportPlots command: > mixcr exportPlots overlap \\ --palette density \\ --color-key Patient \\ pa/o.json.gz \\ plots/overlap.pdf However, when there are many samples such representation may be not very informative. In this case it may be worth to factor data by specific columns. For example, in the considered project we might be interested in the overlap between different groups of samples ( Time , Marker ): > mixcr postanalysis overlap -f \\ --factor-by Time,Marker \\ --metadata metadata.tsv \\ --default-downsampling count-umi-auto \\ --default-weight-function umi \\ --only-productive \\ --tables pa/pa.o.tsv \\ --preproc-tables pa/preproc.o.tsv \\ results/*.clns \\ pa/o.time_marker.json.gz This way MiXCR will perform pairwise overlap comparison between groups of samples with different Time and Marker values. The tabular output for example for F1 metric will look like: DPOS,T0 DNEG,T0 PD1,T0 TIGIT,T0 TIGIT,M2 DPOS,M2 DNEG,M2 DPOS,M1 PD1,M1 DNEG,M1 PD1,M2 TIGIT,M1 DPOS,T0 1.0 0.03337746793790493 0.058259182976542534 0.09059870818406711 0.12825009669622267 0.2176144334484892 0.029410436004617048 0.017359209495845872 0.05243553676756904 0.03135826827728167 0.04738844004159216 0.1280522128472063 DNEG,T0 0.03337746793790493 1.0 0.03418407490877663 0.03943250459863671 0.05276250161505157 0.02475362086174232 0.06687176001770796 0.026595059180080732 0.037806308652629184 0.06568054893303528 0.07938598190295898 0.043573513512455364 PD1,T0 0.058259182976542534 0.03418407490877663 1.0 0.07081800787700983 0.05257217115262162 0.008369965023759815 0.01740459412145581 0.02976807296962157 0.14421349623438343 0.03627398674451592 0.045755508326405306 0.060122381269133274 TIGIT,T0 0.09059870818406711 0.03943250459863671 0.07081800787700983 1.0 0.1559641607179412 0.05807983343291177 0.05141606811763911 0.0099082284353018 0.05451451650549572 0.06538903208414093 0.018551059616619254 0.18874888313779933 TIGIT,M2 0.12825009669622267 0.05276250161505157 0.05257217115262162 0.1559641607179412 1.0 0.06829564533263949 0.027036490155762566 0.015149807342004265 0.07420432828043542 0.03379890430872591 0.07419991243609103 0.19900355943180156 DPOS,M2 0.2176144334484892 0.02475362086174232 0.008369965023759815 0.05807983343291177 0.06829564533263949 1.0 0.025777032230044617 0.011760089771440219 0.047941595476748186 0.03479551709273049 0.04834321413689425 0.05004620399157923 DNEG,M2 0.029410436004617048 0.06687176001770796 0.01740459412145581 0.05141606811763911 0.027036490155762566 0.025777032230044617 1.0 0.009463737972892084 0.04004526421608648 0.08755823985957366 0.0278548970518577 0.051006595559291074 DPOS,M1 0.017359209495845872 0.026595059180080732 0.02976807296962157 0.0099082284353018 0.015149807342004265 0.011760089771440219 0.009463737972892084 1.0 0.02475957071676367 0.019956678578503 0.0912924918437169 0.014785678846985591 PD1,M1 0.05243553676756904 0.037806308652629184 0.14421349623438343 0.05451451650549572 0.07420432828043542 0.047941595476748186 0.04004526421608648 0.02475957071676367 1.0 0.06654790587516789 0.05848890523340021 0.12451702042730313 DNEG,M1 0.03135826827728167 0.06568054893303528 0.03627398674451592 0.06538903208414093 0.03379890430872591 0.03479551709273049 0.08755823985957366 0.019956678578503 0.06654790587516789 1.0 0.039832887864485626 0.06412844422925826 PD1,M2 0.04738844004159216 0.07938598190295898 0.045755508326405306 0.018551059616619254 0.07419991243609103 0.04834321413689425 0.0278548970518577 0.0912924918437169 0.05848890523340021 0.039832887864485626 1.0 0.027777591048667595 TIGIT,M1 0.1280522128472063 0.043573513512455364 0.060122381269133274 0.18874888313779933 0.19900355943180156 0.05004620399157923 0.051006595559291074 0.014785678846985591 0.12451702042730313 0.06412844422925826 0.027777591048667595 1.0 The graphical output will be more informative as well: > mixcr exportPlots overlap \\ --palette density \\ pa/o.time_marker.json.gz \\ plots/overlap.time_marker.pdf For further details see overlap postanalysis reference .","title":"Targeted TCR UMI libraries"},{"location":"mixcr/guides/generic-umi-tcr/#analysis-of-tcr-amplicon-libraries-with-umis","text":"","title":"Analysis of TCR amplicon libraries with UMIs"},{"location":"mixcr/guides/generic-umi-tcr/#data-libraries","text":"This tutorial uses the data from the publication: Simon S, Voillet V, Vignard V, et al, PD-1 and TIGIT coexpression identifies a circulating CD8 T cell subset predictive of response to anti-PD-1 therapy , Journal for ImmunoTherapy of Cancer 2020;8:e001631. doi: 10.1136/jitc-2020-001631 The data was collected from 12 patients. PBMC samples were obtained at three time points for each patient. The libraries were generated using Human TCR Panel QIAseq Immune Repertoire RNA Library Kit (QIAGEN\u2122) . Sequencing was performed using Illumina NextSeq\u2122 sequencing machine. Each samples contain sequences of TCR\u03b1 and TCR\u03b2 chains enriched cDNA libraries of human. 261bp Read 1 holds CDR3 region and 41bp Read 2 with UMI (first 12bp): All data may be downloaded directly from SRA using e.g. SRA Explorer : > curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR105/059/SRR10545759/SRR10545759_1.fastq.gz -o SRR10545759_GSM4195469_TCR-seq_P15-M2-TIGIT_Homo_sapiens_OTHER_1.fastq.gz > curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR105/059/SRR10545759/SRR10545759_2.fastq.gz -o SRR10545759_GSM4195469_TCR-seq_P15-M2-TIGIT_Homo_sapiens_OTHER_2.fastq.gz ... The project contains 544 paired fastq files, separated in multiple lanes and biosample ids: > ls fastq/ SRR10545725_GSM4195461_TCR-seq_P15-T0-TIGIT_Homo_sapiens_OTHER_1.fastq.gz SRR10545725_GSM4195461_TCR-seq_P15-T0-TIGIT_Homo_sapiens_OTHER_2.fastq.gz SRR10545726_GSM4195461_TCR-seq_P15-T0-TIGIT_Homo_sapiens_OTHER_1.fastq.gz SRR10545726_GSM4195461_TCR-seq_P15-T0-TIGIT_Homo_sapiens_OTHER_2.fastq.gz SRR10545727_GSM4195461_TCR-seq_P15-T0-TIGIT_Homo_sapiens_OTHER_1.fastq.gz SRR10545727_GSM4195461_TCR-seq_P15-T0-TIGIT_Homo_sapiens_OTHER_2.fastq.gz SRR10545728_GSM4195461_TCR-seq_P15-T0-TIGIT_Homo_sapiens_OTHER_1.fastq.gz SRR10545728_GSM4195461_TCR-seq_P15-T0-TIGIT_Homo_sapiens_OTHER_2.fastq.gz ... Each file name encodes the information about lane, biosample id, metadata, R1 or R2. For example for the first file from above listing: SRR10545497 - lane GSM4195404 - biosample id P5 - patient id T0 - time point DPOS - double positive OTHER_1 - first mate of paired-end data.","title":"Data libraries"},{"location":"mixcr/guides/generic-umi-tcr/#upstream-analysis","text":"The most straightforward way to get clonotype tables is to use a universal mixcr analyze command. According to the library preparation protocol, the library has V primers on 5'-end and C primers on 3', so the command for a single sample is the following: > mixcr analyze amplicon \\ --species hsa \\ --starting-material rna \\ --receptor-type tcr \\ --5-end no-v-primers \\ --3-end c-primers \\ --adapters adapters-present \\ --umi-pattern '^(R1:*)\\^(UMI:N{12})' \\ fastq/SRR {{ n }} _GSM4195461_TCR-seq_P15-T0-TIGIT_Homo_sapiens_OTHER_1.fastq.gz \\ fastq/SRR {{ n }} _GSM4195461_TCR-seq_P15-T0-TIGIT_Homo_sapiens_OTHER_2.fastq.gz \\ results/P15-T0-TIGIT The meaning of these options is the following. --species is set to hsa for Homo Sapience --starting-material RNA or DNA. It affects the choice of V gene region which will be used as target in align step ( vParameters.geneFeatureToAlign , see align documentation ): rna corresponds to the VTranscriptWithout5UTRWithP and dna to VGeneWithP (see Gene features and anchor points for details) --receptor-type TCR or BCR. It affects the choice of underlying alignment algorithms: MiXCR uses fundamentally different algorithms for TCRs and BCRs because BCRs have somatic hypermutations and long indels. --5-end may be no-v-primers or v-primers . For this library structure we use no-v-primers while e.g. Depending on the presence of primers or adapters at 5'-end MiXCR uses either global or local alignment algorithm to align the left bound of V. --3-end-primers may be j-primers , j-c-intron-primers or c-primers . Here we use c-primers since the primer used for library preparation is complimentary to C-region of TCR genes. Depending on the presence of primers or adapters at 3'-end MiXCR uses either global or local alignment algorithms to align the right bound of J and C gene segments. --adapers may be adapters-present or no-adapters . We use adapters-present because primer sequence is present in the data and has not been cut prior to. Presence or absence of adapter sequences results in the choice between local and global alignment algorithms on the edges of the target sequence. --umi-pattern is used to specify UMI pattern for the library. MiXCR provides a powerful regex-like language allowing to specify almost arbitrary barcode structure. Here we use ^(R1:*)\\^(UMI:N{12}) pattern to specify that R1 should be used as is, UMI spans the first 12 letters of R2 and the rest of R2 is ignored. Finally we specify paths for both input files and a path to output folder with prefix describing the sample. Note that {{n}} syntax is similar to Linux wildcard behaviour: it will concatenate all fastq files matching this pattern into one sample. This is very useful when you have for example multiple lanes. Running the command above will generate the following files: > ls result/ # human-readable reports P15-T0-TIGIT.report # raw alignments (highly compressed binary file) P15-T0-TIGIT.vdjca # alignments with corrected UMI barcode sequences P15-T0-TIGIT.corrected.vdjca # TCR\u03b1 & TCR\u03b2 CDR3 clonotypes (highly compressed binary file) P15-T0-TIGIT.clns # TCR\u03b1 & TCR\u03b2 CDR3 clonotypes exported in tab-delimited txt P15-T0-TIGIT.clonotypes.TRA.tsv P15-T0-TIGIT.clonotypes.TRB.tsv Clonotype tables is the main result of the upstream analysis. They are stored in a highly compressed and efficient binary .clns file and can be exported in many ways: detailed tab-delimited format with dozens of customizable columns, human readable for manual inspection, and AIRR format suitable for many scientific downstream analysis tools. By default, MiXCR exports clonotypes in a tab-delimited format separately for each immunological chain. In order to run the analysis for all samples in the project on Linux we can for example use GNU Parallel in the following way: > ls /fastq/*_1* | \\ sed 's:SRR[0-9]*_:SRR\\{\\{n\\}\\}_:g' | \\ uniq | \\ parallel -j2 \\ 'mixcr analyze amplicon \\ --species hsa \\ --starting-material rna \\ --receptor-type tcr \\ --5-end v-primers \\ --3-end c-primers \\ --adapters adapters-present \\ --tag-pattern ' ^ ( R1:* ) \\^ ( UMI:N { 12 }) ' \\ {} \\ {=s:OTHER_1:OTHER_2:=} \\ results/{=s:.*TCR-seq_:PRJNA592172/:; s:_Homo.*::=}' Briefly, we list all R1 files in the fastq directory, replace lane specifications with MiXCR {{n}} wildcard, pipe the list to parallel, then run mixcr analyze for each pair, again using sed to obtain R2 filename from R1 and the name of output.","title":"Upstream analysis"},{"location":"mixcr/guides/generic-umi-tcr/#details-and-fine-tuning","text":"Under the hood, mixcr analyze amplicon executes the following pipeline of MiXCR actions: Each step in this pipeline is executed with a specific options inherited from the options supplied to mixcr analyze amplicon . Instead of running analyze one can run the whole pipeline step by step and additionally fine tune the analysis parameters at each step. Another reason why sometimes it is better to execute the pipeline step by step is the ability to better manage hardware resources allocated to each step, because some steps are memory intensive and less CPU intensive, while others are vice a versa. Let's go throw each step executed in the considered case.","title":"Details and fine-tuning"},{"location":"mixcr/guides/generic-umi-tcr/#align","text":"Performs : alignment of raw sequencing reads against reference database of V-, D-, J- and C- gene segments pattern matching of tag pattern sequence and extraction of barcodes > mixcr align \\ --species hsa \\ --tag-pattern '^(R1:*)\\^(UMI:N{12})' \\ --report result/P15-T0-TIGIT.report \\ --json-report result/P15-T0-TIGIT.report.json \\ -OvParameters.geneFeatureToAlign = \"VTranscriptWithout5UTRWithP\" \\ -OvParameters.parameters.floatingLeftBound = false \\ -OjParameters.parameters.floatingRightBound = false \\ -OcParameters.parameters.floatingRightBound = true \\ fastq/SRR {{ n }} _GSM4195461_TCR-seq_P15-T0-TIGIT_Homo_sapiens_OTHER_1.fastq.gz \\ fastq/SRR {{ n }} _GSM4195461_TCR-seq_P15-T0-TIGIT_Homo_sapiens_OTHER_2.fastq.gz \\ results/P15-T0-TIGIT.vdjca Options --report and --json-report are specified here explicitly. Since we start from RNA data we use VTranscriptWithout5UTRWithP for the alignment of V segments (see Gene features and anchor points . Because we have primers on V segment, we use local alignment on the left bound of V and since we have primers on C segment, we use global alignment for J and local on the right bound of C. This step utilizes all available CPUs and scales perfectly. When there are a lot of CPUs, the only limiting factor is the speed of disk I/O. To limit the number of used CPUs one can pass --threads N option.","title":"align"},{"location":"mixcr/guides/generic-umi-tcr/#correctandsorttags","text":"Corrects sequencing and PCR errors inside barcode sequences. This step does extremely important job by correcting artificial diversity caused by errors in barcodes. In the considered example project it corrects only sequences of UMIs. > mixcr correctAndSortTags \\ --report results/P15-T0-TIGIT.report \\ --json-report results/P15-T0-TIGIT.report.json \\ P15-T0-TIGIT.vdjca \\ P15-T0-TIGIT.corrected.vdjca Options --report and --json-report are specified here explicitly so that the report files will be appended with the barcode correction report.","title":"correctAndSortTags"},{"location":"mixcr/guides/generic-umi-tcr/#assemble","text":"Assembles clonotypes and applies several layers of errors correction. In the current example project we consider TCR\u03b1 & TCR\u03b2 separately and clonotype by its CDR3 sequence. The layers of correction applied in this example are: assembly consensus CDR3 sequence for each UMI quality-awared correction for sequencing errors clustering to correct for PCR errors, which still may present even in the case of UMI data, since a error may be introduced e.g. on the first reverse-transcription cycle > mixcr assemble \\ --report results/P15-T0-TIGIT.report \\ --json-report results/P15-T0-TIGIT.report.json \\ P15-T0-TIGIT.corrected.vdjca \\ P15-T0-TIGIT.clns Options --report and --json-report are specified here explicitly so that the report files will be appended with assembly report. Assembly step may be quite memory consuming for very big datasets. MiXCR offloads memory intensive computations to disk and does it in a highly efficient and parallelized way, fully utilizing all hardware facilities. For such big samples it may be worth to control the amount of RAM provided to MiXCR using -Xmx JVM option (the more RAM supplied the faster execution): > mixcr -Xmx16g assemble ...","title":"assemble"},{"location":"mixcr/guides/generic-umi-tcr/#exportclones","text":"Finally, to export clonotype tables in tabular form exportClones is used: > mixcr exportClones \\ -p full \\ -uniqueTagCount UMI \\ P15-T0-TIGIT.clns \\ P15-T0-TIGIT.tsv Here -p full is a shorthand for the full preset of common export columns and -uniqueTagCount UMI adds a column with the UMI count for each clone.","title":"exportClones"},{"location":"mixcr/guides/generic-umi-tcr/#quality-controls","text":"MiXCR generates comprehensive reports for each step of the pipeline, containing exhaustive information about quality of the library and performance of the algorithms. These reports are a primary source of the feedback to the wet lab, and also may be used to tune the parameters of the pipeline. The very basic overview of the library performance may be generated in a graphical form using mixcr exportQc align command: > mixcr exportQc align results/*.clns alignQc.pdf This plot shows the fraction of raw reads that were successfully aligned against reference V/D/J/C-gene segment library. Rate of successful alignments is expected to be higher than 90% for a high quality targeted TCR library. So in the considered example something went not as expected. In most cases when we observe low alignment rate for amplicon library, the reason lies either in a wrong understanding of the library architecture or some sample preparation artefacts. From the plot we see two primary reasons for failed alignments: Alignment failed, no any hits (not TCR/IG) - read was not covered by any part of V/D/J/C-gene segments, which is probably due to a contamination in the lab Alignments failed because of absence of J hits - read was covered by V segment, but not by J To dig deeper one can re-align one problematic sample with the options to preserve partial alignments and save not-aligned reads: > mixcr align \\ --species hsa \\ --tag-pattern '^(R1:*)\\^(UMI:N{12})' \\ -OvParameters.geneFeatureToAlign = \"VTranscriptWithout5UTRWithP\" \\ -OvParameters.parameters.floatingLeftBound = true \\ -OjParameters.parameters.floatingRightBound = false \\ -OcParameters.parameters.floatingRightBound = true \\ -OallowNoCDR3PartAlignments = true \\ -OallowPartialAlignments = true \\ --not-aligned-R1 na.fastq \\ SRR {{ n }} _GSM4195532_TCR-seq_P23-T0-DPOS_Homo_sapiens_OTHER_1.fastq.gz \\ SRR {{ n }} _GSM4195532_TCR-seq_P23-T0-DPOS_Homo_sapiens_OTHER_2.fastq.gz \\ P23-T0-DPOS_debug.vdjca Additional options are: -OallowNoCDR3PartAlignments preserve alignments that do not fully cover CDR3 region in the output -OallowPartialAlignments preserve alignments that lack either V or J hit in the output --not-aligned-R1 save all not aligned reads to na.fastq Now one can check how reads cover V-D-J region using exportQc coverage command: > mixcr exportQc coverage \\ P23-T0-DPOS_debug.vdjca \\ P23-T0-DPOS_debug.coverage.pdf From this plot it is seen that there are nearly 50% of not-spliced reads in the data, which is a clear signal of some library preparation artefacts. To dig even deeper one can also export raw alignments in a human-readable way for further manual inspection: > mixcr exportAlignmentsPretty P23-T0-DPOS_debug.vdjca Some examples from the output illustrating wet lab artefacts: >>> Read ids: 1 Quality 22222224225262622222222727222 Target0 0 CATAAAATCATCGTGTCAGAGAAGGGAAA 28 Score TRBV7-2*00 94 cagagaagggaaa 106 65 TRBV7-3*00 94 cagagaagggaaa 106 65 _ T P H P P P H P A A P D P P P P T P P L H P P P P P Quality 26222554266244522552226622622255252424222424522222224572655225265422265622726222 Target1 0 CACACCCCACCCCCCCCCCCACCCCGCCGCCCCCGACCCCCCTCCCCCGACCCCCCCCCTCCACCCCCCCCCCCCCCCCC 79 Score <J CD P H P P P P P P H A P P P P P P P P P R A G R H T Q Y Quality 56264672227222227277727225222242256272762722222226222262222222222222222767777752 Target1 80 CCCACCCCCCCCCCCCCCCCCCCCACGCGCCCCCCCCCCCCCCCCCCCCCCCCCCCCGCGCCGGCCGCCACACCCAGTAC 159 Score TRBJ2-5*00 28 acccagtac 36 186 R3><FR4 FR4><C F G P G T R L L V L E D L K N V F P P E V A V F E P S Quality 77462776776777222727275627625777775676777777767777772727666777767577676777777777 Target1 160 TTCGGGCCAGGCACGCGGCTACTGGTGCTCGAGGACCTGAAAAACGTGTTCCCACCCGAGGTCGCTGTGTTTGAGCCATC 239 Score TRBJ2-5*00 37 ttcgggccaggcacgcggctCctggtgctcg 67 186 TRBC2*00 0 aggacctgaaaaacgtgttcccacccgaggtcgctgtgtttgagccatc 48 330 TRBC1*00 0 aggacctgaaCaaGgtgttcccacccgaggtcgctgtgtttgagccatc 48 302 >>> Read ids: 17 Quality 22222222222777777727776774777 Target0 0 ACTAGAGGTGGTCTTAATAACATCAGGGA 28 Score _ E S I I R Q L Y S L L I T S G K S L K F I L E N L I Quality 24624425222562545262542222265255252255252252467657526665566526226544775226266625 Target1 0 TGAGAGCATAATTAGACAATTGTATTCCTTATTAATAACATCAGGGAAAAGCCTTAAATTTATACTGGAAAATCTAATTG 79 Score TRGV8*00 274 cagggaaGagccttaaatttatactggaaaatctaattg 312 356 FR3><CDR3 V> <J CDR3><FR4 E R D S G V Y Y C A T W I Q G _ T G W F K I F A E G T K Quality 66446666665444255226265657272527756756665255757525576277277777766767777777677777 Target1 80 AACGTGACTCTGGGGTCTATTACTGTGCCACCTGGATTCAGGGGCACTGGTTGGTTCAAGATATTTGCTGAAGGGACTAA 159 Score TRGV8*00 313 aacgtgactctggggtctattactgtgccacctgg 347 356 TRGJP1*00 24 cactggttggttcaagatatttgctgaagggactaa 59 280 FR4><C L I V T S P D K Q L D A D V S P K P T I F L P S I A Quality 77777777777577776777777777777776767777776677777677777777777777777777767777777777 Target1 160 GCTCATAGTAACTTCACCTGATAAACAACTTGATGCAGATGTTTCCCCCAAGCCCACTATTTTTCTTCCTTCAATTGCTG 239 Score TRGJP1*00 60 gctcatagtaacttcacctg 79 280 TRGC1*00 0 ataaacaacttgatgcagatgtttcccccaagcccactatttttcttccttcaattgctg 59 391 TRGC2*00 0 ataaacaacttgatgcagatgtttcccccaagcccactatttttcttccttcaattgctg 59 377 Finally, one can use na.fastq to blast not aligned sequences and precisely determine the source of not aligned reads: contamination, artefacts in the library preparation etc. Another useful report is a chain usage report: > mixcr exportQc chainUsage results/*.clns chainUsage.pdf Here we see a small fraction of TRG sequences, which are not supposed to be present in the library, thus the initial cell selection probably was not ideal. Individual reports generated at each step of MiXCR pipeline can be exported either in JSON or text form using exportReports command: > mixcr exportReports \\ --json \\ results/P15-T0-TIGIT.clns \\ results/P15-T0-TIGIT.report.json Detailed description of each report can be found in [TODO].","title":"Quality controls"},{"location":"mixcr/guides/generic-umi-tcr/#downstream-analysis","text":"There are two types of basic downstream analysis: individual and overlap . Individual computes CDR3 metrics, diversity and gene usage metrics for each dataset. Overlap computes statistical metrics of repertoire overlap. In both cases MiXCR applies appropriate sample normalization. To run postanalysis routines we need to prepare a metadata file in a .tsv or .csv form. Table must contain sample column which will be used to match metadata with cloneset files. For our project metadata table looks like: Sample Patient Time Marker P14-M1-DNEG P14 M1 DNEG P14-M1-DPOS P14 M1 DPOS P14-M2-TIGIT P14 M2 TIGIT ... ... ... ...","title":"Downstream analysis"},{"location":"mixcr/guides/generic-umi-tcr/#individual-metrics","text":"To compute individual metrics of datasets we run > mixcr postanalysis individual \\ --metadata metadata.tsv \\ --default-downsampling count-umi-auto \\ --default-weight-function umi \\ --only-productive \\ --tables pa/pa.i.tsv \\ --preproc-tables pa/preproc.i.tsv \\ results/*.clns \\ pa/i.json.gz The meaning of specified options is the following: --metadata specified metadata file to use --default-downsampling downsampling applied to normalize the clonesets. Without appropriate normalization it is not possible to make a statistical comparisons between datasets. In the considered case we normalize data to the same number of UMIs, and this number is computed automatically based on the number of unique UMIs in each clone in each dataset. For all downsampling options see [TODO]. Default downsampling may be overridden for individual metrics. --default-weight-function defines weight of each clonotype. May be read , umi or cell --only-productive drop clonotypes with out-of-frame CDR3 sequences or containing stop codons --tables path for postanalysis metrics in a tabular form --preproc-tables path for tabular summary of the applied downsampling and other samples preprocessing (for example filtering productive clonotypes) After execution, we will have the following files: > ls pa/ # gzipped JSON with all results i.json.gz # summary of applied downsampling i.pa.preproc.TRAD.tsv i.pa.preproc.TRB.tsv # diversity tables i.pa.diversity.TRAD.tsv i.pa.diversity.TRB.tsv # CDR3 metrics tables & CDR3 properties i.pa.cdr3metrics.TRAD.tsv i.pa.cdr3metrics.TRB.tsv # V-gene usage i.pa.vUsage.TRAD.tsv i.pa.vUsage.TRB.tsv ... MiXCR runs postanalysis for each chain individually, so we have result per each chain in the output. One can specify --chains option to select specific chains for the analysis. Also in case if you have separate .fastq files for separate chains, it is possible to specify chains metadata column. Preprocessing summary tables (e.g. i.pa.preproc.TRAD.tsv ) contain detailed information on how downsampling was applied for each metric: characteristic sample preprocessor nElementsBefore sumWeightBefore nElementsAfter sumWeightAfter preprocessor#1 nElementsBefore#1 sumWeightBefore#1 nElementsAfter#1 sumWeightAfter#1 preprocessor#2 nElementsBefore#2 sumWeightBefore#2 nElementsAfter#2 sumWeightAfter#2 preprocessor#3 nElementsBefore#3 sumWeightBefore#3 nElementsAfter#3 sumWeightAfter#3 Diversity ShannonWiener,Chao1... P21-M1-PD1.clns Filter TRA... 309 2141.0 110 796.0 Filter TRA,TRD chains 309 2141.0 162 1186.0 Filter stops in CDR3, OOF in CDR3 162 1186.0 139 1143.0 Downsample by umi automatic 139 1143.0 110 796.0 Diversity ShannonWiener,Chao1... P14-T0-TIGIT.clns Filter TRA... 863 8478.0 189 796.0 Filter TRA,TRD chains 863 8478.0 412 3688.0 Filter stops in CDR3, OOF in CDR3 412 3688.0 311 3071.0 Downsample by umi automatic 311 3071.0 189 796.0 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... The meaning of the columns is the following: characteristic name for a set of metrics preprocessor the name of the overall preprocessor chain applied to the dataset nElementsBefore number of clonotypes before any preprocessing applied (that is in the initial dataset) sumWeightBefore total weight of all clonotypes before any preprocessing applied. The weight may be either number of reads or UMIs or cells, depending on the selected downsampling. nElementsAfter number of clonotypes in the dataset after all preprocessing applied sumWeightBefore total weight of all clonotypes after all preprocessing applied. preprocessor#i i-th part of the preprocessing chain Finally, tabular results for postonalysis metrics contain information about each metric computed for each sample. For example, for diversity metrics: Sample Observed ShannonWiener NormalizedShannonWeinerIndex InverseSimpson Gini Chao1 EfronThisted d50 P14-M1-DNEG.clns 338.0 200.6799343900461 0.9104704595906409 120.45605983947769 1.00830178242035 344.42857142857144 361.0 60.0 P14-T0-PD1.clns 94.0 37.018756276701254 0.7948911271817959 19.176578099078075 1.052146946907492 103.0 109.0 10.0 P14-T0-TIGIT.clns 189.0 76.93036805538294 0.82852161488747 32.93252403521533 1.030365118656884 189.25 183.0 19.0 P15-M2-DNEG.clns 415.0 105.62518891441341 0.7730062336330527 14.285608639572564 1.0700005176699228 421.0 426.0 39.0 ... ... ... ... ... ... ... ... ...","title":"Individual metrics"},{"location":"mixcr/guides/generic-umi-tcr/#graphical-output","text":"MiXCR allows to export graphical results in PDF, EPS, PNG and SVG formats using exportPlots command. For diversity metrics and CDR3 properties MiXCR allows to group data in a different ways and apply various statistical tests. For example, if one interested in how diversity metrics are changed between time points for different markers we can use a combination of primary grouping and faceting: > mixcr exportPlots diversity -f \\ --plot-type boxplot-bindot \\ --primary-group Time \\ --primary-group-values T0,M1,M2 \\ --facet-by Marker \\ pa/i.json.gz \\ plots/diversity_facets.pdf Or using secondary grouping: > mixcr exportPlots diversity -f \\ --primary-group Marker \\ --secondary-group Time \\ --secondary-group-values T0,M1,M2 \\ pa/i.json.gz \\ plots/diversity.pdf For further details see exportPlots reference . Gene usage plots may be exported as heatmaps: > mixcr exportPlots vUsage -f \\ --palette density \\ --color-key Patient \\ pa/i.json.gz \\ plots/vUsage.pdf For further details see gene usage plots reference .","title":"Graphical output"},{"location":"mixcr/guides/generic-umi-tcr/#overlap-metrics","text":"To compute samples pairwise overlap metrics we run > mixcr postanalysis overlap \\ --metadata metadata.tsv \\ --default-downsampling count-umi-auto \\ --default-weight-function umi \\ --only-productive \\ --tables pa/pa.o.tsv \\ --preproc-tables pa/preproc.o.tsv \\ results/*.clns \\ pa/o.json.gz Then we can export graphical heatmap using exportPlots command: > mixcr exportPlots overlap \\ --palette density \\ --color-key Patient \\ pa/o.json.gz \\ plots/overlap.pdf However, when there are many samples such representation may be not very informative. In this case it may be worth to factor data by specific columns. For example, in the considered project we might be interested in the overlap between different groups of samples ( Time , Marker ): > mixcr postanalysis overlap -f \\ --factor-by Time,Marker \\ --metadata metadata.tsv \\ --default-downsampling count-umi-auto \\ --default-weight-function umi \\ --only-productive \\ --tables pa/pa.o.tsv \\ --preproc-tables pa/preproc.o.tsv \\ results/*.clns \\ pa/o.time_marker.json.gz This way MiXCR will perform pairwise overlap comparison between groups of samples with different Time and Marker values. The tabular output for example for F1 metric will look like: DPOS,T0 DNEG,T0 PD1,T0 TIGIT,T0 TIGIT,M2 DPOS,M2 DNEG,M2 DPOS,M1 PD1,M1 DNEG,M1 PD1,M2 TIGIT,M1 DPOS,T0 1.0 0.03337746793790493 0.058259182976542534 0.09059870818406711 0.12825009669622267 0.2176144334484892 0.029410436004617048 0.017359209495845872 0.05243553676756904 0.03135826827728167 0.04738844004159216 0.1280522128472063 DNEG,T0 0.03337746793790493 1.0 0.03418407490877663 0.03943250459863671 0.05276250161505157 0.02475362086174232 0.06687176001770796 0.026595059180080732 0.037806308652629184 0.06568054893303528 0.07938598190295898 0.043573513512455364 PD1,T0 0.058259182976542534 0.03418407490877663 1.0 0.07081800787700983 0.05257217115262162 0.008369965023759815 0.01740459412145581 0.02976807296962157 0.14421349623438343 0.03627398674451592 0.045755508326405306 0.060122381269133274 TIGIT,T0 0.09059870818406711 0.03943250459863671 0.07081800787700983 1.0 0.1559641607179412 0.05807983343291177 0.05141606811763911 0.0099082284353018 0.05451451650549572 0.06538903208414093 0.018551059616619254 0.18874888313779933 TIGIT,M2 0.12825009669622267 0.05276250161505157 0.05257217115262162 0.1559641607179412 1.0 0.06829564533263949 0.027036490155762566 0.015149807342004265 0.07420432828043542 0.03379890430872591 0.07419991243609103 0.19900355943180156 DPOS,M2 0.2176144334484892 0.02475362086174232 0.008369965023759815 0.05807983343291177 0.06829564533263949 1.0 0.025777032230044617 0.011760089771440219 0.047941595476748186 0.03479551709273049 0.04834321413689425 0.05004620399157923 DNEG,M2 0.029410436004617048 0.06687176001770796 0.01740459412145581 0.05141606811763911 0.027036490155762566 0.025777032230044617 1.0 0.009463737972892084 0.04004526421608648 0.08755823985957366 0.0278548970518577 0.051006595559291074 DPOS,M1 0.017359209495845872 0.026595059180080732 0.02976807296962157 0.0099082284353018 0.015149807342004265 0.011760089771440219 0.009463737972892084 1.0 0.02475957071676367 0.019956678578503 0.0912924918437169 0.014785678846985591 PD1,M1 0.05243553676756904 0.037806308652629184 0.14421349623438343 0.05451451650549572 0.07420432828043542 0.047941595476748186 0.04004526421608648 0.02475957071676367 1.0 0.06654790587516789 0.05848890523340021 0.12451702042730313 DNEG,M1 0.03135826827728167 0.06568054893303528 0.03627398674451592 0.06538903208414093 0.03379890430872591 0.03479551709273049 0.08755823985957366 0.019956678578503 0.06654790587516789 1.0 0.039832887864485626 0.06412844422925826 PD1,M2 0.04738844004159216 0.07938598190295898 0.045755508326405306 0.018551059616619254 0.07419991243609103 0.04834321413689425 0.0278548970518577 0.0912924918437169 0.05848890523340021 0.039832887864485626 1.0 0.027777591048667595 TIGIT,M1 0.1280522128472063 0.043573513512455364 0.060122381269133274 0.18874888313779933 0.19900355943180156 0.05004620399157923 0.051006595559291074 0.014785678846985591 0.12451702042730313 0.06412844422925826 0.027777591048667595 1.0 The graphical output will be more informative as well: > mixcr exportPlots overlap \\ --palette density \\ pa/o.time_marker.json.gz \\ plots/overlap.time_marker.pdf For further details see overlap postanalysis reference .","title":"Overlap metrics"},{"location":"mixcr/guides/milaboratories-human-tcr-rna-multi/","text":"MiLaboratories Human TCR RNA Multiplex kit This kit allows to obtain TCR alpha and beta repertoires for different types of available RNA material, with high sensitivity and UMI-based accuracy. Bellow you can see the structure of cDNA library. The data for this tutorial consists of two samples that represent two replicas of the same biological sample. Total RNA was isolated from PBMC and 25ng were used for each cDNA synthesis. Two cDNA libraries were prepared for each sample (one for TCR alpha and one for TCR betta) according to MiLaboratories Human TCR Repertoire RNA Multiplex Kit protocol. TCR sequencing was performed on an Illumina Miseq sequencer using the 300-cycle Miseq reagent kit(Illumina) with pair-end, 2x150 base pair reads. Upstream analysis One-line solution The most straightforward way to get clonotype tables is to use a universal mixcr analyze command. All files are located in fastq/ folder and the commands given accordingly. For a single sample mixcr analyze command wil be is the follows: > mixcr analyze amplicon \\ --species hsa \\ --starting-material hsa \\ --receptor-type tcr \\ --umi-pattern-name MiLaboratoriesMultiplexTCR \\ --5-end no-v-primers \\ --3-end c-primers \\ --adapters no-adapters \\ --report Multi_TRA_10ng_3.report: = \\ fastq/Multi_TRB_FS115_1_S153_R1_001.fastq.gz \\ fastq/Multi_TRB_FS115_1_S153_R2_001.fastq.gz \\ results/Multi_TRB_FS115_1 The meaning of these options is the following. --species is set to hsa for Homo Sapiens . --starting-material is set to rna and corresponds to VTranscriptWithout5UTRWithP alignment feature for V-gene ( see Gene features and anchor points for details) --receptor-type tcr . It affects the choice of alignment algorithms. --umi-pattern-name MiLaboratoriesMultiplexTCR specifies a build in UMI pattern for MiLaboratories RNA Multiplex TCR repertoire kit. This name stands for the following pattern: \"^N{0:2}tggtatcaacgcagagt(UMI:NNNNTNNNNTNNNN)N{21}(R1:*) \\ ^N{42}(R2:*)\" . It specifies the position of UMI barcode and also defines the rules for primer trimming, thus we can treat the data as if no primer sequences present in it. MiXCR provides a powerful regex-like language allowing to specify almost arbitrary barcode structure. --5-end is set to no-v-primers because we used a umi-pattern that ignores part of the sequence where primers are located. This choice leads to a global alignment algorithm to align the left bound of V. --3-end-primers is set to c-primers since the primer used for library preparation is complimentary to C-region of TCR genes. This leads to a global alignment algorithms to align the right bound of J and a local alignment at the right bound of C gene. --adapers no-adapters because primer sequences were cut off by umi-pattern . Running the command above will generate the following files: > ls result/ # human-readable reports Multi_TRB_FS115_1.report # raw alignments (highly compressed binary file) Multi_TRB_FS115_1.vdjca # alignments with corrected UMI barcode sequences Multi_TRB_FS115_1.corrected.vdjca # TCR\u03b1 & TCR\u03b2 CDR3 clonotypes (highly compressed binary file) Multi_TRB_FS115_1.clns # TCR\u03b1 & TCR\u03b2 CDR3 clonotypes exported in tab-delimited txt Multi_TRB_FS115_1.clonotypes.TRA.tsv Multi_TRB_FS115_1.clonotypes.TRB.tsv Multi_TRB_FS115_1.clonotypes.TRD.tsv Multi_TRB_FS115_1.clonotypes.TRG.tsv Clonotype tables is the main result of the upstream analysis. They are stored in a highly compressed and efficient binary .clns file and can be exported in many ways: detailed tab-delimited format with dozens of customizable columns, human readable for manual inspection, and AIRR format suitable for many scientific downstream analysis tools. By default, MiXCR exports clonotypes in a tab-delimited format separately for each immunological chain. In order to run the analysis for all samples in the project on Linux we can for example use GNU Parallel in the following way: > ls /fastq/*R1* | \\ parallel -j2 \\ ' mixcr analyze amplicon \\ --species hsa \\ --starting-material rna \\ --receptor-type tcr \\ --umi-pattern-name MiLaboratoriesMultiplexTCR \\ --5-end no-v-primers \\ --3-end c-primers \\ --adapters no-adapters \\ --report {= s:.*/:results/: ; s:_S.*:.report: =} \\ {} \\ {= s:R1:R2: =} \\ {= s:.*/:results/: ; s:_S.*:: =} Under the hood pipeline Under the hood, mixcr analyze amplicon executes the following pipeline of MiXCR actions: align Performs : alignment of raw sequencing reads against reference database of V-, D-, J- and C- gene segments pattern matching of tag pattern sequence and extraction of barcodes > mixcr align \\ --species mmu \\ --tag-pattern '^N{0:2}tggtatcaacgcagagt(UMI:NNNNTNNNNTNNNN)N{21}(R1:*) \\ ^N{42}(R2:*)' \\ --report result/Multi_TRA_10ng_3.report \\ --json-report result/Multi_TRA_10ng_3.report.json \\ -OvParameters.geneFeatureToAlign = \"VTranscriptWithout5UTRWithP\" \\ -OvParameters.parameters.floatingLeftBound = false \\ -OjParameters.parameters.floatingRightBound = false \\ -OcParameters.parameters.floatingRightBound = true \\ fastq/Multi_TRB_FS115_1_S153_R1_001.fastq.gz \\ fastq/Multi_TRB_FS115_1_S153_R1_001.fastq.gz \\ results/Multi_TRB_FS115_1.vdjca Options --report and --json-report are specified here explicitly. Since we start from RNA data we use VTranscriptWithout5UTRWithP for the alignment of V segments (see Gene features and anchor points ). Because we cut off the primers in V segment, we use global alignment on the left bound of V and since we have primers on C segment, we use global alignment for J and local on the right bound of C. This behavior is defined by the following options: -OvParameters.parameters.floatingLeftBound=false , -OjParameters.parameters.floatingRightBound=false , -OcParameters.parameters.floatingRightBound=true . This step utilizes all available CPUs and scales perfectly. When there are a lot of CPUs, the only limiting factor is the speed of disk I/O. To limit the number of used CPUs one can pass --threads N option. correctAndSortTags Corrects artificial diversity caused by sequencing and PCR errors inside barcode sequences. This step essential if any barcodes (UMI, Cel, etc.) present in the sample. In the considered example project it corrects only sequences of UMIs. > mixcr correctAndSortTags \\ --report results/Multi_TRB_FS115_1.report \\ --json-report results/Multi_TRB_FS115_1.report.json \\ Multi_TRB_FS115_1.vdjca \\ Multi_TRB_FS115_1.corrected.vdjca Options --report and --json-report are specified here explicitly so that the report files will be appended with the barcode correction report. assemble Assembles clonotypes and applies several layers of errors correction: assembly consensus CDR3 sequence for each UMI quality-awared correction for sequencing errors clustering to correct for PCR errors, which still may present even in the case of UMI data, since a error may be introduced e.g. on the first reverse-transcription cycle > mixcr assemble \\ --report results/Multi_TRA_10ng_3.report \\ --json-report results/Multi_TRA_10ng_3.report.json \\ Multi_TRB_FS115_1.corrected.vdjca \\ Multi_TRB_FS115_1.clns Options --report and --json-report are specified here explicitly so that the report files will be appended with assembly report. exportClones Finally, to export clonotype tables in tabular form exportClones is used: > mixcr exportClones \\ -p full \\ -uniqueTagCount UMI \\ Multi_TRB_FS115_1.clns \\ Multi_TRB_FS115_1.tsv Here -p full is a shorthand for the full preset of common export columns and -uniqueTagCount UMI adds a column with the UMI count for each clone. Quality control Now when the upstream analysis is finished we can move on to quality control. First lets look at the alignment report plot. # obtain alignment quality control > mixcr exportQc align \\ result/*.vdjca \\ alignQc.pdf From this plot we can tell that all samples have high alignment rate, more than 90% of reads have been successfully aligned to the reference sequences and CDR3 has been established. Now we can check chain distribution plot: # obtain alignment quality control > mixcr exportQc chainUsage \\ result/*.vdjca \\ alignQc.pdf Here we can see that no cross-contamination has occurred. TCR alpha samples consist only of TRA clones, and TCR betta only of TRB.","title":"MiLaboratories Human TCR RNA Multiplex kit"},{"location":"mixcr/guides/milaboratories-human-tcr-rna-multi/#milaboratories-human-tcr-rna-multiplex-kit","text":"This kit allows to obtain TCR alpha and beta repertoires for different types of available RNA material, with high sensitivity and UMI-based accuracy. Bellow you can see the structure of cDNA library. The data for this tutorial consists of two samples that represent two replicas of the same biological sample. Total RNA was isolated from PBMC and 25ng were used for each cDNA synthesis. Two cDNA libraries were prepared for each sample (one for TCR alpha and one for TCR betta) according to MiLaboratories Human TCR Repertoire RNA Multiplex Kit protocol. TCR sequencing was performed on an Illumina Miseq sequencer using the 300-cycle Miseq reagent kit(Illumina) with pair-end, 2x150 base pair reads.","title":"MiLaboratories Human TCR RNA Multiplex kit"},{"location":"mixcr/guides/milaboratories-human-tcr-rna-multi/#upstream-analysis","text":"","title":"Upstream analysis"},{"location":"mixcr/guides/milaboratories-human-tcr-rna-multi/#one-line-solution","text":"The most straightforward way to get clonotype tables is to use a universal mixcr analyze command. All files are located in fastq/ folder and the commands given accordingly. For a single sample mixcr analyze command wil be is the follows: > mixcr analyze amplicon \\ --species hsa \\ --starting-material hsa \\ --receptor-type tcr \\ --umi-pattern-name MiLaboratoriesMultiplexTCR \\ --5-end no-v-primers \\ --3-end c-primers \\ --adapters no-adapters \\ --report Multi_TRA_10ng_3.report: = \\ fastq/Multi_TRB_FS115_1_S153_R1_001.fastq.gz \\ fastq/Multi_TRB_FS115_1_S153_R2_001.fastq.gz \\ results/Multi_TRB_FS115_1 The meaning of these options is the following. --species is set to hsa for Homo Sapiens . --starting-material is set to rna and corresponds to VTranscriptWithout5UTRWithP alignment feature for V-gene ( see Gene features and anchor points for details) --receptor-type tcr . It affects the choice of alignment algorithms. --umi-pattern-name MiLaboratoriesMultiplexTCR specifies a build in UMI pattern for MiLaboratories RNA Multiplex TCR repertoire kit. This name stands for the following pattern: \"^N{0:2}tggtatcaacgcagagt(UMI:NNNNTNNNNTNNNN)N{21}(R1:*) \\ ^N{42}(R2:*)\" . It specifies the position of UMI barcode and also defines the rules for primer trimming, thus we can treat the data as if no primer sequences present in it. MiXCR provides a powerful regex-like language allowing to specify almost arbitrary barcode structure. --5-end is set to no-v-primers because we used a umi-pattern that ignores part of the sequence where primers are located. This choice leads to a global alignment algorithm to align the left bound of V. --3-end-primers is set to c-primers since the primer used for library preparation is complimentary to C-region of TCR genes. This leads to a global alignment algorithms to align the right bound of J and a local alignment at the right bound of C gene. --adapers no-adapters because primer sequences were cut off by umi-pattern . Running the command above will generate the following files: > ls result/ # human-readable reports Multi_TRB_FS115_1.report # raw alignments (highly compressed binary file) Multi_TRB_FS115_1.vdjca # alignments with corrected UMI barcode sequences Multi_TRB_FS115_1.corrected.vdjca # TCR\u03b1 & TCR\u03b2 CDR3 clonotypes (highly compressed binary file) Multi_TRB_FS115_1.clns # TCR\u03b1 & TCR\u03b2 CDR3 clonotypes exported in tab-delimited txt Multi_TRB_FS115_1.clonotypes.TRA.tsv Multi_TRB_FS115_1.clonotypes.TRB.tsv Multi_TRB_FS115_1.clonotypes.TRD.tsv Multi_TRB_FS115_1.clonotypes.TRG.tsv Clonotype tables is the main result of the upstream analysis. They are stored in a highly compressed and efficient binary .clns file and can be exported in many ways: detailed tab-delimited format with dozens of customizable columns, human readable for manual inspection, and AIRR format suitable for many scientific downstream analysis tools. By default, MiXCR exports clonotypes in a tab-delimited format separately for each immunological chain. In order to run the analysis for all samples in the project on Linux we can for example use GNU Parallel in the following way: > ls /fastq/*R1* | \\ parallel -j2 \\ ' mixcr analyze amplicon \\ --species hsa \\ --starting-material rna \\ --receptor-type tcr \\ --umi-pattern-name MiLaboratoriesMultiplexTCR \\ --5-end no-v-primers \\ --3-end c-primers \\ --adapters no-adapters \\ --report {= s:.*/:results/: ; s:_S.*:.report: =} \\ {} \\ {= s:R1:R2: =} \\ {= s:.*/:results/: ; s:_S.*:: =}","title":"One-line solution"},{"location":"mixcr/guides/milaboratories-human-tcr-rna-multi/#under-the-hood-pipeline","text":"Under the hood, mixcr analyze amplicon executes the following pipeline of MiXCR actions:","title":"Under the hood pipeline"},{"location":"mixcr/guides/milaboratories-human-tcr-rna-multi/#align","text":"Performs : alignment of raw sequencing reads against reference database of V-, D-, J- and C- gene segments pattern matching of tag pattern sequence and extraction of barcodes > mixcr align \\ --species mmu \\ --tag-pattern '^N{0:2}tggtatcaacgcagagt(UMI:NNNNTNNNNTNNNN)N{21}(R1:*) \\ ^N{42}(R2:*)' \\ --report result/Multi_TRA_10ng_3.report \\ --json-report result/Multi_TRA_10ng_3.report.json \\ -OvParameters.geneFeatureToAlign = \"VTranscriptWithout5UTRWithP\" \\ -OvParameters.parameters.floatingLeftBound = false \\ -OjParameters.parameters.floatingRightBound = false \\ -OcParameters.parameters.floatingRightBound = true \\ fastq/Multi_TRB_FS115_1_S153_R1_001.fastq.gz \\ fastq/Multi_TRB_FS115_1_S153_R1_001.fastq.gz \\ results/Multi_TRB_FS115_1.vdjca Options --report and --json-report are specified here explicitly. Since we start from RNA data we use VTranscriptWithout5UTRWithP for the alignment of V segments (see Gene features and anchor points ). Because we cut off the primers in V segment, we use global alignment on the left bound of V and since we have primers on C segment, we use global alignment for J and local on the right bound of C. This behavior is defined by the following options: -OvParameters.parameters.floatingLeftBound=false , -OjParameters.parameters.floatingRightBound=false , -OcParameters.parameters.floatingRightBound=true . This step utilizes all available CPUs and scales perfectly. When there are a lot of CPUs, the only limiting factor is the speed of disk I/O. To limit the number of used CPUs one can pass --threads N option.","title":"align"},{"location":"mixcr/guides/milaboratories-human-tcr-rna-multi/#correctandsorttags","text":"Corrects artificial diversity caused by sequencing and PCR errors inside barcode sequences. This step essential if any barcodes (UMI, Cel, etc.) present in the sample. In the considered example project it corrects only sequences of UMIs. > mixcr correctAndSortTags \\ --report results/Multi_TRB_FS115_1.report \\ --json-report results/Multi_TRB_FS115_1.report.json \\ Multi_TRB_FS115_1.vdjca \\ Multi_TRB_FS115_1.corrected.vdjca Options --report and --json-report are specified here explicitly so that the report files will be appended with the barcode correction report.","title":"correctAndSortTags"},{"location":"mixcr/guides/milaboratories-human-tcr-rna-multi/#assemble","text":"Assembles clonotypes and applies several layers of errors correction: assembly consensus CDR3 sequence for each UMI quality-awared correction for sequencing errors clustering to correct for PCR errors, which still may present even in the case of UMI data, since a error may be introduced e.g. on the first reverse-transcription cycle > mixcr assemble \\ --report results/Multi_TRA_10ng_3.report \\ --json-report results/Multi_TRA_10ng_3.report.json \\ Multi_TRB_FS115_1.corrected.vdjca \\ Multi_TRB_FS115_1.clns Options --report and --json-report are specified here explicitly so that the report files will be appended with assembly report.","title":"assemble"},{"location":"mixcr/guides/milaboratories-human-tcr-rna-multi/#exportclones","text":"Finally, to export clonotype tables in tabular form exportClones is used: > mixcr exportClones \\ -p full \\ -uniqueTagCount UMI \\ Multi_TRB_FS115_1.clns \\ Multi_TRB_FS115_1.tsv Here -p full is a shorthand for the full preset of common export columns and -uniqueTagCount UMI adds a column with the UMI count for each clone.","title":"exportClones"},{"location":"mixcr/guides/milaboratories-human-tcr-rna-multi/#quality-control","text":"Now when the upstream analysis is finished we can move on to quality control. First lets look at the alignment report plot. # obtain alignment quality control > mixcr exportQc align \\ result/*.vdjca \\ alignQc.pdf From this plot we can tell that all samples have high alignment rate, more than 90% of reads have been successfully aligned to the reference sequences and CDR3 has been established. Now we can check chain distribution plot: # obtain alignment quality control > mixcr exportQc chainUsage \\ result/*.vdjca \\ alignQc.pdf Here we can see that no cross-contamination has occurred. TCR alpha samples consist only of TRA clones, and TCR betta only of TRB.","title":"Quality control"},{"location":"mixcr/guides/nebnext-bcr/","text":"NEBNext\u00ae Immune Sequencing Here we will discuss how to process BCR cDNA libraries obtained with NEBNext\u00ae Immune Sequencing Kit. Data libraries This tutorial uses the data from the following publication: Germinal centre-driven maturation of B cell response to mRNA vaccination Wooseob, et al, Nature volume 604, pages141\u2013145 (2022) doi:10.1038/s41586-022-04527-1 The data includes samples taken from 8 patients before and several time points after receiving SARS-CoV-2 mRNA vaccine. Samples include: germinal center B cells from lymph node, plasmablasts from lymph node, plasma cells from bone marrow and memory B cells from blood. Sorted GC B cells and LNPCs from FNA, enriched BMPCs from bone marrow or enriched MBCs from PBMCs from blood were used for library preparation for bulk BCR sequecning. Circulating MBCs were magnetically isolated by first staining with IgD-PE and MojoSort anti-PE Nanobeads (BioLegend), and then processing with the EasySep Human B Cell Isolation Kit (StemCell Technologies) to negatively enrich IgDlo B cells. RNA was prepared from each sample using the RNeasy Plus Micro kit (Qiagen). Libraries were prepared using the NEBNext Immune Sequencing Kit for Human (New England Biolabs) according to the manufacturer\u2019s instructions without modifications. Only heavy chain primers were used. High-throughput paired-end sequencing was performed on the Illumina MiSeq platform, 325 cycles for read 1 and 275 cycles for read 2. On the scheme bellow you can see structure of cDNA library. UMI is located in the first 17 bp of R2, followed by 7 to 10 bp occurred in the process of template switching (TS). The set of primers used in NEBNext\u00ae Immune Sequencing Kit Human Mouse >Human-IGHM GAATTCTCACAGGAGACGAGG >Human-IGHD TGTCTGCACCCTGATATGATGG >Human-IGHA GGGTGCTGYMGAGGCTCAG >Human-IGHE TTGCAGCAGCGGGTCAAGG >Human-IGHG CCAGGGGGAAGACSGATG >Human-IGK GACAGATGGTGCAGCCACAG >Human-IGL AGGGYGGGAACAGAGTGAC >Human-TRA CACGGCAGGGTCAGGGTTC >Human-TRB CGACCTCGGGTGGGAACAC >Mus-p5-IgGb CCAGGGACCAAGGGATAGAC >Mus-p5-IgGa CCAGTGGATAGACHGATGGGG >Mus-p5-IgE GCTTTAAGGGGTAGAGCTGAG >Mus-p5-IgD CTCTGAGAGGAGGAACATGTCA >Mus-p5-IgM GGGAAGACATTTGGGAAGGAC >Mus-p5-IgA GAATCAGGCAGCCGATTATCAC >Mus-p5-IgK AGATGGATGCAGTTGGTGCA >Mus-p5-IgL TCCTCAGAGGAAGGTGGAAAC >Mus-p5-TRAC ATCTTTTAACTGGTACACAGCAGG >Mus-p5-TRBC CAAGGAGACCTTGGGTGGAG >Mus-p5-TRGC AAGGAAGAAAAATAGTGGGCTTGG >Mus-p5-TRDC CATGATGAAAACAGATGGTTTGGC All data may be downloaded directly from SRA using e.g. SRA Explorer : Use this script to download the full data set with the proper filenames for the tutorial: #!/usr/bin/env bash curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/032/SRR17709532/SRR17709532_1.fastq.gz -o 13_d60_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/032/SRR17709532/SRR17709532_2.fastq.gz -o 13_d60_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/033/SRR17709533/SRR17709533_1.fastq.gz -o 07_d110_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/033/SRR17709533/SRR17709533_2.fastq.gz -o 07_d110_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/034/SRR17709534/SRR17709534_1.fastq.gz -o 07_d60_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/034/SRR17709534/SRR17709534_2.fastq.gz -o 07_d60_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/036/SRR17709536/SRR17709536_1.fastq.gz -o 01a_d60_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/036/SRR17709536/SRR17709536_2.fastq.gz -o 01a_d60_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/031/SRR17709531/SRR17709531_1.fastq.gz -o 13_d110_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/031/SRR17709531/SRR17709531_2.fastq.gz -o 13_d110_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/035/SRR17709535/SRR17709535_1.fastq.gz -o 01a_d110_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/035/SRR17709535/SRR17709535_2.fastq.gz -o 01a_d110_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/030/SRR17709530/SRR17709530_1.fastq.gz -o 13_d60_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/030/SRR17709530/SRR17709530_2.fastq.gz -o 13_d60_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/029/SRR17709529/SRR17709529_1.fastq.gz -o 13_d110_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/029/SRR17709529/SRR17709529_2.fastq.gz -o 13_d110_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/027/SRR17709527/SRR17709527_1.fastq.gz -o 22_d110_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/027/SRR17709527/SRR17709527_2.fastq.gz -o 22_d110_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/028/SRR17709528/SRR17709528_1.fastq.gz -o 22_d60_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/028/SRR17709528/SRR17709528_2.fastq.gz -o 22_d60_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/026/SRR17709526/SRR17709526_1.fastq.gz -o 22_d60_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/026/SRR17709526/SRR17709526_2.fastq.gz -o 22_d60_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/025/SRR17709525/SRR17709525_1.fastq.gz -o 22_d110_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/025/SRR17709525/SRR17709525_2.fastq.gz -o 22_d110_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/024/SRR17709524/SRR17709524_1.fastq.gz -o 01a_d60_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/024/SRR17709524/SRR17709524_2.fastq.gz -o 01a_d60_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/022/SRR17709522/SRR17709522_1.fastq.gz -o 20_d110_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/022/SRR17709522/SRR17709522_2.fastq.gz -o 20_d110_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/023/SRR17709523/SRR17709523_1.fastq.gz -o 20_d60_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/023/SRR17709523/SRR17709523_2.fastq.gz -o 20_d60_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/021/SRR17709521/SRR17709521_1.fastq.gz -o 20_d60_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/021/SRR17709521/SRR17709521_2.fastq.gz -o 20_d60_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/020/SRR17709520/SRR17709520_1.fastq.gz -o 20_d110_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/020/SRR17709520/SRR17709520_2.fastq.gz -o 20_d110_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/019/SRR17709519/SRR17709519_1.fastq.gz -o 02a_d35_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/019/SRR17709519/SRR17709519_2.fastq.gz -o 02a_d35_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/018/SRR17709518/SRR17709518_1.fastq.gz -o 02a_d60_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/018/SRR17709518/SRR17709518_2.fastq.gz -o 02a_d60_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/017/SRR17709517/SRR17709517_1.fastq.gz -o 02a_d35_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/017/SRR17709517/SRR17709517_2.fastq.gz -o 02a_d35_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/015/SRR17709515/SRR17709515_1.fastq.gz -o 02a_d35_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/015/SRR17709515/SRR17709515_2.fastq.gz -o 02a_d35_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/016/SRR17709516/SRR17709516_1.fastq.gz -o 02a_d60_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/016/SRR17709516/SRR17709516_2.fastq.gz -o 02a_d60_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/014/SRR17709514/SRR17709514_1.fastq.gz -o 02a_d60_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/014/SRR17709514/SRR17709514_2.fastq.gz -o 02a_d60_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/013/SRR17709513/SRR17709513_1.fastq.gz -o 01a_d110_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/013/SRR17709513/SRR17709513_2.fastq.gz -o 01a_d110_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/012/SRR17709512/SRR17709512_1.fastq.gz -o 02a_d35_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/012/SRR17709512/SRR17709512_2.fastq.gz -o 02a_d35_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/011/SRR17709511/SRR17709511_1.fastq.gz -o 02a_d60_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/011/SRR17709511/SRR17709511_2.fastq.gz -o 02a_d60_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/009/SRR17709509/SRR17709509_1.fastq.gz -o 10_d60_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/009/SRR17709509/SRR17709509_2.fastq.gz -o 10_d60_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/010/SRR17709510/SRR17709510_1.fastq.gz -o 10_d60_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/010/SRR17709510/SRR17709510_2.fastq.gz -o 10_d60_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/008/SRR17709508/SRR17709508_1.fastq.gz -o 10_d110_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/008/SRR17709508/SRR17709508_2.fastq.gz -o 10_d110_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/007/SRR17709507/SRR17709507_1.fastq.gz -o 10_d110_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/007/SRR17709507/SRR17709507_2.fastq.gz -o 10_d110_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/006/SRR17709506/SRR17709506_1.fastq.gz -o 10_d60_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/006/SRR17709506/SRR17709506_2.fastq.gz -o 10_d60_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/005/SRR17709505/SRR17709505_1.fastq.gz -o 10_d60_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/005/SRR17709505/SRR17709505_2.fastq.gz -o 10_d60_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/003/SRR17709503/SRR17709503_1.fastq.gz -o 10_d110_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/003/SRR17709503/SRR17709503_2.fastq.gz -o 10_d110_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/004/SRR17709504/SRR17709504_1.fastq.gz -o 10_d110_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/004/SRR17709504/SRR17709504_2.fastq.gz -o 10_d110_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/002/SRR17709502/SRR17709502_1.fastq.gz -o 04_d28_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/002/SRR17709502/SRR17709502_2.fastq.gz -o 04_d28_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/001/SRR17709501/SRR17709501_1.fastq.gz -o 01a_d201_bone_marrow_bone_marrow_plasma_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/001/SRR17709501/SRR17709501_2.fastq.gz -o 01a_d201_bone_marrow_bone_marrow_plasma_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/000/SRR17709500/SRR17709500_1.fastq.gz -o 01a_d201_bone_marrow_bone_marrow_plasma_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/000/SRR17709500/SRR17709500_2.fastq.gz -o 01a_d201_bone_marrow_bone_marrow_plasma_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/099/SRR17709499/SRR17709499_1.fastq.gz -o 02a_d201_bone_marrow_bone_marrow_plasma_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/099/SRR17709499/SRR17709499_2.fastq.gz -o 02a_d201_bone_marrow_bone_marrow_plasma_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/098/SRR17709498/SRR17709498_1.fastq.gz -o 04_d201_bone_marrow_bone_marrow_plasma_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/098/SRR17709498/SRR17709498_2.fastq.gz -o 04_d201_bone_marrow_bone_marrow_plasma_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/096/SRR17709496/SRR17709496_1.fastq.gz -o 13_d201_bone_marrow_bone_marrow_plasma_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/096/SRR17709496/SRR17709496_2.fastq.gz -o 13_d201_bone_marrow_bone_marrow_plasma_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/097/SRR17709497/SRR17709497_1.fastq.gz -o 07_d201_bone_marrow_bone_marrow_plasma_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/097/SRR17709497/SRR17709497_2.fastq.gz -o 07_d201_bone_marrow_bone_marrow_plasma_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/095/SRR17709495/SRR17709495_1.fastq.gz -o 20_d201_bone_marrow_bone_marrow_plasma_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/095/SRR17709495/SRR17709495_2.fastq.gz -o 20_d201_bone_marrow_bone_marrow_plasma_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/094/SRR17709494/SRR17709494_1.fastq.gz -o 22_d201_bone_marrow_bone_marrow_plasma_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/094/SRR17709494/SRR17709494_2.fastq.gz -o 22_d201_bone_marrow_bone_marrow_plasma_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/092/SRR17709492/SRR17709492_1.fastq.gz -o 04_d201_d208_blood_memory_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/092/SRR17709492/SRR17709492_2.fastq.gz -o 04_d201_d208_blood_memory_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/093/SRR17709493/SRR17709493_1.fastq.gz -o 02a_d201_blood_memory_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/093/SRR17709493/SRR17709493_2.fastq.gz -o 02a_d201_blood_memory_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/091/SRR17709491/SRR17709491_1.fastq.gz -o 04_d60_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/091/SRR17709491/SRR17709491_2.fastq.gz -o 04_d60_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/089/SRR17709489/SRR17709489_1.fastq.gz -o 10_d201_blood_memory_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/089/SRR17709489/SRR17709489_2.fastq.gz -o 10_d201_blood_memory_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/090/SRR17709490/SRR17709490_1.fastq.gz -o 07_d201_blood_memory_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/090/SRR17709490/SRR17709490_2.fastq.gz -o 07_d201_blood_memory_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/088/SRR17709488/SRR17709488_1.fastq.gz -o 13_d201_blood_memory_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/088/SRR17709488/SRR17709488_2.fastq.gz -o 13_d201_blood_memory_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/086/SRR17709486/SRR17709486_1.fastq.gz -o 22_d201_blood_memory_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/086/SRR17709486/SRR17709486_2.fastq.gz -o 22_d201_blood_memory_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/087/SRR17709487/SRR17709487_1.fastq.gz -o 20_d201_blood_memory_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/087/SRR17709487/SRR17709487_2.fastq.gz -o 20_d201_blood_memory_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/085/SRR17709485/SRR17709485_1.fastq.gz -o 10_d280_bone_marrow_bone_marrow_plasma_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/085/SRR17709485/SRR17709485_2.fastq.gz -o 10_d280_bone_marrow_bone_marrow_plasma_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/084/SRR17709484/SRR17709484_1.fastq.gz -o 20_d280_bone_marrow_bone_marrow_plasma_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/084/SRR17709484/SRR17709484_2.fastq.gz -o 20_d280_bone_marrow_bone_marrow_plasma_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/083/SRR17709483/SRR17709483_1.fastq.gz -o 04_d28_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/083/SRR17709483/SRR17709483_2.fastq.gz -o 04_d28_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/082/SRR17709482/SRR17709482_1.fastq.gz -o 04_d60_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/082/SRR17709482/SRR17709482_2.fastq.gz -o 04_d60_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/080/SRR17709480/SRR17709480_1.fastq.gz -o 07_d110_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/080/SRR17709480/SRR17709480_2.fastq.gz -o 07_d110_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/081/SRR17709481/SRR17709481_1.fastq.gz -o 07_d60_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/081/SRR17709481/SRR17709481_2.fastq.gz -o 07_d60_lymph_node_germinal_center_B_cell_R2.fastq.gz The project contains 57 paired FASTQ files. Each file name encodes the information about donor, time-point relative to vaccination, tissue of origin and cell population. For example for the first file from the above listing: 13_d60_lymph_node_germinal_center_B_cell_R1.fastq.gz - 13 - donor id - d60 - 60 days after vaccination - lymph node - tissue - germinal centerB cell - cell population Upstream analysis The most straightforward way to get clonotype tables is to use a universal mixcr analyze command. According to the library preparation protocol, the library does not have any V primers on 5'-end and has C primers on 3', so the command for a single sample is the following: > mixcr analyze amplicon \\ --species hsa \\ --starting-material rna \\ --receptor-type bcr \\ --5-end no-v-primers \\ --3-end c-primers \\ --adapters adapters-present \\ --umi-pattern '^(R1:*)\\^(UMI:N{17})(R2:N{*})' \\ fastq/13_d60_lymph_node_germinal_center_B_cell_R1.fastq.gz \\ fastq/13_d60_lymph_node_germinal_center_B_cell_R2.fastq.gz \\ results/13_d60_lymph_node_germinal_center_B_cell The meaning of these options is the following. --species is set to hsa for Homo Sapience --starting-material RNA or DNA. It affects the choice of V gene region which will be used as target in align step ( vParameters.geneFeatureToAlign , see align documentation ): rna corresponds to the VTranscriptWithout5UTRWithP and dna to VGeneWithP (see Gene features and anchor points for details) --receptor-type TCR or BCR. It affects the choice of underlying alignment algorithms: MiXCR uses fundamentally different algorithms for TCRs and BCRs because BCRs have somatic hypermutations and long indels. --5-end is set to no-v-primers , because the library was obtained using 5'RACE. This leads to a global alignment algorithm on the left bound of V gene. --3-end-primers is set c-primers according to the cDNA library preparation protocol. This leads to a global alignment algorithm to align the right bound of C gene segment. --adapers is set to adapters-present because primer sequence is present in the data and has not been cut prior to. Presence or absence of adapter sequences results in the choice between local and global alignment algorithms on the edges of the target sequence. --umi-pattern is used to specify UMI pattern for the library. MiXCR provides a powerful regex-like language allowing to specify almost arbitrary barcode structure. Here we use ^(R1:*)\\^(UMI:N{17})(R2:N{*}) pattern to specify that R1 should be used as is, UMI spans the first 17 letters of R2 and the rest of R2 is used as a paired read. Running the command above will generate the following files: > ls result/ # human-readable reports 13_d60_lymph_node_germinal_center_B_cell.report # raw alignments (highly compressed binary file) 13_d60_lymph_node_germinal_center_B_cell.vdjca # alignments with corrected UMI barcode sequences 13_d60_lymph_node_germinal_center_B_cell.corrected.vdjca # IGH, IGK and IGL CDR3 clonotypes (highly compressed binary file) 13_d60_lymph_node_germinal_center_B_cell.clns # IGH, IGK and IGL CDR3 clonotypes exported in tab-delimited txt 13_d60_lymph_node_germinal_center_B_cell.clonotypes.IGH.tsv 13_d60_lymph_node_germinal_center_B_cell.clonotypes.IGK.tsv 13_d60_lymph_node_germinal_center_B_cell.clonotypes.IGL.tsv Obtained *.tsv files can be used for manual examination. *.clns files can be used for downstream analysis using mixcr postanalisis . By default, MiXCR exports clonotypes in a tab-delimited format separately for each immunological chain. In order to run the analysis for all samples in the project on Linux we can use GNU Parallel in the following way: > ls /fastq/*_R1* | \\ parallel -j2 \\ 'mixcr analyze amplicon \\ --species hsa \\ --starting-material rna \\ --receptor-type bcr \\ --5-end no-v-primers \\ --3-end c-primers \\ --adapters adapters-present \\ --umi-pattern \"^(R1:*)\\^(UMI:N{\"17\"})(R2:*)\" \\ {} \\ {=s:R1:R2:=} \\ {=s:.*/:results:;s:_R1.*::=}' Under the hood pipeline: Under the hood the command above actually executes the following pipeline: align Alignment of raw sequencing reads against reference database of V-, D-, J- and C- gene segments. # align raw reads > mixcr align -s hsa \\ -p kAligner2 \\ -OvParameters.geneFeatureToAlign = \"VTranscriptWithout5UTRWithP\" \\ -OvParameters.parameters.floatingLeftBound = false \\ -OjParameters.parameters.floatingRightBound = false \\ -OcParameters.parameters.floatingRightBound = true \\ --report results/13_d60_lymph_node_germinal_center_B_cell.report \\ --tag-pattern '^(R1:N{*})\\^(UMI:N{17})(R2:N{*})' \\ fastq/13_d60_lymph_node_germinal_center_B_cell_R1.fastq.gz \\ fastq/13_d60_lymph_node_germinal_center_B_cell_R2.fastq.gz \\ 13_d60_lymph_node_germinal_center_B_cell.vdjca Option --report is specified here explicitly. - -p kAligner2 specifies an BCR aligner. - -OvParameters.parameters.floatingLeftBound=false -OjParameters.parameters.floatingRightBound=false are set to false because no V or J primers were used in cDNA library preparation. This results in a global aligning algorithm (instead of a local one) on the left bound of V gene and right bound of J gene. - -OcParameters.parameters.floatingRightBound=true is set to true because C primers sequence is present on the 3'end of the cDNA library. Thus, local alignment algorithm will be used on the right bound of C gene. correctAndSortTags Corrects sequencing and PCR errors inside barcode sequences. This step is essential to correct artificial diversity caused by errors in barcodes. > mixcr correctAndSortTags \\ --report 13_d60_lymph_node_germinal_center_B_cell.report \\ --json-report 13_d60_lymph_node_germinal_center_B_cell.report.json \\ 13_d60_lymph_node_germinal_center_B_cell.vdjca \\ 13_d60_lymph_node_germinal_center_B_cell.corrected.vdjca assemble Assembles alignments into clonotypes and applies several layers of errors correction(ex. quality-awared correction for sequencing errors, clustering to correct for PCR errors). Check mixcr assemble for more information. # assemble CDR3 clonotypes > mixcr assemble \\ -OseparateByV = true \\ -OseparateByJ = true \\ --report 13_d60_lymph_node_germinal_center_B_cell.corrected.report \\ 13_d60_lymph_node_germinal_center_B_cell.corrected.vdjca \\ 13_d60_lymph_node_germinal_center_B_cell.corrected.clns export Exports clonotypes from .clns file into human-readable tables. # export to tsv > mixcr exportClones \\ -p full \\ 13_d60_lymph_node_germinal_center_B_cell.corrected.clns \\ 13_d60_lymph_node_germinal_center_B_cell.corrected.tsv Here -p full defines the full preset of common export columns. Check mixcr export for more information. Quality control Now when we have all files processed lets perform Quality Control. That can be easily done using mixcr exportQc function. # obtain alignment quality control > mixcr exportQc align \\ result/*.vdjca \\ alignQc.pdf # obtain chain usage plot > mixcr exportQc chainUsage \\ result/*.vdjca \\ usageQc.pdf First let's examine the alignment quality control plot. Most of the samples have a height successful alignment score. But samples that come from blood memory B cells clearly have a lower percentage of aligned reads, and the major reason for that is the lack of immune receptor sequences. That might be due to some issues during sample preparation of this particular kind. It is recommended to realign one of these samples and save not aligned reads into separate file for manual inspection. That can be done with the following command: mixcr align \\ -p kAligner2 \\ -OvParameters.geneFeatureToAlign = \"VTranscriptWithout5UTRWithP\" \\ -OvParameters.parameters.floatingLeftBound = false \\ -OjParameters.parameters.floatingRightBound = false \\ -OcParameters.parameters.floatingRightBound = true \\ --report 22_d201_blood_memory_B_cell.debug.report \\ --tag-pattern '^(R1:N{*})\\^(UMI:N{17})(R2:N{*})' \\ -OvParameters.geneFeatureToAlign = VTranscriptWithP \\ -OvParameters.parameters.floatingLeftBound = true \\ -OjParameters.parameters.floatingRightBound = false \\ -OcParameters.parameters.floatingRightBound = true \\ --not-aligned-R1 22_d201_blood_memory_B_cell_R1.fastq \\ --not-aligned-R2 22_d201_blood_memory_B_cell.fastq \\ fastq/22_d201_blood_memory_B_cell_R1.fastq.gz fastq/22_d201_blood_memory_B_cell_R2.fastq.gz \\ 22_d201_blood_memory_B_cell.debug.vdjca If we look at the chain usage plot, we see, as expected, that the samples are almost entirely consist of IGH chains, since only heavy BCR chains we sequenced. Advanced parameters tuning In the example above, we have assembled clones by a default CDR3 feature. But NEBNext\u00ae Immune Sequencing Kit, as we can tell from the library structure scheme covers the whole sequence of V and J genes, because it is a 5'RACE based protocol. And not only that, but it also uses a set of primers which allows isotype differentiation. To reveal the full potential of this kit (separate clones by hypermutations and isotypes) we will modify the feature used to assemble clones, and we will also use C gene to separate clones by isotypes. That can be done by modifying mixcr analyze amplicon parameters: > mixcr analyze amplicon \\ --species hsa \\ --starting-material rna \\ --receptor-type bcr \\ --5-end no-v-primers \\ --3-end c-primers \\ --adapters adapters-present \\ --umi-pattern '^(R1:*)\\^(UMI:N{17})(R2:N{*})' \\ --assemble \"-OassemblingFeatures={FR1Begin:FR4End} -OseparateByC=true\" \\ fastq/13_d60_lymph_node_germinal_center_B_cell_R1.fastq.gz \\ fastq/13_d60_lymph_node_germinal_center_B_cell_R2.fastq.gz \\ results/13_d60_lymph_node_germinal_center_B_cell Under the hood this adjustment will pass extra arguments ( -OassemblingFeatures={FR1Begin:FR4End} , -OseparateByC=true ) to mixcr assemle step.","title":"NEBNext Immune Sequencing"},{"location":"mixcr/guides/nebnext-bcr/#nebnext-immune-sequencing","text":"Here we will discuss how to process BCR cDNA libraries obtained with NEBNext\u00ae Immune Sequencing Kit.","title":"NEBNext\u00ae Immune Sequencing"},{"location":"mixcr/guides/nebnext-bcr/#data-libraries","text":"This tutorial uses the data from the following publication: Germinal centre-driven maturation of B cell response to mRNA vaccination Wooseob, et al, Nature volume 604, pages141\u2013145 (2022) doi:10.1038/s41586-022-04527-1 The data includes samples taken from 8 patients before and several time points after receiving SARS-CoV-2 mRNA vaccine. Samples include: germinal center B cells from lymph node, plasmablasts from lymph node, plasma cells from bone marrow and memory B cells from blood. Sorted GC B cells and LNPCs from FNA, enriched BMPCs from bone marrow or enriched MBCs from PBMCs from blood were used for library preparation for bulk BCR sequecning. Circulating MBCs were magnetically isolated by first staining with IgD-PE and MojoSort anti-PE Nanobeads (BioLegend), and then processing with the EasySep Human B Cell Isolation Kit (StemCell Technologies) to negatively enrich IgDlo B cells. RNA was prepared from each sample using the RNeasy Plus Micro kit (Qiagen). Libraries were prepared using the NEBNext Immune Sequencing Kit for Human (New England Biolabs) according to the manufacturer\u2019s instructions without modifications. Only heavy chain primers were used. High-throughput paired-end sequencing was performed on the Illumina MiSeq platform, 325 cycles for read 1 and 275 cycles for read 2. On the scheme bellow you can see structure of cDNA library. UMI is located in the first 17 bp of R2, followed by 7 to 10 bp occurred in the process of template switching (TS). The set of primers used in NEBNext\u00ae Immune Sequencing Kit Human Mouse >Human-IGHM GAATTCTCACAGGAGACGAGG >Human-IGHD TGTCTGCACCCTGATATGATGG >Human-IGHA GGGTGCTGYMGAGGCTCAG >Human-IGHE TTGCAGCAGCGGGTCAAGG >Human-IGHG CCAGGGGGAAGACSGATG >Human-IGK GACAGATGGTGCAGCCACAG >Human-IGL AGGGYGGGAACAGAGTGAC >Human-TRA CACGGCAGGGTCAGGGTTC >Human-TRB CGACCTCGGGTGGGAACAC >Mus-p5-IgGb CCAGGGACCAAGGGATAGAC >Mus-p5-IgGa CCAGTGGATAGACHGATGGGG >Mus-p5-IgE GCTTTAAGGGGTAGAGCTGAG >Mus-p5-IgD CTCTGAGAGGAGGAACATGTCA >Mus-p5-IgM GGGAAGACATTTGGGAAGGAC >Mus-p5-IgA GAATCAGGCAGCCGATTATCAC >Mus-p5-IgK AGATGGATGCAGTTGGTGCA >Mus-p5-IgL TCCTCAGAGGAAGGTGGAAAC >Mus-p5-TRAC ATCTTTTAACTGGTACACAGCAGG >Mus-p5-TRBC CAAGGAGACCTTGGGTGGAG >Mus-p5-TRGC AAGGAAGAAAAATAGTGGGCTTGG >Mus-p5-TRDC CATGATGAAAACAGATGGTTTGGC All data may be downloaded directly from SRA using e.g. SRA Explorer : Use this script to download the full data set with the proper filenames for the tutorial: #!/usr/bin/env bash curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/032/SRR17709532/SRR17709532_1.fastq.gz -o 13_d60_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/032/SRR17709532/SRR17709532_2.fastq.gz -o 13_d60_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/033/SRR17709533/SRR17709533_1.fastq.gz -o 07_d110_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/033/SRR17709533/SRR17709533_2.fastq.gz -o 07_d110_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/034/SRR17709534/SRR17709534_1.fastq.gz -o 07_d60_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/034/SRR17709534/SRR17709534_2.fastq.gz -o 07_d60_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/036/SRR17709536/SRR17709536_1.fastq.gz -o 01a_d60_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/036/SRR17709536/SRR17709536_2.fastq.gz -o 01a_d60_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/031/SRR17709531/SRR17709531_1.fastq.gz -o 13_d110_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/031/SRR17709531/SRR17709531_2.fastq.gz -o 13_d110_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/035/SRR17709535/SRR17709535_1.fastq.gz -o 01a_d110_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/035/SRR17709535/SRR17709535_2.fastq.gz -o 01a_d110_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/030/SRR17709530/SRR17709530_1.fastq.gz -o 13_d60_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/030/SRR17709530/SRR17709530_2.fastq.gz -o 13_d60_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/029/SRR17709529/SRR17709529_1.fastq.gz -o 13_d110_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/029/SRR17709529/SRR17709529_2.fastq.gz -o 13_d110_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/027/SRR17709527/SRR17709527_1.fastq.gz -o 22_d110_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/027/SRR17709527/SRR17709527_2.fastq.gz -o 22_d110_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/028/SRR17709528/SRR17709528_1.fastq.gz -o 22_d60_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/028/SRR17709528/SRR17709528_2.fastq.gz -o 22_d60_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/026/SRR17709526/SRR17709526_1.fastq.gz -o 22_d60_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/026/SRR17709526/SRR17709526_2.fastq.gz -o 22_d60_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/025/SRR17709525/SRR17709525_1.fastq.gz -o 22_d110_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/025/SRR17709525/SRR17709525_2.fastq.gz -o 22_d110_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/024/SRR17709524/SRR17709524_1.fastq.gz -o 01a_d60_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/024/SRR17709524/SRR17709524_2.fastq.gz -o 01a_d60_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/022/SRR17709522/SRR17709522_1.fastq.gz -o 20_d110_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/022/SRR17709522/SRR17709522_2.fastq.gz -o 20_d110_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/023/SRR17709523/SRR17709523_1.fastq.gz -o 20_d60_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/023/SRR17709523/SRR17709523_2.fastq.gz -o 20_d60_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/021/SRR17709521/SRR17709521_1.fastq.gz -o 20_d60_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/021/SRR17709521/SRR17709521_2.fastq.gz -o 20_d60_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/020/SRR17709520/SRR17709520_1.fastq.gz -o 20_d110_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/020/SRR17709520/SRR17709520_2.fastq.gz -o 20_d110_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/019/SRR17709519/SRR17709519_1.fastq.gz -o 02a_d35_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/019/SRR17709519/SRR17709519_2.fastq.gz -o 02a_d35_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/018/SRR17709518/SRR17709518_1.fastq.gz -o 02a_d60_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/018/SRR17709518/SRR17709518_2.fastq.gz -o 02a_d60_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/017/SRR17709517/SRR17709517_1.fastq.gz -o 02a_d35_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/017/SRR17709517/SRR17709517_2.fastq.gz -o 02a_d35_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/015/SRR17709515/SRR17709515_1.fastq.gz -o 02a_d35_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/015/SRR17709515/SRR17709515_2.fastq.gz -o 02a_d35_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/016/SRR17709516/SRR17709516_1.fastq.gz -o 02a_d60_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/016/SRR17709516/SRR17709516_2.fastq.gz -o 02a_d60_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/014/SRR17709514/SRR17709514_1.fastq.gz -o 02a_d60_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/014/SRR17709514/SRR17709514_2.fastq.gz -o 02a_d60_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/013/SRR17709513/SRR17709513_1.fastq.gz -o 01a_d110_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/013/SRR17709513/SRR17709513_2.fastq.gz -o 01a_d110_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/012/SRR17709512/SRR17709512_1.fastq.gz -o 02a_d35_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/012/SRR17709512/SRR17709512_2.fastq.gz -o 02a_d35_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/011/SRR17709511/SRR17709511_1.fastq.gz -o 02a_d60_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/011/SRR17709511/SRR17709511_2.fastq.gz -o 02a_d60_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/009/SRR17709509/SRR17709509_1.fastq.gz -o 10_d60_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/009/SRR17709509/SRR17709509_2.fastq.gz -o 10_d60_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/010/SRR17709510/SRR17709510_1.fastq.gz -o 10_d60_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/010/SRR17709510/SRR17709510_2.fastq.gz -o 10_d60_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/008/SRR17709508/SRR17709508_1.fastq.gz -o 10_d110_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/008/SRR17709508/SRR17709508_2.fastq.gz -o 10_d110_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/007/SRR17709507/SRR17709507_1.fastq.gz -o 10_d110_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/007/SRR17709507/SRR17709507_2.fastq.gz -o 10_d110_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/006/SRR17709506/SRR17709506_1.fastq.gz -o 10_d60_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/006/SRR17709506/SRR17709506_2.fastq.gz -o 10_d60_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/005/SRR17709505/SRR17709505_1.fastq.gz -o 10_d60_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/005/SRR17709505/SRR17709505_2.fastq.gz -o 10_d60_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/003/SRR17709503/SRR17709503_1.fastq.gz -o 10_d110_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/003/SRR17709503/SRR17709503_2.fastq.gz -o 10_d110_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/004/SRR17709504/SRR17709504_1.fastq.gz -o 10_d110_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/004/SRR17709504/SRR17709504_2.fastq.gz -o 10_d110_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/002/SRR17709502/SRR17709502_1.fastq.gz -o 04_d28_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/002/SRR17709502/SRR17709502_2.fastq.gz -o 04_d28_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/001/SRR17709501/SRR17709501_1.fastq.gz -o 01a_d201_bone_marrow_bone_marrow_plasma_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/001/SRR17709501/SRR17709501_2.fastq.gz -o 01a_d201_bone_marrow_bone_marrow_plasma_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/000/SRR17709500/SRR17709500_1.fastq.gz -o 01a_d201_bone_marrow_bone_marrow_plasma_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/000/SRR17709500/SRR17709500_2.fastq.gz -o 01a_d201_bone_marrow_bone_marrow_plasma_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/099/SRR17709499/SRR17709499_1.fastq.gz -o 02a_d201_bone_marrow_bone_marrow_plasma_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/099/SRR17709499/SRR17709499_2.fastq.gz -o 02a_d201_bone_marrow_bone_marrow_plasma_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/098/SRR17709498/SRR17709498_1.fastq.gz -o 04_d201_bone_marrow_bone_marrow_plasma_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/098/SRR17709498/SRR17709498_2.fastq.gz -o 04_d201_bone_marrow_bone_marrow_plasma_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/096/SRR17709496/SRR17709496_1.fastq.gz -o 13_d201_bone_marrow_bone_marrow_plasma_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/096/SRR17709496/SRR17709496_2.fastq.gz -o 13_d201_bone_marrow_bone_marrow_plasma_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/097/SRR17709497/SRR17709497_1.fastq.gz -o 07_d201_bone_marrow_bone_marrow_plasma_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/097/SRR17709497/SRR17709497_2.fastq.gz -o 07_d201_bone_marrow_bone_marrow_plasma_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/095/SRR17709495/SRR17709495_1.fastq.gz -o 20_d201_bone_marrow_bone_marrow_plasma_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/095/SRR17709495/SRR17709495_2.fastq.gz -o 20_d201_bone_marrow_bone_marrow_plasma_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/094/SRR17709494/SRR17709494_1.fastq.gz -o 22_d201_bone_marrow_bone_marrow_plasma_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/094/SRR17709494/SRR17709494_2.fastq.gz -o 22_d201_bone_marrow_bone_marrow_plasma_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/092/SRR17709492/SRR17709492_1.fastq.gz -o 04_d201_d208_blood_memory_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/092/SRR17709492/SRR17709492_2.fastq.gz -o 04_d201_d208_blood_memory_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/093/SRR17709493/SRR17709493_1.fastq.gz -o 02a_d201_blood_memory_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/093/SRR17709493/SRR17709493_2.fastq.gz -o 02a_d201_blood_memory_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/091/SRR17709491/SRR17709491_1.fastq.gz -o 04_d60_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/091/SRR17709491/SRR17709491_2.fastq.gz -o 04_d60_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/089/SRR17709489/SRR17709489_1.fastq.gz -o 10_d201_blood_memory_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/089/SRR17709489/SRR17709489_2.fastq.gz -o 10_d201_blood_memory_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/090/SRR17709490/SRR17709490_1.fastq.gz -o 07_d201_blood_memory_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/090/SRR17709490/SRR17709490_2.fastq.gz -o 07_d201_blood_memory_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/088/SRR17709488/SRR17709488_1.fastq.gz -o 13_d201_blood_memory_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/088/SRR17709488/SRR17709488_2.fastq.gz -o 13_d201_blood_memory_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/086/SRR17709486/SRR17709486_1.fastq.gz -o 22_d201_blood_memory_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/086/SRR17709486/SRR17709486_2.fastq.gz -o 22_d201_blood_memory_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/087/SRR17709487/SRR17709487_1.fastq.gz -o 20_d201_blood_memory_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/087/SRR17709487/SRR17709487_2.fastq.gz -o 20_d201_blood_memory_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/085/SRR17709485/SRR17709485_1.fastq.gz -o 10_d280_bone_marrow_bone_marrow_plasma_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/085/SRR17709485/SRR17709485_2.fastq.gz -o 10_d280_bone_marrow_bone_marrow_plasma_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/084/SRR17709484/SRR17709484_1.fastq.gz -o 20_d280_bone_marrow_bone_marrow_plasma_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/084/SRR17709484/SRR17709484_2.fastq.gz -o 20_d280_bone_marrow_bone_marrow_plasma_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/083/SRR17709483/SRR17709483_1.fastq.gz -o 04_d28_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/083/SRR17709483/SRR17709483_2.fastq.gz -o 04_d28_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/082/SRR17709482/SRR17709482_1.fastq.gz -o 04_d60_lymph_node_plasmablast_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/082/SRR17709482/SRR17709482_2.fastq.gz -o 04_d60_lymph_node_plasmablast_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/080/SRR17709480/SRR17709480_1.fastq.gz -o 07_d110_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/080/SRR17709480/SRR17709480_2.fastq.gz -o 07_d110_lymph_node_germinal_center_B_cell_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/081/SRR17709481/SRR17709481_1.fastq.gz -o 07_d60_lymph_node_germinal_center_B_cell_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR177/081/SRR17709481/SRR17709481_2.fastq.gz -o 07_d60_lymph_node_germinal_center_B_cell_R2.fastq.gz The project contains 57 paired FASTQ files. Each file name encodes the information about donor, time-point relative to vaccination, tissue of origin and cell population. For example for the first file from the above listing: 13_d60_lymph_node_germinal_center_B_cell_R1.fastq.gz - 13 - donor id - d60 - 60 days after vaccination - lymph node - tissue - germinal centerB cell - cell population","title":"Data libraries"},{"location":"mixcr/guides/nebnext-bcr/#upstream-analysis","text":"The most straightforward way to get clonotype tables is to use a universal mixcr analyze command. According to the library preparation protocol, the library does not have any V primers on 5'-end and has C primers on 3', so the command for a single sample is the following: > mixcr analyze amplicon \\ --species hsa \\ --starting-material rna \\ --receptor-type bcr \\ --5-end no-v-primers \\ --3-end c-primers \\ --adapters adapters-present \\ --umi-pattern '^(R1:*)\\^(UMI:N{17})(R2:N{*})' \\ fastq/13_d60_lymph_node_germinal_center_B_cell_R1.fastq.gz \\ fastq/13_d60_lymph_node_germinal_center_B_cell_R2.fastq.gz \\ results/13_d60_lymph_node_germinal_center_B_cell The meaning of these options is the following. --species is set to hsa for Homo Sapience --starting-material RNA or DNA. It affects the choice of V gene region which will be used as target in align step ( vParameters.geneFeatureToAlign , see align documentation ): rna corresponds to the VTranscriptWithout5UTRWithP and dna to VGeneWithP (see Gene features and anchor points for details) --receptor-type TCR or BCR. It affects the choice of underlying alignment algorithms: MiXCR uses fundamentally different algorithms for TCRs and BCRs because BCRs have somatic hypermutations and long indels. --5-end is set to no-v-primers , because the library was obtained using 5'RACE. This leads to a global alignment algorithm on the left bound of V gene. --3-end-primers is set c-primers according to the cDNA library preparation protocol. This leads to a global alignment algorithm to align the right bound of C gene segment. --adapers is set to adapters-present because primer sequence is present in the data and has not been cut prior to. Presence or absence of adapter sequences results in the choice between local and global alignment algorithms on the edges of the target sequence. --umi-pattern is used to specify UMI pattern for the library. MiXCR provides a powerful regex-like language allowing to specify almost arbitrary barcode structure. Here we use ^(R1:*)\\^(UMI:N{17})(R2:N{*}) pattern to specify that R1 should be used as is, UMI spans the first 17 letters of R2 and the rest of R2 is used as a paired read. Running the command above will generate the following files: > ls result/ # human-readable reports 13_d60_lymph_node_germinal_center_B_cell.report # raw alignments (highly compressed binary file) 13_d60_lymph_node_germinal_center_B_cell.vdjca # alignments with corrected UMI barcode sequences 13_d60_lymph_node_germinal_center_B_cell.corrected.vdjca # IGH, IGK and IGL CDR3 clonotypes (highly compressed binary file) 13_d60_lymph_node_germinal_center_B_cell.clns # IGH, IGK and IGL CDR3 clonotypes exported in tab-delimited txt 13_d60_lymph_node_germinal_center_B_cell.clonotypes.IGH.tsv 13_d60_lymph_node_germinal_center_B_cell.clonotypes.IGK.tsv 13_d60_lymph_node_germinal_center_B_cell.clonotypes.IGL.tsv Obtained *.tsv files can be used for manual examination. *.clns files can be used for downstream analysis using mixcr postanalisis . By default, MiXCR exports clonotypes in a tab-delimited format separately for each immunological chain. In order to run the analysis for all samples in the project on Linux we can use GNU Parallel in the following way: > ls /fastq/*_R1* | \\ parallel -j2 \\ 'mixcr analyze amplicon \\ --species hsa \\ --starting-material rna \\ --receptor-type bcr \\ --5-end no-v-primers \\ --3-end c-primers \\ --adapters adapters-present \\ --umi-pattern \"^(R1:*)\\^(UMI:N{\"17\"})(R2:*)\" \\ {} \\ {=s:R1:R2:=} \\ {=s:.*/:results:;s:_R1.*::=}'","title":"Upstream analysis"},{"location":"mixcr/guides/nebnext-bcr/#under-the-hood-pipeline","text":"Under the hood the command above actually executes the following pipeline:","title":"Under the hood pipeline:"},{"location":"mixcr/guides/nebnext-bcr/#align","text":"Alignment of raw sequencing reads against reference database of V-, D-, J- and C- gene segments. # align raw reads > mixcr align -s hsa \\ -p kAligner2 \\ -OvParameters.geneFeatureToAlign = \"VTranscriptWithout5UTRWithP\" \\ -OvParameters.parameters.floatingLeftBound = false \\ -OjParameters.parameters.floatingRightBound = false \\ -OcParameters.parameters.floatingRightBound = true \\ --report results/13_d60_lymph_node_germinal_center_B_cell.report \\ --tag-pattern '^(R1:N{*})\\^(UMI:N{17})(R2:N{*})' \\ fastq/13_d60_lymph_node_germinal_center_B_cell_R1.fastq.gz \\ fastq/13_d60_lymph_node_germinal_center_B_cell_R2.fastq.gz \\ 13_d60_lymph_node_germinal_center_B_cell.vdjca Option --report is specified here explicitly. - -p kAligner2 specifies an BCR aligner. - -OvParameters.parameters.floatingLeftBound=false -OjParameters.parameters.floatingRightBound=false are set to false because no V or J primers were used in cDNA library preparation. This results in a global aligning algorithm (instead of a local one) on the left bound of V gene and right bound of J gene. - -OcParameters.parameters.floatingRightBound=true is set to true because C primers sequence is present on the 3'end of the cDNA library. Thus, local alignment algorithm will be used on the right bound of C gene.","title":"align"},{"location":"mixcr/guides/nebnext-bcr/#correctandsorttags","text":"Corrects sequencing and PCR errors inside barcode sequences. This step is essential to correct artificial diversity caused by errors in barcodes. > mixcr correctAndSortTags \\ --report 13_d60_lymph_node_germinal_center_B_cell.report \\ --json-report 13_d60_lymph_node_germinal_center_B_cell.report.json \\ 13_d60_lymph_node_germinal_center_B_cell.vdjca \\ 13_d60_lymph_node_germinal_center_B_cell.corrected.vdjca","title":"correctAndSortTags"},{"location":"mixcr/guides/nebnext-bcr/#assemble","text":"Assembles alignments into clonotypes and applies several layers of errors correction(ex. quality-awared correction for sequencing errors, clustering to correct for PCR errors). Check mixcr assemble for more information. # assemble CDR3 clonotypes > mixcr assemble \\ -OseparateByV = true \\ -OseparateByJ = true \\ --report 13_d60_lymph_node_germinal_center_B_cell.corrected.report \\ 13_d60_lymph_node_germinal_center_B_cell.corrected.vdjca \\ 13_d60_lymph_node_germinal_center_B_cell.corrected.clns","title":"assemble"},{"location":"mixcr/guides/nebnext-bcr/#export","text":"Exports clonotypes from .clns file into human-readable tables. # export to tsv > mixcr exportClones \\ -p full \\ 13_d60_lymph_node_germinal_center_B_cell.corrected.clns \\ 13_d60_lymph_node_germinal_center_B_cell.corrected.tsv Here -p full defines the full preset of common export columns. Check mixcr export for more information.","title":"export"},{"location":"mixcr/guides/nebnext-bcr/#quality-control","text":"Now when we have all files processed lets perform Quality Control. That can be easily done using mixcr exportQc function. # obtain alignment quality control > mixcr exportQc align \\ result/*.vdjca \\ alignQc.pdf # obtain chain usage plot > mixcr exportQc chainUsage \\ result/*.vdjca \\ usageQc.pdf First let's examine the alignment quality control plot. Most of the samples have a height successful alignment score. But samples that come from blood memory B cells clearly have a lower percentage of aligned reads, and the major reason for that is the lack of immune receptor sequences. That might be due to some issues during sample preparation of this particular kind. It is recommended to realign one of these samples and save not aligned reads into separate file for manual inspection. That can be done with the following command: mixcr align \\ -p kAligner2 \\ -OvParameters.geneFeatureToAlign = \"VTranscriptWithout5UTRWithP\" \\ -OvParameters.parameters.floatingLeftBound = false \\ -OjParameters.parameters.floatingRightBound = false \\ -OcParameters.parameters.floatingRightBound = true \\ --report 22_d201_blood_memory_B_cell.debug.report \\ --tag-pattern '^(R1:N{*})\\^(UMI:N{17})(R2:N{*})' \\ -OvParameters.geneFeatureToAlign = VTranscriptWithP \\ -OvParameters.parameters.floatingLeftBound = true \\ -OjParameters.parameters.floatingRightBound = false \\ -OcParameters.parameters.floatingRightBound = true \\ --not-aligned-R1 22_d201_blood_memory_B_cell_R1.fastq \\ --not-aligned-R2 22_d201_blood_memory_B_cell.fastq \\ fastq/22_d201_blood_memory_B_cell_R1.fastq.gz fastq/22_d201_blood_memory_B_cell_R2.fastq.gz \\ 22_d201_blood_memory_B_cell.debug.vdjca If we look at the chain usage plot, we see, as expected, that the samples are almost entirely consist of IGH chains, since only heavy BCR chains we sequenced.","title":"Quality control"},{"location":"mixcr/guides/nebnext-bcr/#advanced-parameters-tuning","text":"In the example above, we have assembled clones by a default CDR3 feature. But NEBNext\u00ae Immune Sequencing Kit, as we can tell from the library structure scheme covers the whole sequence of V and J genes, because it is a 5'RACE based protocol. And not only that, but it also uses a set of primers which allows isotype differentiation. To reveal the full potential of this kit (separate clones by hypermutations and isotypes) we will modify the feature used to assemble clones, and we will also use C gene to separate clones by isotypes. That can be done by modifying mixcr analyze amplicon parameters: > mixcr analyze amplicon \\ --species hsa \\ --starting-material rna \\ --receptor-type bcr \\ --5-end no-v-primers \\ --3-end c-primers \\ --adapters adapters-present \\ --umi-pattern '^(R1:*)\\^(UMI:N{17})(R2:N{*})' \\ --assemble \"-OassemblingFeatures={FR1Begin:FR4End} -OseparateByC=true\" \\ fastq/13_d60_lymph_node_germinal_center_B_cell_R1.fastq.gz \\ fastq/13_d60_lymph_node_germinal_center_B_cell_R2.fastq.gz \\ results/13_d60_lymph_node_germinal_center_B_cell Under the hood this adjustment will pass extra arguments ( -OassemblingFeatures={FR1Begin:FR4End} , -OseparateByC=true ) to mixcr assemle step.","title":"Advanced parameters tuning"},{"location":"mixcr/guides/qiaseq-tcr/","text":"QIAseq Immune Repertoire RNA Library kit Here we will discuss how to process TCR cDNA libraries obtained with QIAseq Immune Repertoire RNA Library kit. Data libraries This tutorial uses the data from the following publication: \"Tumor-infiltrating mast cells are associated with resistance to anti-PD-1 therapy.\" ,Somasundaram R et al., Nat Commun, 2021 Jan 12;12(1):346 doi:10.1038/s41467-020-20600-7 A humanized (Hu)-mouse melanoma model was created by injecting fetal liver-derived CD34+ cells and implanting autologous thymus in immune-deficient NOD-scid IL2R\u03b3null (NSG) mice. Reconstituted Hu-mice were challenged with HLA-matched melanomas and treated with anti-PD-1, which resulted in restricted tumor growth but not complete regression. RNA was isolated from spleen and tumor tissues obtained from pre- and post-therapy (anti-PD-1) mice. cDNA synthesis was performed using QIAseq Immune Repertoire RNA Library prep kit (QIAGEN). Enrichment of complete TCR variable region by gene-specific primers targeting constant regions and molecular indexing (UMIs) for accurate and sensitive TCR clonotype and repertoire diversity assessment. Final libraries were sequenced on Illumina's NextSeq500 using the 300 cycles mid output sequencing kit, 261 cycles for read 1 and 41 cycles for read 2. On the scheme bellow you can see the structure of cDNA library. UMI is located in the first 12 bp of R2. The data for this tutorial can be downloaded using the script bellow. #!/usr/bin/env bash curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR129/087/SRR12991387/SRR12991387_1.fastq.gz -o Melanoma_tumor_from_humanized_mice_1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR129/087/SRR12991387/SRR12991387_2.fastq.gz -o Melanoma_tumor_from_humanized_mice_1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR129/088/SRR12991388/SRR12991388_1.fastq.gz -o Melanoma_tumor_from_humanized_mice_2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR129/088/SRR12991388/SRR12991388_2.fastq.gz -o Melanoma_tumor_from_humanized_mice_2_R2.fastq.gz ... See full script #!/usr/bin/env bash curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR129/087/SRR12991387/SRR12991387_1.fastq.gz -o Melanoma_tumor_from_humanized_mice_1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR129/087/SRR12991387/SRR12991387_2.fastq.gz -o Melanoma_tumor_from_humanized_mice_1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR129/088/SRR12991388/SRR12991388_1.fastq.gz -o Melanoma_tumor_from_humanized_mice_2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR129/088/SRR12991388/SRR12991388_2.fastq.gz -o Melanoma_tumor_from_humanized_mice_2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR129/090/SRR12991390/SRR12991390_1.fastq.gz -o Spleen_from_tumor-bearing_humanized_mice_2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR129/090/SRR12991390/SRR12991390_2.fastq.gz -o Spleen_from_tumor-bearing_humanized_mice_2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR129/089/SRR12991389/SRR12991389_1.fastq.gz -o Spleen_from_tumor-bearing_humanized_mice_1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR129/089/SRR12991389/SRR12991389_2.fastq.gz -o Spleen_from_tumor-bearing_humanized_mice_1_R2.fastq.gz Upstream analysis The most straightforward way to get clonotype tables is to use a universal mixcr analyze command. According to the library preparation protocol, the library has no V primers on 5'-end and has C primers on 3', so the command for a single sample is the following: > mixcr analyze amplicon \\ --species mmu \\ --starting-material rna \\ --receptor-type tcr \\ --5-end no-v-primers \\ --3-end c-primers \\ --adapters adapters-present \\ --umi-pattern '^(R1:*)\\^(UMI:N{12})' \\ fastq/Melanoma_tumor_from_humanized_mice_1_R1.fastq.gz \\ fastq/Melanoma_tumor_from_humanized_mice_1_R2.fastq.gz \\ results/Melanoma_tumor_from_humanized_mice_1 The meaning of these options is the following. --species is set to mmu for Mus Musculus --starting-material is set to rna and corresponds to VTranscriptWithout5UTRWithP alignment feature for V-gene (see Gene features and anchor points for details) --receptor-type tcr. It affects the choice of alignment algorithms. --5-end is set to no-v-primers . to a global alignment algorithm to align the left bound of V. --3-end-primers is set to c-primers since the primer used for library preparation is complimentary to C-region of TCR genes. This leads to a global alignment algorithms to align the right bound of J and a local alignment at the right bound of C gene. --adapers adapters-present because primer sequence is present in the data and has not been cut prior to. --umi-pattern is used to specify UMI pattern for the library. MiXCR provides a powerful regex-like language allowing to specify almost arbitrary barcode structure. Here we use ^(R1:*)\\^(UMI:N{12}) pattern to specify that R1 should be used as is, UMI spans the first 12 letters of R2 and the rest of R2 is ignored, because it only covers a few 5'UTR base pairs. Running the command above will generate the following files: > ls result/ # human-readable reports Melanoma_tumor_from_humanized_mice_1.report # raw alignments (highly compressed binary file) Melanoma_tumor_from_humanized_mice_1.vdjca # alignments with corrected UMI barcode sequences Melanoma_tumor_from_humanized_mice_1.corrected.vdjca # TCR\u03b1 & TCR\u03b2 CDR3 clonotypes (highly compressed binary file) Melanoma_tumor_from_humanized_mice_1.clns # TCR\u03b1 & TCR\u03b2 CDR3 clonotypes exported in tab-delimited txt Melanoma_tumor_from_humanized_mice_1.clonotypes.TRA.tsv Melanoma_tumor_from_humanized_mice_1.clonotypes.TRB.tsv Clonotype tables is the main result of the upstream analysis. They are stored in a highly compressed and efficient binary .clns file and can be exported in many ways: detailed tab-delimited format with dozens of customizable columns, human readable for manual inspection, and AIRR format suitable for many scientific downstream analysis tools. By default, MiXCR exports clonotypes in a tab-delimited format separately for each immunological chain. In order to run the analysis for all samples in the project on Linux we can for example use GNU Parallel in the following way: > ls /fastq/*R1* | \\ parallel -j2 \\ 'mixcr analyze amplicon \\ --species mmu \\ --starting-material rna \\ --receptor-type tcr \\ --5-end no-v-primers \\ --3-end c-primers \\ --adapters adapters-present \\ --umi-pattern \"^(R1:*)\\^(UMI:N{\"12\"})\" \\ {} \\ {=s:R1:R2:=} \\ {=s:.*/:results/:; s:_R.*::=}' Under the hood pipeline Under the hood, mixcr analyze amplicon executes the following pipeline of MiXCR actions: align Performs : alignment of raw sequencing reads against reference database of V-, D-, J- and C- gene segments pattern matching of tag pattern sequence and extraction of barcodes > mixcr align \\ --species mmu \\ --tag-pattern '^(R1:*)\\^(UMI:N{12})' \\ --report result/P15-T0-TIGIT.report \\ --json-report result/P15-T0-TIGIT.report.json \\ -OvParameters.geneFeatureToAlign = \"VTranscriptWithout5UTRWithP\" \\ -OvParameters.parameters.floatingLeftBound = false \\ -OjParameters.parameters.floatingRightBound = false \\ -OcParameters.parameters.floatingRightBound = true \\ fastq/Melanoma_tumor_from_humanized_mice_1_R1.fastq.gz \\ fastq/Melanoma_tumor_from_humanized_mice_1_R2.fastq.gz \\ results/Melanoma_tumor_from_humanized_mice_1.vdjca Options --report and --json-report are specified here explicitly. Since we start from RNA data we use VTranscriptWithout5UTRWithP for the alignment of V segments (see Gene features and anchor points . Because we don't have primers on V segment, we use global alignment on the left bound of V and since we have primers on C segment, we use global alignment for J and local on the right bound of C. This step utilizes all available CPUs and scales perfectly. When there are a lot of CPUs, the only limiting factor is the speed of disk I/O. To limit the number of used CPUs one can pass --threads N option. correctAndSortTags Corrects sequencing and PCR errors inside barcode sequences. This step does extremely important job by correcting artificial diversity caused by errors in barcodes. In the considered example project it corrects only sequences of UMIs. > mixcr correctAndSortTags \\ --report results/Melanoma_tumor_from_humanized_mice_1.report \\ --json-report results/Melanoma_tumor_from_humanized_mice_1.report.json \\ Melanoma_tumor_from_humanized_mice_1.vdjca \\ Melanoma_tumor_from_humanized_mice_1.corrected.vdjca Options --report and --json-report are specified here explicitly so that the report files will be appended with the barcode correction report. assemble Assembles clonotypes and applies several layers of errors correction. In the current example project we consider TCR\u03b1 & TCR\u03b2 separately and clonotype by its CDR3 sequence. The layers of correction applied in this example are: assembly consensus CDR3 sequence for each UMI quality-awared correction for sequencing errors clustering to correct for PCR errors, which still may present even in the case of UMI data, since a error may be introduced e.g. on the first reverse-transcription cycle > mixcr assemble \\ --report results/Melanoma_tumor_from_humanized_mice_1.report \\ --json-report results/Melanoma_tumor_from_humanized_mice_1.report.json \\ Melanoma_tumor_from_humanized_mice_1.corrected.vdjca \\ Melanoma_tumor_from_humanized_mice_1.clns Options --report and --json-report are specified here explicitly so that the report files will be appended with assembly report. exportClones Finally, to export clonotype tables in tabular form exportClones is used: > mixcr exportClones \\ -p full \\ -uniqueTagCount UMI \\ Melanoma_tumor_from_humanized_mice_1.clns \\ Melanoma_tumor_from_humanized_mice_1.tsv Here -p full is a shorthand for the full preset of common export columns and -uniqueTagCount UMI adds a column with the UMI count for each clone. Quality control Now when the upstream analysis is finished we can move on to quality control. First lets look at the alignment report plot. # obtain alignment quality control > mixcr exportQc align \\ result/*.vdjca \\ alignQc.pdf Let's examine the plot. Judging by the alignment report we can tell some major issues occurred in sample preparation. The main problems are the absence of J hits and reads that don't have TCR/Ig sequence at all. We can take one of the samples and realign it in a way that will allow us manually investigate these issues: > ~/mixcr-private/mixcr align \\ --species mmu \\ --tag-pattern '^(R1:*)\\^(UMI:N{12})' \\ -OvParameters.geneFeatureToAlign = \"VTranscriptWithout5UTRWithP\" \\ -OvParameters.parameters.floatingLeftBound = false \\ -OjParameters.parameters.floatingRightBound = false \\ -OcParameters.parameters.floatingRightBound = true \\ -OallowNoCDR3PartAlignments = true \\ -OallowPartialAlignments = true \\ --not-aligned-R1 na.fastq \\ Melanoma_tumor_from_humanized_mice_1_R1.fastq.gz \\ Melanoma_tumor_from_humanized_mice_1_R2.fastq.gz \\ Melanoma_tumor_from_humanized_mice_1_debug.vdjca In the command above we preserve partially aligned reads and reads that did not cover CDR3 region ( -OallowNoCDR3PartAlignments=true , -OallowPartialAlignments=true ). We also save reads that didn't align to any immune gene reference at all into a separate fastq file ( --not-aligned-R1 na.fastq ). Now we can export raw alignments using the following command and manually investigate alignments that lack J gene: > mixcr exportAlignmentsPretty \\ Melanoma_tumor_from_humanized_mice_1_debug.vdjca >>> Read ids: 124 Quality 72222727772277777677777252776 Target0 0 GGCAGGGCTGGGGGTCAGGGAAGAATGAT 28 Score FR2><CDR2 CDR2><FR3 _ Q S P E L I M S I Y S N C D K D A R R F T P Q L K K Quality 45265222522225247662622522422222652472225462667462625252524525522262722676662622 Target1 0 GGCAAAGCCCTGAGCTGATAATGTCTATATACTCCAATTGTGACAAAGATGCTCGAAGGTTTACACCACAGCTCAAAAAA 79 Score TRAV7-2*00 181 ggAaaagcccCAagAtgCtGatgtctatCtTctccaatGgtgaAaaGgaAgAAGgCagAttCacaGTTcaCctcaaTaaa 260 222 TRAV7D-2*00 181 ggAaaagcccCAagAtgCtGatgtctatCtTctccaatGgtgaAaaGgaAgAAGgCagAttCacaGTTcaCctcaaTaaa 260 222 V> FR3><CDR3 A S K Y G S L L I R D S Q P R D A A T Y L C A V N I N Quality 27577525762222752262267672725254625577527722252227777245772646266762464522272767 Target1 80 GCCAGCAAGTATGGTTCGCTGCTCATCAGAGACTCCCAGCCCAGGGATGCAGCCACCTACCTCTGTGCCGTGAACATCAA 159 Score TRAV7-2*00 261 gccagcCTgCatACttcCctgcAcatcagagactcccagcccagTgaCTcTgcTCTctacctctgtgc 328 222 TRAV7D-2*00 261 gccagcCTgCatACttcCctgcAcatcagagactcccagcccagTgaCTcTgcTCTctacctctgtgc 328 222 CDR3><FR4 <J FR4> F N K F Y F G S G T K L N V K P _ Quality 62272777722222277777762777777777277722767777727777777767777777777777777777777777 Target1 160 CTTCAACAAATTTTACTTTGGATCTGGGACCAAACTCAATGTAAAACCAAATATCCAGAACCCTGACCCTGCCGTGTACC 239 Score TRAJ13*00 43 tttggaActgggacAaaactcCaAgtCGTTccaa 76 58 We can also use BLAST to identify not aligned reads from na.fastq. Finally, lets generate and look at chain usage report. > mixcr chainUsage \\ results/*.clns \\ chainUsage.pdf We see that, as expected, samples consist of TRA and TRB chains.","title":"QIAseq Immune Repertoire TCR"},{"location":"mixcr/guides/qiaseq-tcr/#qiaseq-immune-repertoire-rna-library-kit","text":"Here we will discuss how to process TCR cDNA libraries obtained with QIAseq Immune Repertoire RNA Library kit.","title":"QIAseq Immune Repertoire RNA Library kit"},{"location":"mixcr/guides/qiaseq-tcr/#data-libraries","text":"This tutorial uses the data from the following publication: \"Tumor-infiltrating mast cells are associated with resistance to anti-PD-1 therapy.\" ,Somasundaram R et al., Nat Commun, 2021 Jan 12;12(1):346 doi:10.1038/s41467-020-20600-7 A humanized (Hu)-mouse melanoma model was created by injecting fetal liver-derived CD34+ cells and implanting autologous thymus in immune-deficient NOD-scid IL2R\u03b3null (NSG) mice. Reconstituted Hu-mice were challenged with HLA-matched melanomas and treated with anti-PD-1, which resulted in restricted tumor growth but not complete regression. RNA was isolated from spleen and tumor tissues obtained from pre- and post-therapy (anti-PD-1) mice. cDNA synthesis was performed using QIAseq Immune Repertoire RNA Library prep kit (QIAGEN). Enrichment of complete TCR variable region by gene-specific primers targeting constant regions and molecular indexing (UMIs) for accurate and sensitive TCR clonotype and repertoire diversity assessment. Final libraries were sequenced on Illumina's NextSeq500 using the 300 cycles mid output sequencing kit, 261 cycles for read 1 and 41 cycles for read 2. On the scheme bellow you can see the structure of cDNA library. UMI is located in the first 12 bp of R2. The data for this tutorial can be downloaded using the script bellow. #!/usr/bin/env bash curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR129/087/SRR12991387/SRR12991387_1.fastq.gz -o Melanoma_tumor_from_humanized_mice_1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR129/087/SRR12991387/SRR12991387_2.fastq.gz -o Melanoma_tumor_from_humanized_mice_1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR129/088/SRR12991388/SRR12991388_1.fastq.gz -o Melanoma_tumor_from_humanized_mice_2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR129/088/SRR12991388/SRR12991388_2.fastq.gz -o Melanoma_tumor_from_humanized_mice_2_R2.fastq.gz ... See full script #!/usr/bin/env bash curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR129/087/SRR12991387/SRR12991387_1.fastq.gz -o Melanoma_tumor_from_humanized_mice_1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR129/087/SRR12991387/SRR12991387_2.fastq.gz -o Melanoma_tumor_from_humanized_mice_1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR129/088/SRR12991388/SRR12991388_1.fastq.gz -o Melanoma_tumor_from_humanized_mice_2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR129/088/SRR12991388/SRR12991388_2.fastq.gz -o Melanoma_tumor_from_humanized_mice_2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR129/090/SRR12991390/SRR12991390_1.fastq.gz -o Spleen_from_tumor-bearing_humanized_mice_2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR129/090/SRR12991390/SRR12991390_2.fastq.gz -o Spleen_from_tumor-bearing_humanized_mice_2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR129/089/SRR12991389/SRR12991389_1.fastq.gz -o Spleen_from_tumor-bearing_humanized_mice_1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR129/089/SRR12991389/SRR12991389_2.fastq.gz -o Spleen_from_tumor-bearing_humanized_mice_1_R2.fastq.gz","title":"Data libraries"},{"location":"mixcr/guides/qiaseq-tcr/#upstream-analysis","text":"The most straightforward way to get clonotype tables is to use a universal mixcr analyze command. According to the library preparation protocol, the library has no V primers on 5'-end and has C primers on 3', so the command for a single sample is the following: > mixcr analyze amplicon \\ --species mmu \\ --starting-material rna \\ --receptor-type tcr \\ --5-end no-v-primers \\ --3-end c-primers \\ --adapters adapters-present \\ --umi-pattern '^(R1:*)\\^(UMI:N{12})' \\ fastq/Melanoma_tumor_from_humanized_mice_1_R1.fastq.gz \\ fastq/Melanoma_tumor_from_humanized_mice_1_R2.fastq.gz \\ results/Melanoma_tumor_from_humanized_mice_1 The meaning of these options is the following. --species is set to mmu for Mus Musculus --starting-material is set to rna and corresponds to VTranscriptWithout5UTRWithP alignment feature for V-gene (see Gene features and anchor points for details) --receptor-type tcr. It affects the choice of alignment algorithms. --5-end is set to no-v-primers . to a global alignment algorithm to align the left bound of V. --3-end-primers is set to c-primers since the primer used for library preparation is complimentary to C-region of TCR genes. This leads to a global alignment algorithms to align the right bound of J and a local alignment at the right bound of C gene. --adapers adapters-present because primer sequence is present in the data and has not been cut prior to. --umi-pattern is used to specify UMI pattern for the library. MiXCR provides a powerful regex-like language allowing to specify almost arbitrary barcode structure. Here we use ^(R1:*)\\^(UMI:N{12}) pattern to specify that R1 should be used as is, UMI spans the first 12 letters of R2 and the rest of R2 is ignored, because it only covers a few 5'UTR base pairs. Running the command above will generate the following files: > ls result/ # human-readable reports Melanoma_tumor_from_humanized_mice_1.report # raw alignments (highly compressed binary file) Melanoma_tumor_from_humanized_mice_1.vdjca # alignments with corrected UMI barcode sequences Melanoma_tumor_from_humanized_mice_1.corrected.vdjca # TCR\u03b1 & TCR\u03b2 CDR3 clonotypes (highly compressed binary file) Melanoma_tumor_from_humanized_mice_1.clns # TCR\u03b1 & TCR\u03b2 CDR3 clonotypes exported in tab-delimited txt Melanoma_tumor_from_humanized_mice_1.clonotypes.TRA.tsv Melanoma_tumor_from_humanized_mice_1.clonotypes.TRB.tsv Clonotype tables is the main result of the upstream analysis. They are stored in a highly compressed and efficient binary .clns file and can be exported in many ways: detailed tab-delimited format with dozens of customizable columns, human readable for manual inspection, and AIRR format suitable for many scientific downstream analysis tools. By default, MiXCR exports clonotypes in a tab-delimited format separately for each immunological chain. In order to run the analysis for all samples in the project on Linux we can for example use GNU Parallel in the following way: > ls /fastq/*R1* | \\ parallel -j2 \\ 'mixcr analyze amplicon \\ --species mmu \\ --starting-material rna \\ --receptor-type tcr \\ --5-end no-v-primers \\ --3-end c-primers \\ --adapters adapters-present \\ --umi-pattern \"^(R1:*)\\^(UMI:N{\"12\"})\" \\ {} \\ {=s:R1:R2:=} \\ {=s:.*/:results/:; s:_R.*::=}'","title":"Upstream analysis"},{"location":"mixcr/guides/qiaseq-tcr/#under-the-hood-pipeline","text":"Under the hood, mixcr analyze amplicon executes the following pipeline of MiXCR actions:","title":"Under the hood pipeline"},{"location":"mixcr/guides/qiaseq-tcr/#align","text":"Performs : alignment of raw sequencing reads against reference database of V-, D-, J- and C- gene segments pattern matching of tag pattern sequence and extraction of barcodes > mixcr align \\ --species mmu \\ --tag-pattern '^(R1:*)\\^(UMI:N{12})' \\ --report result/P15-T0-TIGIT.report \\ --json-report result/P15-T0-TIGIT.report.json \\ -OvParameters.geneFeatureToAlign = \"VTranscriptWithout5UTRWithP\" \\ -OvParameters.parameters.floatingLeftBound = false \\ -OjParameters.parameters.floatingRightBound = false \\ -OcParameters.parameters.floatingRightBound = true \\ fastq/Melanoma_tumor_from_humanized_mice_1_R1.fastq.gz \\ fastq/Melanoma_tumor_from_humanized_mice_1_R2.fastq.gz \\ results/Melanoma_tumor_from_humanized_mice_1.vdjca Options --report and --json-report are specified here explicitly. Since we start from RNA data we use VTranscriptWithout5UTRWithP for the alignment of V segments (see Gene features and anchor points . Because we don't have primers on V segment, we use global alignment on the left bound of V and since we have primers on C segment, we use global alignment for J and local on the right bound of C. This step utilizes all available CPUs and scales perfectly. When there are a lot of CPUs, the only limiting factor is the speed of disk I/O. To limit the number of used CPUs one can pass --threads N option.","title":"align"},{"location":"mixcr/guides/qiaseq-tcr/#correctandsorttags","text":"Corrects sequencing and PCR errors inside barcode sequences. This step does extremely important job by correcting artificial diversity caused by errors in barcodes. In the considered example project it corrects only sequences of UMIs. > mixcr correctAndSortTags \\ --report results/Melanoma_tumor_from_humanized_mice_1.report \\ --json-report results/Melanoma_tumor_from_humanized_mice_1.report.json \\ Melanoma_tumor_from_humanized_mice_1.vdjca \\ Melanoma_tumor_from_humanized_mice_1.corrected.vdjca Options --report and --json-report are specified here explicitly so that the report files will be appended with the barcode correction report.","title":"correctAndSortTags"},{"location":"mixcr/guides/qiaseq-tcr/#assemble","text":"Assembles clonotypes and applies several layers of errors correction. In the current example project we consider TCR\u03b1 & TCR\u03b2 separately and clonotype by its CDR3 sequence. The layers of correction applied in this example are: assembly consensus CDR3 sequence for each UMI quality-awared correction for sequencing errors clustering to correct for PCR errors, which still may present even in the case of UMI data, since a error may be introduced e.g. on the first reverse-transcription cycle > mixcr assemble \\ --report results/Melanoma_tumor_from_humanized_mice_1.report \\ --json-report results/Melanoma_tumor_from_humanized_mice_1.report.json \\ Melanoma_tumor_from_humanized_mice_1.corrected.vdjca \\ Melanoma_tumor_from_humanized_mice_1.clns Options --report and --json-report are specified here explicitly so that the report files will be appended with assembly report.","title":"assemble"},{"location":"mixcr/guides/qiaseq-tcr/#exportclones","text":"Finally, to export clonotype tables in tabular form exportClones is used: > mixcr exportClones \\ -p full \\ -uniqueTagCount UMI \\ Melanoma_tumor_from_humanized_mice_1.clns \\ Melanoma_tumor_from_humanized_mice_1.tsv Here -p full is a shorthand for the full preset of common export columns and -uniqueTagCount UMI adds a column with the UMI count for each clone.","title":"exportClones"},{"location":"mixcr/guides/qiaseq-tcr/#quality-control","text":"Now when the upstream analysis is finished we can move on to quality control. First lets look at the alignment report plot. # obtain alignment quality control > mixcr exportQc align \\ result/*.vdjca \\ alignQc.pdf Let's examine the plot. Judging by the alignment report we can tell some major issues occurred in sample preparation. The main problems are the absence of J hits and reads that don't have TCR/Ig sequence at all. We can take one of the samples and realign it in a way that will allow us manually investigate these issues: > ~/mixcr-private/mixcr align \\ --species mmu \\ --tag-pattern '^(R1:*)\\^(UMI:N{12})' \\ -OvParameters.geneFeatureToAlign = \"VTranscriptWithout5UTRWithP\" \\ -OvParameters.parameters.floatingLeftBound = false \\ -OjParameters.parameters.floatingRightBound = false \\ -OcParameters.parameters.floatingRightBound = true \\ -OallowNoCDR3PartAlignments = true \\ -OallowPartialAlignments = true \\ --not-aligned-R1 na.fastq \\ Melanoma_tumor_from_humanized_mice_1_R1.fastq.gz \\ Melanoma_tumor_from_humanized_mice_1_R2.fastq.gz \\ Melanoma_tumor_from_humanized_mice_1_debug.vdjca In the command above we preserve partially aligned reads and reads that did not cover CDR3 region ( -OallowNoCDR3PartAlignments=true , -OallowPartialAlignments=true ). We also save reads that didn't align to any immune gene reference at all into a separate fastq file ( --not-aligned-R1 na.fastq ). Now we can export raw alignments using the following command and manually investigate alignments that lack J gene: > mixcr exportAlignmentsPretty \\ Melanoma_tumor_from_humanized_mice_1_debug.vdjca >>> Read ids: 124 Quality 72222727772277777677777252776 Target0 0 GGCAGGGCTGGGGGTCAGGGAAGAATGAT 28 Score FR2><CDR2 CDR2><FR3 _ Q S P E L I M S I Y S N C D K D A R R F T P Q L K K Quality 45265222522225247662622522422222652472225462667462625252524525522262722676662622 Target1 0 GGCAAAGCCCTGAGCTGATAATGTCTATATACTCCAATTGTGACAAAGATGCTCGAAGGTTTACACCACAGCTCAAAAAA 79 Score TRAV7-2*00 181 ggAaaagcccCAagAtgCtGatgtctatCtTctccaatGgtgaAaaGgaAgAAGgCagAttCacaGTTcaCctcaaTaaa 260 222 TRAV7D-2*00 181 ggAaaagcccCAagAtgCtGatgtctatCtTctccaatGgtgaAaaGgaAgAAGgCagAttCacaGTTcaCctcaaTaaa 260 222 V> FR3><CDR3 A S K Y G S L L I R D S Q P R D A A T Y L C A V N I N Quality 27577525762222752262267672725254625577527722252227777245772646266762464522272767 Target1 80 GCCAGCAAGTATGGTTCGCTGCTCATCAGAGACTCCCAGCCCAGGGATGCAGCCACCTACCTCTGTGCCGTGAACATCAA 159 Score TRAV7-2*00 261 gccagcCTgCatACttcCctgcAcatcagagactcccagcccagTgaCTcTgcTCTctacctctgtgc 328 222 TRAV7D-2*00 261 gccagcCTgCatACttcCctgcAcatcagagactcccagcccagTgaCTcTgcTCTctacctctgtgc 328 222 CDR3><FR4 <J FR4> F N K F Y F G S G T K L N V K P _ Quality 62272777722222277777762777777777277722767777727777777767777777777777777777777777 Target1 160 CTTCAACAAATTTTACTTTGGATCTGGGACCAAACTCAATGTAAAACCAAATATCCAGAACCCTGACCCTGCCGTGTACC 239 Score TRAJ13*00 43 tttggaActgggacAaaactcCaAgtCGTTccaa 76 58 We can also use BLAST to identify not aligned reads from na.fastq. Finally, lets generate and look at chain usage report. > mixcr chainUsage \\ results/*.clns \\ chainUsage.pdf We see that, as expected, samples consist of TRA and TRB chains.","title":"Quality control"},{"location":"mixcr/guides/rnaseq/","text":"RNASeq Here we will discuss how to extract TCR repertoire from RNASeq data. Data libraries This tutorial uses the data from the following publication: Calibration of cell-intrinsic interleukin-2 response thresholds guides design of a regulatory T cell biased agonist . Glassman CR et al., Elife 2021 May 18;10. doi: 10.7554/eLife.65777 Tregs were isolated from B6-Foxp3EGFP mice using CD4+ T cell isolation kit followed by fluorescence-activated cell sorting (FACS) for GFP expression to isolate Tregs. CD8+ T cells were isolated from C57BL/6J mice using CD8+ T cell isolation kit. Isolated cells were stimulated with 200 nM IL-2 or IL-2-REH and total RNA was extracted. 500 ng of RNA was used for RNA-Seq library preparation with the Kapa mRNA HyperPrep Kit (KK8580, Kapa Biosystems). DNA fragments between 250 bp and 400 bp were recovered, purified, and sequenced on an Illumina HiSeq3000 system (50 bp, single end). In this publication authors did not study immune repertoires. This is also an example of how MiXCR can retrieve data from experiments that were nor originally designed for obtaining TCR or BCR repertoires. The data for this tutorial can be downloaded using the script bellow. Download raw data #!/usr/bin/env bash curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/028/SRR13228528/SRR13228528.fastq.gz -o CD8T_REH_4h_rep1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/010/SRR13228510/SRR13228510.fastq.gz -o Treg_IL2_1.5h_rep1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/027/SRR13228527/SRR13228527.fastq.gz -o CD8T_IL2_4h_rep1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/016/SRR13228516/SRR13228516.fastq.gz -o Treg_REH_1.5h_rep2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/009/SRR13228509/SRR13228509.fastq.gz -o Treg_0h_rep1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/015/SRR13228515/SRR13228515.fastq.gz -o Treg_IL2_1.5h_rep2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/017/SRR13228517/SRR13228517.fastq.gz -o Treg_IL2_4h_rep2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/011/SRR13228511/SRR13228511.fastq.gz -o Treg_REH_1.5h_rep1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/026/SRR13228526/SRR13228526.fastq.gz -o CD8T_REH_1.5h_rep1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/012/SRR13228512/SRR13228512.fastq.gz -o Treg_IL2_4h_rep1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/025/SRR13228525/SRR13228525.fastq.gz -o CD8T_IL2_1.5h_rep1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/013/SRR13228513/SRR13228513.fastq.gz -o Treg_REH_4h_rep1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/018/SRR13228518/SRR13228518.fastq.gz -o Treg_REH_4h_rep2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/024/SRR13228524/SRR13228524.fastq.gz -o CD8T_0h_rep1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/023/SRR13228523/SRR13228523.fastq.gz -o Treg_REH_4h_rep3.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/014/SRR13228514/SRR13228514.fastq.gz -o Treg_0h_rep2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/022/SRR13228522/SRR13228522.fastq.gz -o Treg_IL2_4h_rep3.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/019/SRR13228519/SRR13228519.fastq.gz -o Treg_0h_rep3.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/021/SRR13228521/SRR13228521.fastq.gz -o Treg_REH_1.5h_rep3.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/020/SRR13228520/SRR13228520.fastq.gz -o Treg_IL2_1.5h_rep3.fastq.gz Upstream analysis The easiest way to obtain results from this type of data is to use mixcr analyze shotgun command: > mixcr analyze shotgun \\ --species hsa \\ --starting-material rna \\ --receptor-type bcr \\ fastq/CD8T_REH_4h_rep1.fastq.gz \\ result/CD8T_REH_4h_rep1 Arguments explained: --species is set to mmu for Mus Musculus --starting-material rna It affects the choice of V gene region which will be used as target in align step ( vParameters.geneFeatureToAlign , see align documentation ). By specifying rna as starting material, VTranscriptWithout5UTRWithP will be used as geneFeatureToAlign for V segment. --receptor-type is set to tcr since as the samples consist of isolated Treg and CD8+ T-cells. To process all samples together in one command a common practice is to use GNU Parallel : ls fastq/*.gz | parallel -j2 \\ 'mixcr analyze shotgun \\ --species mmu \\ --starting-material rna \\ --receptor-type tcr \\ {} \\ {=s:.*\\/:result/:;s:\\.fastq.gz::=}' Under the hood pipeline: Under the hood the command above actually executes the following pipeline: align Alignment of raw sequencing reads against reference database of V-, D-, J- and C- gene segments. # align raw reads mixcr align -s hsa \\ -p rna-seq \\ -OvParameters.geneFeatureToAlign = VTranscriptWithout5UTRWithP \\ -OallowPartialAlignments = true \\ --report results/CD8T_REH_4h_rep1.report \\ fastq/CD8T_REH_4h_rep1.fastq.gz \\ result/CD8T_REH_4h_rep1.vdjca Option --report is specified here explicitly. -p rnaseq defines a set of aligner parameters specifically for RNASeq data. -OallowPartialAlignments=true preserves partial alignments to be assembled with assemblePartial on the next step. assemblePartial Assembles alignments that only partially cover CDR3 region. This is a mandatory step for RNASeq data, as reads randomly cover all TCR / BCR segments. This function works with pairs of alignments (assembles two alignments at a time), thus it is usually recommended to perform two rounds of assemblePartial for better yield. For more information check mixcr assemblePartial # assemble overlapping fragmented sequencing reads # First round mixcr assemblePartial \\ --report results/CD8T_REH_4h_rep1.report \\ result/CD8T_REH_4h_rep1.vdjca \\ result/CD8T_REH_4h_rep1.rescued_1.clna #Second round mixcr assemblePartial \\ --report results/CD8T_REH_4h_rep1.report \\ result/CD8T_REH_4h_rep1.rescued_1.vdjca \\ result/CD8T_REH_4h_rep1.rescued_2.vdjca Note that we specify the same report file on every step, thus reports will be appended to the same file. extend If V- and/or J- segments are uniquely determined, but CDR3 edges lack nucleotides, mixcr extend will impute those from germline. This step is only applicable to T-cells due to the absence of hypermutations. mixcr extend \\ --report result/CD8T_REH_4h_rep1.report \\ result/CD8T_REH_4h_rep1.rescued_2.vdjca \\ result/CD8T_REH_4h_rep1.extended.vdjca assemble Assembles alignments into clonotypes and applies several layers of errors correction(ex. quality-awared correction for sequencing errors, clustering to correct for PCR errors). Check mixcr assemble for more information. Since data contains no primer sequences options -OseparateByV=true and -OseparateByJ=true are used, because we can be sure of V and J segments sequences and can use it to distinguish clones. # assemble CDR3 clonotypes mixcr assemble \\ -OseparateByV = true \\ -OseparateByJ = true \\ --report results/CD8T_REH_4h_rep1.report \\ result/CD8T_REH_4h_rep1.extended.vdjca \\ result/CD8T_REH_4h_rep1.clns export Exports clonotypes from .clns file into human-readable tables. # export to tsv > mixcr exportClones \\ -p full \\ result/CD8T_REH_4h_rep1.clns \\ CD8T_REH_4h_rep1.txt Here -p full defines the full preset of common export columns. Check mixcr export for more information. Quality control Now, when the analysis is complete, lets visualize quality report data. Looking at the alignment report in this case won't be of much help, because the cDNA library was ton enriched with TCR sequences, thus we already know that only a small part of reads has been successfully aligned. What is going to be more descriptive is to look at the chain usage among samples. > mixcr exportQc chainUsage \\ result/*.vdjca \\ chainUsage.pdf This plot reveals a mild contamination by B-cells, since IGH and IGKL chains present in the samples despite Treg and CD8+ cells have been isolated for library preparation. Full length BCR assembly Because RNAseq reads randomly cover the whole receptor gene region it is possible to assemble full-length sequences. To do that we should specify --contig-assembly option for mixcr analyze shotgun command. > mixcr analyze shotgun \\ --species hsa \\ --starting-material rna \\ --receptor-type bcr \\ --contig-assembly \\ fastq/CD8T_REH_4h_rep1.fastq.gz \\ result/CD8T_REH_4h_rep1 With this option MiXCR will try to assemble the longest possible sequences from input data. Under the hood this adjusts pipeline in the following manner: Modify mixcr assemble command by adding --write-alignments option. With this option MiXCR will output .clna file that preserves original alignments. > mixcr assemble \\ -OseparateByV = true \\ -OseparateByJ = true \\ --write-alignments \\ --report results/CD8T_REH_4h_rep1.report \\ result/CD8T_REH_4h_rep1.extended.vdjca \\ result/CD8T_REH_4h_rep1.clna An additional assembleContigs step will be added after mixcr assemble . On this step MiXCR will use previously preserved alignments to build wider contigs for clonal sequence. > mixcr assembleContigs \\ --report results/CD8T_REH_4h_rep1.report \\ result/CD8T_REH_4h_rep1.clna \\ result/CD8T_REH_4h_rep1.clns","title":"RNA-Seq data"},{"location":"mixcr/guides/rnaseq/#rnaseq","text":"Here we will discuss how to extract TCR repertoire from RNASeq data.","title":"RNASeq"},{"location":"mixcr/guides/rnaseq/#data-libraries","text":"This tutorial uses the data from the following publication: Calibration of cell-intrinsic interleukin-2 response thresholds guides design of a regulatory T cell biased agonist . Glassman CR et al., Elife 2021 May 18;10. doi: 10.7554/eLife.65777 Tregs were isolated from B6-Foxp3EGFP mice using CD4+ T cell isolation kit followed by fluorescence-activated cell sorting (FACS) for GFP expression to isolate Tregs. CD8+ T cells were isolated from C57BL/6J mice using CD8+ T cell isolation kit. Isolated cells were stimulated with 200 nM IL-2 or IL-2-REH and total RNA was extracted. 500 ng of RNA was used for RNA-Seq library preparation with the Kapa mRNA HyperPrep Kit (KK8580, Kapa Biosystems). DNA fragments between 250 bp and 400 bp were recovered, purified, and sequenced on an Illumina HiSeq3000 system (50 bp, single end). In this publication authors did not study immune repertoires. This is also an example of how MiXCR can retrieve data from experiments that were nor originally designed for obtaining TCR or BCR repertoires. The data for this tutorial can be downloaded using the script bellow. Download raw data #!/usr/bin/env bash curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/028/SRR13228528/SRR13228528.fastq.gz -o CD8T_REH_4h_rep1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/010/SRR13228510/SRR13228510.fastq.gz -o Treg_IL2_1.5h_rep1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/027/SRR13228527/SRR13228527.fastq.gz -o CD8T_IL2_4h_rep1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/016/SRR13228516/SRR13228516.fastq.gz -o Treg_REH_1.5h_rep2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/009/SRR13228509/SRR13228509.fastq.gz -o Treg_0h_rep1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/015/SRR13228515/SRR13228515.fastq.gz -o Treg_IL2_1.5h_rep2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/017/SRR13228517/SRR13228517.fastq.gz -o Treg_IL2_4h_rep2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/011/SRR13228511/SRR13228511.fastq.gz -o Treg_REH_1.5h_rep1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/026/SRR13228526/SRR13228526.fastq.gz -o CD8T_REH_1.5h_rep1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/012/SRR13228512/SRR13228512.fastq.gz -o Treg_IL2_4h_rep1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/025/SRR13228525/SRR13228525.fastq.gz -o CD8T_IL2_1.5h_rep1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/013/SRR13228513/SRR13228513.fastq.gz -o Treg_REH_4h_rep1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/018/SRR13228518/SRR13228518.fastq.gz -o Treg_REH_4h_rep2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/024/SRR13228524/SRR13228524.fastq.gz -o CD8T_0h_rep1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/023/SRR13228523/SRR13228523.fastq.gz -o Treg_REH_4h_rep3.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/014/SRR13228514/SRR13228514.fastq.gz -o Treg_0h_rep2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/022/SRR13228522/SRR13228522.fastq.gz -o Treg_IL2_4h_rep3.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/019/SRR13228519/SRR13228519.fastq.gz -o Treg_0h_rep3.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/021/SRR13228521/SRR13228521.fastq.gz -o Treg_REH_1.5h_rep3.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR132/020/SRR13228520/SRR13228520.fastq.gz -o Treg_IL2_1.5h_rep3.fastq.gz","title":"Data libraries"},{"location":"mixcr/guides/rnaseq/#upstream-analysis","text":"The easiest way to obtain results from this type of data is to use mixcr analyze shotgun command: > mixcr analyze shotgun \\ --species hsa \\ --starting-material rna \\ --receptor-type bcr \\ fastq/CD8T_REH_4h_rep1.fastq.gz \\ result/CD8T_REH_4h_rep1 Arguments explained: --species is set to mmu for Mus Musculus --starting-material rna It affects the choice of V gene region which will be used as target in align step ( vParameters.geneFeatureToAlign , see align documentation ). By specifying rna as starting material, VTranscriptWithout5UTRWithP will be used as geneFeatureToAlign for V segment. --receptor-type is set to tcr since as the samples consist of isolated Treg and CD8+ T-cells. To process all samples together in one command a common practice is to use GNU Parallel : ls fastq/*.gz | parallel -j2 \\ 'mixcr analyze shotgun \\ --species mmu \\ --starting-material rna \\ --receptor-type tcr \\ {} \\ {=s:.*\\/:result/:;s:\\.fastq.gz::=}'","title":"Upstream analysis"},{"location":"mixcr/guides/rnaseq/#under-the-hood-pipeline","text":"Under the hood the command above actually executes the following pipeline:","title":"Under the hood pipeline:"},{"location":"mixcr/guides/rnaseq/#align","text":"Alignment of raw sequencing reads against reference database of V-, D-, J- and C- gene segments. # align raw reads mixcr align -s hsa \\ -p rna-seq \\ -OvParameters.geneFeatureToAlign = VTranscriptWithout5UTRWithP \\ -OallowPartialAlignments = true \\ --report results/CD8T_REH_4h_rep1.report \\ fastq/CD8T_REH_4h_rep1.fastq.gz \\ result/CD8T_REH_4h_rep1.vdjca Option --report is specified here explicitly. -p rnaseq defines a set of aligner parameters specifically for RNASeq data. -OallowPartialAlignments=true preserves partial alignments to be assembled with assemblePartial on the next step.","title":"align"},{"location":"mixcr/guides/rnaseq/#assemblepartial","text":"Assembles alignments that only partially cover CDR3 region. This is a mandatory step for RNASeq data, as reads randomly cover all TCR / BCR segments. This function works with pairs of alignments (assembles two alignments at a time), thus it is usually recommended to perform two rounds of assemblePartial for better yield. For more information check mixcr assemblePartial # assemble overlapping fragmented sequencing reads # First round mixcr assemblePartial \\ --report results/CD8T_REH_4h_rep1.report \\ result/CD8T_REH_4h_rep1.vdjca \\ result/CD8T_REH_4h_rep1.rescued_1.clna #Second round mixcr assemblePartial \\ --report results/CD8T_REH_4h_rep1.report \\ result/CD8T_REH_4h_rep1.rescued_1.vdjca \\ result/CD8T_REH_4h_rep1.rescued_2.vdjca Note that we specify the same report file on every step, thus reports will be appended to the same file.","title":"assemblePartial"},{"location":"mixcr/guides/rnaseq/#extend","text":"If V- and/or J- segments are uniquely determined, but CDR3 edges lack nucleotides, mixcr extend will impute those from germline. This step is only applicable to T-cells due to the absence of hypermutations. mixcr extend \\ --report result/CD8T_REH_4h_rep1.report \\ result/CD8T_REH_4h_rep1.rescued_2.vdjca \\ result/CD8T_REH_4h_rep1.extended.vdjca","title":"extend"},{"location":"mixcr/guides/rnaseq/#assemble","text":"Assembles alignments into clonotypes and applies several layers of errors correction(ex. quality-awared correction for sequencing errors, clustering to correct for PCR errors). Check mixcr assemble for more information. Since data contains no primer sequences options -OseparateByV=true and -OseparateByJ=true are used, because we can be sure of V and J segments sequences and can use it to distinguish clones. # assemble CDR3 clonotypes mixcr assemble \\ -OseparateByV = true \\ -OseparateByJ = true \\ --report results/CD8T_REH_4h_rep1.report \\ result/CD8T_REH_4h_rep1.extended.vdjca \\ result/CD8T_REH_4h_rep1.clns","title":"assemble"},{"location":"mixcr/guides/rnaseq/#export","text":"Exports clonotypes from .clns file into human-readable tables. # export to tsv > mixcr exportClones \\ -p full \\ result/CD8T_REH_4h_rep1.clns \\ CD8T_REH_4h_rep1.txt Here -p full defines the full preset of common export columns. Check mixcr export for more information.","title":"export"},{"location":"mixcr/guides/rnaseq/#quality-control","text":"Now, when the analysis is complete, lets visualize quality report data. Looking at the alignment report in this case won't be of much help, because the cDNA library was ton enriched with TCR sequences, thus we already know that only a small part of reads has been successfully aligned. What is going to be more descriptive is to look at the chain usage among samples. > mixcr exportQc chainUsage \\ result/*.vdjca \\ chainUsage.pdf This plot reveals a mild contamination by B-cells, since IGH and IGKL chains present in the samples despite Treg and CD8+ cells have been isolated for library preparation.","title":"Quality control"},{"location":"mixcr/guides/rnaseq/#full-length-bcr-assembly","text":"Because RNAseq reads randomly cover the whole receptor gene region it is possible to assemble full-length sequences. To do that we should specify --contig-assembly option for mixcr analyze shotgun command. > mixcr analyze shotgun \\ --species hsa \\ --starting-material rna \\ --receptor-type bcr \\ --contig-assembly \\ fastq/CD8T_REH_4h_rep1.fastq.gz \\ result/CD8T_REH_4h_rep1 With this option MiXCR will try to assemble the longest possible sequences from input data. Under the hood this adjusts pipeline in the following manner: Modify mixcr assemble command by adding --write-alignments option. With this option MiXCR will output .clna file that preserves original alignments. > mixcr assemble \\ -OseparateByV = true \\ -OseparateByJ = true \\ --write-alignments \\ --report results/CD8T_REH_4h_rep1.report \\ result/CD8T_REH_4h_rep1.extended.vdjca \\ result/CD8T_REH_4h_rep1.clna An additional assembleContigs step will be added after mixcr assemble . On this step MiXCR will use previously preserved alignments to build wider contigs for clonal sequence. > mixcr assembleContigs \\ --report results/CD8T_REH_4h_rep1.report \\ result/CD8T_REH_4h_rep1.clna \\ result/CD8T_REH_4h_rep1.clns","title":"Full length BCR assembly"},{"location":"mixcr/guides/takara-hsa-bcr/","text":"SMARTer Human BCR IgG IgM H/K/L Profiling Sequencing Kit (Takara Bio Inc.) Here we will discuss how to process BCR cDNA libraries obtained with SMARTer Human BCR IgG IgM H/K/L Profiling Sequencing Kit (Takara Bio Inc.). Data libraries This tutorial uses the data from the following publication: The autoimmune signature of hyperinflammatory multisystem inflammatory syndrome in children Rebecca A. Porritt, et al,JCI (2021) doi:10.1172/JCI151520 Library construction was performed using the SMARTer Human BCR IgG IgM H/K/L Profiling Sequencing Kit (Takara Bio Inc.). Up to 50 ng of total RNA per sample was used for reverse transcription, followed by 4 separate PCR amplification reactions for IgG, IgM, IgK, and IgL. A second round of PCR amplified the entire BCR variable region and a small portion of the constant region. After size selection, quantification and fragment analysis of the individual libraries were performed. Individual chains were then pooled and sequenced on the MiSeq (Illumina) using 2 \u00d7 300 bp sequencing. Fastq raw data have been deposited in the European Nucleotide Archive (ENA) under accession number PRJEB44566. Note FASTQ files have been merged, thus every pair of FASTQ files holds sequences for all chains corresponding to a sample. On the scheme bellow you can see structure of cDNA library. UMI is located in the first 12 bp of R2. All data may be downloaded directly from SRA using e.g. SRA Explorer : Use this script to download the full data set with the proper filenames for the tutorial: #!/usr/bin/env bash #!/usr/bin/env bash curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/003/ERR5952573/ERR5952573_1.fastq.gz -o FebControl1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/003/ERR5952573/ERR5952573_2.fastq.gz -o FebControl1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/004/ERR5952574/ERR5952574_1.fastq.gz -o FebControl2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/004/ERR5952574/ERR5952574_2.fastq.gz -o FebControl2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/005/ERR5952575/ERR5952575_1.fastq.gz -o FebControl3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/005/ERR5952575/ERR5952575_2.fastq.gz -o FebControl3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/006/ERR5952576/ERR5952576_1.fastq.gz -o FebControl4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/006/ERR5952576/ERR5952576_2.fastq.gz -o FebControl4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/007/ERR5952577/ERR5952577_1.fastq.gz -o FebControl5_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/007/ERR5952577/ERR5952577_2.fastq.gz -o FebControl5_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/008/ERR5952578/ERR5952578_1.fastq.gz -o FebControl6_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/008/ERR5952578/ERR5952578_2.fastq.gz -o FebControl6_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/009/ERR5952579/ERR5952579_1.fastq.gz -o FebControl7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/009/ERR5952579/ERR5952579_2.fastq.gz -o FebControl7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/000/ERR5952580/ERR5952580_1.fastq.gz -o FebControl8_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/000/ERR5952580/ERR5952580_2.fastq.gz -o FebControl8_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/001/ERR5952581/ERR5952581_1.fastq.gz -o FebControl9_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/001/ERR5952581/ERR5952581_2.fastq.gz -o FebControl9_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/002/ERR5952582/ERR5952582_1.fastq.gz -o FebControl10_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/002/ERR5952582/ERR5952582_2.fastq.gz -o FebControl10_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/003/ERR5952583/ERR5952583_1.fastq.gz -o FebControl11_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/003/ERR5952583/ERR5952583_2.fastq.gz -o FebControl11_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/004/ERR5952584/ERR5952584_1.fastq.gz -o FebControl12_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/004/ERR5952584/ERR5952584_2.fastq.gz -o FebControl12_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/005/ERR5952585/ERR5952585_1.fastq.gz -o FebControl13_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/005/ERR5952585/ERR5952585_2.fastq.gz -o FebControl13_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/006/ERR5952586/ERR5952586_1.fastq.gz -o FebControl14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/006/ERR5952586/ERR5952586_2.fastq.gz -o FebControl14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/007/ERR5952587/ERR5952587_1.fastq.gz -o FebControl15_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/007/ERR5952587/ERR5952587_2.fastq.gz -o FebControl15_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/008/ERR5952588/ERR5952588_1.fastq.gz -o MISC1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/008/ERR5952588/ERR5952588_2.fastq.gz -o MISC1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/009/ERR5952589/ERR5952589_1.fastq.gz -o MISC2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/009/ERR5952589/ERR5952589_2.fastq.gz -o MISC2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/000/ERR5952590/ERR5952590_1.fastq.gz -o MISC3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/000/ERR5952590/ERR5952590_2.fastq.gz -o MISC3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/001/ERR5952591/ERR5952591_1.fastq.gz -o MISC4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/001/ERR5952591/ERR5952591_2.fastq.gz -o MISC4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/002/ERR5952592/ERR5952592_1.fastq.gz -o MISC5_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/002/ERR5952592/ERR5952592_2.fastq.gz -o MISC5_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/003/ERR5952593/ERR5952593_1.fastq.gz -o MISC6_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/003/ERR5952593/ERR5952593_2.fastq.gz -o MISC6_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/004/ERR5952594/ERR5952594_1.fastq.gz -o MISC7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/004/ERR5952594/ERR5952594_2.fastq.gz -o MISC7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/005/ERR5952595/ERR5952595_1.fastq.gz -o MISC8_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/005/ERR5952595/ERR5952595_2.fastq.gz -o MISC8_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/006/ERR5952596/ERR5952596_1.fastq.gz -o MISC9_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/006/ERR5952596/ERR5952596_2.fastq.gz -o MISC9_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/007/ERR5952597/ERR5952597_1.fastq.gz -o MISC10_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/007/ERR5952597/ERR5952597_2.fastq.gz -o MISC10_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/008/ERR5952598/ERR5952598_1.fastq.gz -o MISC11_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/008/ERR5952598/ERR5952598_2.fastq.gz -o MISC11_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/009/ERR5952599/ERR5952599_1.fastq.gz -o MISC12_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/009/ERR5952599/ERR5952599_2.fastq.gz -o MISC12_R2.fastq.gz Upstream analysis The most straightforward way to get clonotype tables is to use a universal mixcr analyze command. According to the library preparation protocol, the library does not have any V primers on 5'-end and has C primers on 3' end. Thus, the command for a single sample is the following: > mixcr analyze amplicon \\ --species hsa \\ --starting-material rna \\ --receptor-type bcr \\ --5-end no-v-primers \\ --3-end c-primers \\ --adapters no-adapters \\ --assemble \"-OassemblingFeatures={FR1Begin:FR4End}\" \\ --umi-pattern \"^N{7}(R1:*) \\ ^(UMI:N{12})N{4}(R2:*)\" \\ fastq/FebControl1_R1.fastq.gz \\ fastq/FebControl1_R2.fastq.gz \\ results/FebControl1 The meaning of these options is the following. --species is set to hsa for Homo Sapience --starting-material RNA or DNA. It affects the choice of V gene region which will be used as target in align step ( vParameters.geneFeatureToAlign , see align documentation ): rna corresponds to the VTranscriptWithout5UTRWithP and dna to VGeneWithP (see Gene features and anchor points for details) --receptor-type bcr . It affects the choice of underlying alignment algorithms: MiXCR uses fundamentally different algorithms for TCRs and BCRs because BCRs have somatic hypermutations and long indels. --umi-pattern is used to specify UMI pattern for the library. MiXCR provides a powerful regex-like language allowing to specify almost arbitrary barcode structure. Here we use ^N{7}(R1:*) \\ ^(UMI:N{12})N{4}(R2:*) pattern to specify the location of UMI. --5-end is set to no-v-primers , because the library was obtained using 5'RACE. This leads to a global alignment algorithm on the left bound of V gene. --3-end-primers is set c-primers according to the cDNA library preparation protocol. --adapers is set to no-adapters . Presence or absence of adapter sequences results in the choice between local and global alignment algorithms on the edges of the target sequence. --assemble \"-OassemblingFeatures={FR1Begin:FR4End}\" . We pass an extra parameter to mixcr assemble step of the pipeline. By default, clones are assembled by CDR3 sequence, but in case of full-length BCR data we want to extend this assembling feature to capture hypermutations in V gene. Running the command above will generate the following files: > ls result/ # human-readable reports FebControl1.report # raw alignments (highly compressed binary file) FebControl1.vdjca # alignments with corrected UMI barcode sequences FebControl1.corrected.vdjca # IGH, IGK and IGL CDR3 clonotypes (highly compressed binary file) FebControl1.clns # IGH, IGK and IGL CDR3 clonotypes exported in tab-delimited txt FebControl1.clonotypes.IGH.tsv FebControl1.clonotypes.IGK.tsv FebControl1.clonotypes.IGL.tsv Obtained *.tsv files can be used for manual examination. *.clns files can be used for downstream analysis using mixcr postanalisis . By default, MiXCR exports clonotypes in a tab-delimited format separately for each immunological chain. In order to run the analysis for all samples in the project on Linux we can use GNU Parallel in the following way: > ls /fastq/*_R1* | \\ parallel -j2 \\ 'mixcr analyze amplicon \\ --species hsa \\ --starting-material rna \\ --receptor-type bcr \\ --5-end no-v-primers \\ --3-end c-primers \\ --adapters no-adapters \\ --assemble \"-OassemblingFeatures={FR1Begin:FR4End}\" \\ --umi-pattern \"^N{\"7\"}(R1:*) \\ ^(UMI:N{\"12\"})N{\"4\"}(R2:*)\" \\ --report {=s:.*/:results/:;s:_R1.*:\\.report:=} \\ {} \\ {=s:R1:R2:=} \\ {=s:.*/:results/:;s:_R1.*::=}' Under the hood pipeline: Under the hood the command above actually executes the following pipeline: align Alignment of raw sequencing reads against reference database of V-, D-, J- and C- gene segments. # align raw reads > mixcr align -s hsa \\ -p kAligner2 \\ -OvParameters.geneFeatureToAlign = \"VTranscriptWithout5UTRWithP\" \\ -OvParameters.parameters.floatingLeftBound = false \\ -OjParameters.parameters.floatingRightBound = false \\ -OcParameters.parameters.floatingRightBound = false \\ --report results/13_d60_lymph_node_germinal_center_B_cell.report \\ --tag-pattern '^N{7}(R1:*) \\ ^(UMI:N{12})N{4}(R2:*)' \\ fastq/FebControl1_R1.fastq.gz \\ fastq/FebControl1_R2.fastq.gz \\ FebControl1.vdjca Option --report is specified here explicitly. - -p kAligner2 specifies an BCR aligner. - -OvParameters.parameters.floatingLeftBound=false -OjParameters.parameters.floatingRightBound=false -OcParameters.parameters.floatingRightBound=false are all set to false which results in a global aligning algorithm on all segment bounds. correctAndSortTags Corrects sequencing and PCR errors inside barcode sequences. This step is essential to correct artificial diversity caused by errors in barcodes. > mixcr correctAndSortTags \\ --report FebControl1.report \\ --json-report FebControl1.report.json \\ FebControl1.vdjca \\ FebControl1.corrected.vdjca assemble Assembles alignments into clonotypes and applies several layers of errors correction(ex. quality-awared correction for sequencing errors, clustering to correct for PCR errors). Check mixcr assemble for more information. # assemble CDR3 clonotypes > mixcr assemble \\ -OseparateByV = true \\ -OseparateByJ = true \\ -OseparateByC = true \\ -OassemblingFeatures ={ FR1Begin:FR4End } \\ --report FebControl1.corrected.report \\ FebControl1.corrected.vdjca \\ FebControl1.clns Since no V primers are present and isotype specific C primers were used, we can separate clones by V, J and C segments even if they have the same CDR3 . This is important especially for BCR data due to hypermutations and in order to identify isotypes. export Exports clonotypes from .clns file into human-readable tables. # export to tsv > mixcr exportClones \\ -p full \\ FebControl1.clns \\ FebControl1.tsv Here -p full defines the full preset of common export columns. Check mixcr export for more information. Quality control Now when we have all files processed lets perform Quality Control. That can be easily done using mixcr exportQc function. # obtain alignment quality control > mixcr exportQc align \\ result/*.vdjca \\ alignQc.pdf The plot above demonstrates a high quality alignment rate. Now Lets look at the chain distribution in every sample. # obtain chain usage plot > mixcr exportQc chainUsage \\ result/*.vdjca \\ usageQc.pdf We see that in most sample number of light chains significantly dominate over IGH. Since libraries for all chains were generated in a separate PCR reactions according to the protocol, we might suggest that this bias arise from unequal mixing of cDNA libraries prior sequencing.","title":"SMARTer Human BCR IgG IgM H/K/L Profiling Kit"},{"location":"mixcr/guides/takara-hsa-bcr/#smarter-human-bcr-igg-igm-hkl-profiling-sequencing-kit-takara-bio-inc","text":"Here we will discuss how to process BCR cDNA libraries obtained with SMARTer Human BCR IgG IgM H/K/L Profiling Sequencing Kit (Takara Bio Inc.).","title":"SMARTer Human BCR IgG IgM H/K/L Profiling Sequencing Kit (Takara Bio Inc.)"},{"location":"mixcr/guides/takara-hsa-bcr/#data-libraries","text":"This tutorial uses the data from the following publication: The autoimmune signature of hyperinflammatory multisystem inflammatory syndrome in children Rebecca A. Porritt, et al,JCI (2021) doi:10.1172/JCI151520 Library construction was performed using the SMARTer Human BCR IgG IgM H/K/L Profiling Sequencing Kit (Takara Bio Inc.). Up to 50 ng of total RNA per sample was used for reverse transcription, followed by 4 separate PCR amplification reactions for IgG, IgM, IgK, and IgL. A second round of PCR amplified the entire BCR variable region and a small portion of the constant region. After size selection, quantification and fragment analysis of the individual libraries were performed. Individual chains were then pooled and sequenced on the MiSeq (Illumina) using 2 \u00d7 300 bp sequencing. Fastq raw data have been deposited in the European Nucleotide Archive (ENA) under accession number PRJEB44566. Note FASTQ files have been merged, thus every pair of FASTQ files holds sequences for all chains corresponding to a sample. On the scheme bellow you can see structure of cDNA library. UMI is located in the first 12 bp of R2. All data may be downloaded directly from SRA using e.g. SRA Explorer : Use this script to download the full data set with the proper filenames for the tutorial: #!/usr/bin/env bash #!/usr/bin/env bash curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/003/ERR5952573/ERR5952573_1.fastq.gz -o FebControl1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/003/ERR5952573/ERR5952573_2.fastq.gz -o FebControl1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/004/ERR5952574/ERR5952574_1.fastq.gz -o FebControl2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/004/ERR5952574/ERR5952574_2.fastq.gz -o FebControl2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/005/ERR5952575/ERR5952575_1.fastq.gz -o FebControl3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/005/ERR5952575/ERR5952575_2.fastq.gz -o FebControl3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/006/ERR5952576/ERR5952576_1.fastq.gz -o FebControl4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/006/ERR5952576/ERR5952576_2.fastq.gz -o FebControl4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/007/ERR5952577/ERR5952577_1.fastq.gz -o FebControl5_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/007/ERR5952577/ERR5952577_2.fastq.gz -o FebControl5_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/008/ERR5952578/ERR5952578_1.fastq.gz -o FebControl6_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/008/ERR5952578/ERR5952578_2.fastq.gz -o FebControl6_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/009/ERR5952579/ERR5952579_1.fastq.gz -o FebControl7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/009/ERR5952579/ERR5952579_2.fastq.gz -o FebControl7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/000/ERR5952580/ERR5952580_1.fastq.gz -o FebControl8_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/000/ERR5952580/ERR5952580_2.fastq.gz -o FebControl8_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/001/ERR5952581/ERR5952581_1.fastq.gz -o FebControl9_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/001/ERR5952581/ERR5952581_2.fastq.gz -o FebControl9_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/002/ERR5952582/ERR5952582_1.fastq.gz -o FebControl10_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/002/ERR5952582/ERR5952582_2.fastq.gz -o FebControl10_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/003/ERR5952583/ERR5952583_1.fastq.gz -o FebControl11_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/003/ERR5952583/ERR5952583_2.fastq.gz -o FebControl11_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/004/ERR5952584/ERR5952584_1.fastq.gz -o FebControl12_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/004/ERR5952584/ERR5952584_2.fastq.gz -o FebControl12_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/005/ERR5952585/ERR5952585_1.fastq.gz -o FebControl13_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/005/ERR5952585/ERR5952585_2.fastq.gz -o FebControl13_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/006/ERR5952586/ERR5952586_1.fastq.gz -o FebControl14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/006/ERR5952586/ERR5952586_2.fastq.gz -o FebControl14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/007/ERR5952587/ERR5952587_1.fastq.gz -o FebControl15_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/007/ERR5952587/ERR5952587_2.fastq.gz -o FebControl15_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/008/ERR5952588/ERR5952588_1.fastq.gz -o MISC1_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/008/ERR5952588/ERR5952588_2.fastq.gz -o MISC1_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/009/ERR5952589/ERR5952589_1.fastq.gz -o MISC2_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/009/ERR5952589/ERR5952589_2.fastq.gz -o MISC2_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/000/ERR5952590/ERR5952590_1.fastq.gz -o MISC3_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/000/ERR5952590/ERR5952590_2.fastq.gz -o MISC3_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/001/ERR5952591/ERR5952591_1.fastq.gz -o MISC4_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/001/ERR5952591/ERR5952591_2.fastq.gz -o MISC4_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/002/ERR5952592/ERR5952592_1.fastq.gz -o MISC5_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/002/ERR5952592/ERR5952592_2.fastq.gz -o MISC5_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/003/ERR5952593/ERR5952593_1.fastq.gz -o MISC6_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/003/ERR5952593/ERR5952593_2.fastq.gz -o MISC6_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/004/ERR5952594/ERR5952594_1.fastq.gz -o MISC7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/004/ERR5952594/ERR5952594_2.fastq.gz -o MISC7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/005/ERR5952595/ERR5952595_1.fastq.gz -o MISC8_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/005/ERR5952595/ERR5952595_2.fastq.gz -o MISC8_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/006/ERR5952596/ERR5952596_1.fastq.gz -o MISC9_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/006/ERR5952596/ERR5952596_2.fastq.gz -o MISC9_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/007/ERR5952597/ERR5952597_1.fastq.gz -o MISC10_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/007/ERR5952597/ERR5952597_2.fastq.gz -o MISC10_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/008/ERR5952598/ERR5952598_1.fastq.gz -o MISC11_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/008/ERR5952598/ERR5952598_2.fastq.gz -o MISC11_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/009/ERR5952599/ERR5952599_1.fastq.gz -o MISC12_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR595/009/ERR5952599/ERR5952599_2.fastq.gz -o MISC12_R2.fastq.gz","title":"Data libraries"},{"location":"mixcr/guides/takara-hsa-bcr/#upstream-analysis","text":"The most straightforward way to get clonotype tables is to use a universal mixcr analyze command. According to the library preparation protocol, the library does not have any V primers on 5'-end and has C primers on 3' end. Thus, the command for a single sample is the following: > mixcr analyze amplicon \\ --species hsa \\ --starting-material rna \\ --receptor-type bcr \\ --5-end no-v-primers \\ --3-end c-primers \\ --adapters no-adapters \\ --assemble \"-OassemblingFeatures={FR1Begin:FR4End}\" \\ --umi-pattern \"^N{7}(R1:*) \\ ^(UMI:N{12})N{4}(R2:*)\" \\ fastq/FebControl1_R1.fastq.gz \\ fastq/FebControl1_R2.fastq.gz \\ results/FebControl1 The meaning of these options is the following. --species is set to hsa for Homo Sapience --starting-material RNA or DNA. It affects the choice of V gene region which will be used as target in align step ( vParameters.geneFeatureToAlign , see align documentation ): rna corresponds to the VTranscriptWithout5UTRWithP and dna to VGeneWithP (see Gene features and anchor points for details) --receptor-type bcr . It affects the choice of underlying alignment algorithms: MiXCR uses fundamentally different algorithms for TCRs and BCRs because BCRs have somatic hypermutations and long indels. --umi-pattern is used to specify UMI pattern for the library. MiXCR provides a powerful regex-like language allowing to specify almost arbitrary barcode structure. Here we use ^N{7}(R1:*) \\ ^(UMI:N{12})N{4}(R2:*) pattern to specify the location of UMI. --5-end is set to no-v-primers , because the library was obtained using 5'RACE. This leads to a global alignment algorithm on the left bound of V gene. --3-end-primers is set c-primers according to the cDNA library preparation protocol. --adapers is set to no-adapters . Presence or absence of adapter sequences results in the choice between local and global alignment algorithms on the edges of the target sequence. --assemble \"-OassemblingFeatures={FR1Begin:FR4End}\" . We pass an extra parameter to mixcr assemble step of the pipeline. By default, clones are assembled by CDR3 sequence, but in case of full-length BCR data we want to extend this assembling feature to capture hypermutations in V gene. Running the command above will generate the following files: > ls result/ # human-readable reports FebControl1.report # raw alignments (highly compressed binary file) FebControl1.vdjca # alignments with corrected UMI barcode sequences FebControl1.corrected.vdjca # IGH, IGK and IGL CDR3 clonotypes (highly compressed binary file) FebControl1.clns # IGH, IGK and IGL CDR3 clonotypes exported in tab-delimited txt FebControl1.clonotypes.IGH.tsv FebControl1.clonotypes.IGK.tsv FebControl1.clonotypes.IGL.tsv Obtained *.tsv files can be used for manual examination. *.clns files can be used for downstream analysis using mixcr postanalisis . By default, MiXCR exports clonotypes in a tab-delimited format separately for each immunological chain. In order to run the analysis for all samples in the project on Linux we can use GNU Parallel in the following way: > ls /fastq/*_R1* | \\ parallel -j2 \\ 'mixcr analyze amplicon \\ --species hsa \\ --starting-material rna \\ --receptor-type bcr \\ --5-end no-v-primers \\ --3-end c-primers \\ --adapters no-adapters \\ --assemble \"-OassemblingFeatures={FR1Begin:FR4End}\" \\ --umi-pattern \"^N{\"7\"}(R1:*) \\ ^(UMI:N{\"12\"})N{\"4\"}(R2:*)\" \\ --report {=s:.*/:results/:;s:_R1.*:\\.report:=} \\ {} \\ {=s:R1:R2:=} \\ {=s:.*/:results/:;s:_R1.*::=}'","title":"Upstream analysis"},{"location":"mixcr/guides/takara-hsa-bcr/#under-the-hood-pipeline","text":"Under the hood the command above actually executes the following pipeline:","title":"Under the hood pipeline:"},{"location":"mixcr/guides/takara-hsa-bcr/#align","text":"Alignment of raw sequencing reads against reference database of V-, D-, J- and C- gene segments. # align raw reads > mixcr align -s hsa \\ -p kAligner2 \\ -OvParameters.geneFeatureToAlign = \"VTranscriptWithout5UTRWithP\" \\ -OvParameters.parameters.floatingLeftBound = false \\ -OjParameters.parameters.floatingRightBound = false \\ -OcParameters.parameters.floatingRightBound = false \\ --report results/13_d60_lymph_node_germinal_center_B_cell.report \\ --tag-pattern '^N{7}(R1:*) \\ ^(UMI:N{12})N{4}(R2:*)' \\ fastq/FebControl1_R1.fastq.gz \\ fastq/FebControl1_R2.fastq.gz \\ FebControl1.vdjca Option --report is specified here explicitly. - -p kAligner2 specifies an BCR aligner. - -OvParameters.parameters.floatingLeftBound=false -OjParameters.parameters.floatingRightBound=false -OcParameters.parameters.floatingRightBound=false are all set to false which results in a global aligning algorithm on all segment bounds.","title":"align"},{"location":"mixcr/guides/takara-hsa-bcr/#correctandsorttags","text":"Corrects sequencing and PCR errors inside barcode sequences. This step is essential to correct artificial diversity caused by errors in barcodes. > mixcr correctAndSortTags \\ --report FebControl1.report \\ --json-report FebControl1.report.json \\ FebControl1.vdjca \\ FebControl1.corrected.vdjca","title":"correctAndSortTags"},{"location":"mixcr/guides/takara-hsa-bcr/#assemble","text":"Assembles alignments into clonotypes and applies several layers of errors correction(ex. quality-awared correction for sequencing errors, clustering to correct for PCR errors). Check mixcr assemble for more information. # assemble CDR3 clonotypes > mixcr assemble \\ -OseparateByV = true \\ -OseparateByJ = true \\ -OseparateByC = true \\ -OassemblingFeatures ={ FR1Begin:FR4End } \\ --report FebControl1.corrected.report \\ FebControl1.corrected.vdjca \\ FebControl1.clns Since no V primers are present and isotype specific C primers were used, we can separate clones by V, J and C segments even if they have the same CDR3 . This is important especially for BCR data due to hypermutations and in order to identify isotypes.","title":"assemble"},{"location":"mixcr/guides/takara-hsa-bcr/#export","text":"Exports clonotypes from .clns file into human-readable tables. # export to tsv > mixcr exportClones \\ -p full \\ FebControl1.clns \\ FebControl1.tsv Here -p full defines the full preset of common export columns. Check mixcr export for more information.","title":"export"},{"location":"mixcr/guides/takara-hsa-bcr/#quality-control","text":"Now when we have all files processed lets perform Quality Control. That can be easily done using mixcr exportQc function. # obtain alignment quality control > mixcr exportQc align \\ result/*.vdjca \\ alignQc.pdf The plot above demonstrates a high quality alignment rate. Now Lets look at the chain distribution in every sample. # obtain chain usage plot > mixcr exportQc chainUsage \\ result/*.vdjca \\ usageQc.pdf We see that in most sample number of light chains significantly dominate over IGH. Since libraries for all chains were generated in a separate PCR reactions according to the protocol, we might suggest that this bias arise from unequal mixing of cDNA libraries prior sequencing.","title":"Quality control"},{"location":"mixcr/guides/takara-mmu-tcr/","text":"SMARTer Mouse TCR a/b Profiling Kit Here we will discuss how to process TCR cDNA libraries obtained with SMARTer Mouse TCR a/b Profiling Kit. Data libraries This tutorial uses the data from the following publication: A T cell repertoire timestamp is at the core of responsiveness to CTLA-4 blockade Hagit Philip et al., , iScience, 2021 Feb; doi: 10.1016/j.isci.2021.102100 Samples were collected from 20 mice implanted with MC38 adenocarcinoma cells. The experiment contained 2 groups, of which the first group (5 animals with ids A - E) was dosed with 10 ml/kg/day of vehicle on day 1, 3 and 6 of the experiment. The second group (15 animals with ids F - T) was dosed with the investigational antibody anti-mCTLA4 (5/2.5 mg/kg/day at 1/3, 6). After treatment with the immune checkpoint inhibitor antibody anti-mCTLA4 blood samples for the preparation of PBMCs were taken at days 0,7,14 and 21. Tumors (where still visible) and spleens were collected immediately after euthanasia, and directly transferred to liquid nitrogen (snap-frozen samples). Total RNA was isolated from every sample and cDNA libraries were prepared using SMARTer Mouse TCR a/b Profiling Kit. TCR sequencing was performed on an Illumina Miseq sequencer using the 600-cycle Miseq reagent kit v3(Illumina) with pair-end, 2x300 base pair reads. The data for this tutorial can be downloaded using the script bellow. #!/usr/bin/env bash curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/021/SRR12487521/SRR12487521_1.fastq.gz -o S_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/022/SRR12487522/SRR12487522_1.fastq.gz -o S_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/023/SRR12487523/SRR12487523_1.fastq.gz -o S_21_R1.fastq.gz See full script #!/usr/bin/env bash curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/021/SRR12487521/SRR12487521_1.fastq.gz -o S_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/022/SRR12487522/SRR12487522_1.fastq.gz -o S_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/023/SRR12487523/SRR12487523_1.fastq.gz -o S_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/024/SRR12487524/SRR12487524_1.fastq.gz -o S_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/025/SRR12487525/SRR12487525_1.fastq.gz -o S_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/026/SRR12487526/SRR12487526_1.fastq.gz -o I_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/027/SRR12487527/SRR12487527_1.fastq.gz -o I_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/028/SRR12487528/SRR12487528_1.fastq.gz -o I_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/029/SRR12487529/SRR12487529_1.fastq.gz -o I_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/030/SRR12487530/SRR12487530_1.fastq.gz -o I_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/031/SRR12487531/SRR12487531_1.fastq.gz -o T_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/032/SRR12487532/SRR12487532_1.fastq.gz -o J_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/033/SRR12487533/SRR12487533_1.fastq.gz -o J_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/034/SRR12487534/SRR12487534_1.fastq.gz -o J_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/035/SRR12487535/SRR12487535_1.fastq.gz -o J_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/036/SRR12487536/SRR12487536_1.fastq.gz -o J_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/037/SRR12487537/SRR12487537_1.fastq.gz -o A_t_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/038/SRR12487538/SRR12487538_1.fastq.gz -o A_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/039/SRR12487539/SRR12487539_1.fastq.gz -o A_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/040/SRR12487540/SRR12487540_1.fastq.gz -o A_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/041/SRR12487541/SRR12487541_1.fastq.gz -o M_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/042/SRR12487542/SRR12487542_1.fastq.gz -o T_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/043/SRR12487543/SRR12487543_1.fastq.gz -o M_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/044/SRR12487544/SRR12487544_1.fastq.gz -o M_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/045/SRR12487545/SRR12487545_1.fastq.gz -o M_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/046/SRR12487546/SRR12487546_1.fastq.gz -o M_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/047/SRR12487547/SRR12487547_1.fastq.gz -o G_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/048/SRR12487548/SRR12487548_1.fastq.gz -o G_t_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/049/SRR12487549/SRR12487549_1.fastq.gz -o G_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/050/SRR12487550/SRR12487550_1.fastq.gz -o G_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/051/SRR12487551/SRR12487551_1.fastq.gz -o G_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/052/SRR12487552/SRR12487552_1.fastq.gz -o G_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/053/SRR12487553/SRR12487553_1.fastq.gz -o T_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/054/SRR12487554/SRR12487554_1.fastq.gz -o O_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/055/SRR12487555/SRR12487555_1.fastq.gz -o O_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/056/SRR12487556/SRR12487556_1.fastq.gz -o O_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/057/SRR12487557/SRR12487557_1.fastq.gz -o O_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/058/SRR12487558/SRR12487558_1.fastq.gz -o O_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/059/SRR12487559/SRR12487559_1.fastq.gz -o R_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/060/SRR12487560/SRR12487560_1.fastq.gz -o R_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/061/SRR12487561/SRR12487561_1.fastq.gz -o R_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/062/SRR12487562/SRR12487562_1.fastq.gz -o R_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/063/SRR12487563/SRR12487563_1.fastq.gz -o R_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/064/SRR12487564/SRR12487564_1.fastq.gz -o T_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/065/SRR12487565/SRR12487565_1.fastq.gz -o H_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/066/SRR12487566/SRR12487566_1.fastq.gz -o H_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/067/SRR12487567/SRR12487567_1.fastq.gz -o H_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/068/SRR12487568/SRR12487568_1.fastq.gz -o H_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/069/SRR12487569/SRR12487569_1.fastq.gz -o H_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/070/SRR12487570/SRR12487570_1.fastq.gz -o P_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/071/SRR12487571/SRR12487571_1.fastq.gz -o P_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/072/SRR12487572/SRR12487572_1.fastq.gz -o P_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/073/SRR12487573/SRR12487573_1.fastq.gz -o P_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/074/SRR12487574/SRR12487574_1.fastq.gz -o P_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/075/SRR12487575/SRR12487575_1.fastq.gz -o T_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/076/SRR12487576/SRR12487576_1.fastq.gz -o E_t_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/077/SRR12487577/SRR12487577_1.fastq.gz -o E_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/078/SRR12487578/SRR12487578_1.fastq.gz -o E_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/079/SRR12487579/SRR12487579_1.fastq.gz -o E_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/080/SRR12487580/SRR12487580_1.fastq.gz -o E_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/081/SRR12487581/SRR12487581_1.fastq.gz -o E_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/082/SRR12487582/SRR12487582_1.fastq.gz -o D_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/083/SRR12487583/SRR12487583_1.fastq.gz -o D_t_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/084/SRR12487584/SRR12487584_1.fastq.gz -o D_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/085/SRR12487585/SRR12487585_1.fastq.gz -o D_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/086/SRR12487586/SRR12487586_1.fastq.gz -o Q_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/087/SRR12487587/SRR12487587_1.fastq.gz -o D_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/088/SRR12487588/SRR12487588_1.fastq.gz -o D_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/089/SRR12487589/SRR12487589_1.fastq.gz -o K_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/090/SRR12487590/SRR12487590_1.fastq.gz -o K_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/091/SRR12487591/SRR12487591_1.fastq.gz -o K_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/092/SRR12487592/SRR12487592_1.fastq.gz -o K_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/093/SRR12487593/SRR12487593_1.fastq.gz -o L_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/094/SRR12487594/SRR12487594_1.fastq.gz -o L_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/095/SRR12487595/SRR12487595_1.fastq.gz -o L_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/096/SRR12487596/SRR12487596_1.fastq.gz -o L_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/097/SRR12487597/SRR12487597_1.fastq.gz -o Q_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/098/SRR12487598/SRR12487598_1.fastq.gz -o L_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/099/SRR12487599/SRR12487599_1.fastq.gz -o F_t_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/000/SRR12487600/SRR12487600_1.fastq.gz -o F_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/001/SRR12487601/SRR12487601_1.fastq.gz -o F_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/002/SRR12487602/SRR12487602_1.fastq.gz -o F_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/003/SRR12487603/SRR12487603_1.fastq.gz -o F_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/004/SRR12487604/SRR12487604_1.fastq.gz -o F_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/005/SRR12487605/SRR12487605_1.fastq.gz -o N_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/006/SRR12487606/SRR12487606_1.fastq.gz -o N_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/007/SRR12487607/SRR12487607_1.fastq.gz -o N_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/008/SRR12487608/SRR12487608_1.fastq.gz -o Q_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/009/SRR12487609/SRR12487609_1.fastq.gz -o N_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/010/SRR12487610/SRR12487610_1.fastq.gz -o N_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/011/SRR12487611/SRR12487611_1.fastq.gz -o C_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/012/SRR12487612/SRR12487612_1.fastq.gz -o C_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/013/SRR12487613/SRR12487613_1.fastq.gz -o C_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/014/SRR12487614/SRR12487614_1.fastq.gz -o C_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/015/SRR12487615/SRR12487615_1.fastq.gz -o C_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/016/SRR12487616/SRR12487616_1.fastq.gz -o B_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/017/SRR12487617/SRR12487617_1.fastq.gz -o B_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/018/SRR12487618/SRR12487618_1.fastq.gz -o B_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/019/SRR12487619/SRR12487619_1.fastq.gz -o Q_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/020/SRR12487620/SRR12487620_1.fastq.gz -o Q_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/021/SRR12487521/SRR12487521_2.fastq.gz -o S_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/022/SRR12487522/SRR12487522_2.fastq.gz -o S_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/023/SRR12487523/SRR12487523_2.fastq.gz -o S_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/024/SRR12487524/SRR12487524_2.fastq.gz -o S_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/025/SRR12487525/SRR12487525_2.fastq.gz -o S_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/026/SRR12487526/SRR12487526_2.fastq.gz -o I_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/027/SRR12487527/SRR12487527_2.fastq.gz -o I_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/028/SRR12487528/SRR12487528_2.fastq.gz -o I_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/029/SRR12487529/SRR12487529_2.fastq.gz -o I_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/030/SRR12487530/SRR12487530_2.fastq.gz -o I_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/031/SRR12487531/SRR12487531_2.fastq.gz -o T_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/032/SRR12487532/SRR12487532_2.fastq.gz -o J_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/033/SRR12487533/SRR12487533_2.fastq.gz -o J_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/034/SRR12487534/SRR12487534_2.fastq.gz -o J_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/035/SRR12487535/SRR12487535_2.fastq.gz -o J_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/036/SRR12487536/SRR12487536_2.fastq.gz -o J_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/037/SRR12487537/SRR12487537_2.fastq.gz -o A_t_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/038/SRR12487538/SRR12487538_2.fastq.gz -o A_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/039/SRR12487539/SRR12487539_2.fastq.gz -o A_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/040/SRR12487540/SRR12487540_2.fastq.gz -o A_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/041/SRR12487541/SRR12487541_2.fastq.gz -o M_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/042/SRR12487542/SRR12487542_2.fastq.gz -o T_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/043/SRR12487543/SRR12487543_2.fastq.gz -o M_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/044/SRR12487544/SRR12487544_2.fastq.gz -o M_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/045/SRR12487545/SRR12487545_2.fastq.gz -o M_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/046/SRR12487546/SRR12487546_2.fastq.gz -o M_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/047/SRR12487547/SRR12487547_2.fastq.gz -o G_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/048/SRR12487548/SRR12487548_2.fastq.gz -o G_t_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/049/SRR12487549/SRR12487549_2.fastq.gz -o G_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/050/SRR12487550/SRR12487550_2.fastq.gz -o G_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/051/SRR12487551/SRR12487551_2.fastq.gz -o G_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/052/SRR12487552/SRR12487552_2.fastq.gz -o G_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/053/SRR12487553/SRR12487553_2.fastq.gz -o T_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/054/SRR12487554/SRR12487554_2.fastq.gz -o O_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/055/SRR12487555/SRR12487555_2.fastq.gz -o O_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/056/SRR12487556/SRR12487556_2.fastq.gz -o O_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/057/SRR12487557/SRR12487557_2.fastq.gz -o O_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/058/SRR12487558/SRR12487558_2.fastq.gz -o O_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/059/SRR12487559/SRR12487559_2.fastq.gz -o R_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/060/SRR12487560/SRR12487560_2.fastq.gz -o R_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/061/SRR12487561/SRR12487561_2.fastq.gz -o R_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/062/SRR12487562/SRR12487562_2.fastq.gz -o R_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/063/SRR12487563/SRR12487563_2.fastq.gz -o R_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/064/SRR12487564/SRR12487564_2.fastq.gz -o T_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/065/SRR12487565/SRR12487565_2.fastq.gz -o H_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/066/SRR12487566/SRR12487566_2.fastq.gz -o H_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/067/SRR12487567/SRR12487567_2.fastq.gz -o H_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/068/SRR12487568/SRR12487568_2.fastq.gz -o H_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/069/SRR12487569/SRR12487569_2.fastq.gz -o H_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/070/SRR12487570/SRR12487570_2.fastq.gz -o P_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/071/SRR12487571/SRR12487571_2.fastq.gz -o P_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/072/SRR12487572/SRR12487572_2.fastq.gz -o P_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/073/SRR12487573/SRR12487573_2.fastq.gz -o P_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/074/SRR12487574/SRR12487574_2.fastq.gz -o P_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/075/SRR12487575/SRR12487575_2.fastq.gz -o T_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/076/SRR12487576/SRR12487576_2.fastq.gz -o E_t_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/077/SRR12487577/SRR12487577_2.fastq.gz -o E_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/078/SRR12487578/SRR12487578_2.fastq.gz -o E_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/079/SRR12487579/SRR12487579_2.fastq.gz -o E_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/080/SRR12487580/SRR12487580_2.fastq.gz -o E_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/081/SRR12487581/SRR12487581_2.fastq.gz -o E_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/082/SRR12487582/SRR12487582_2.fastq.gz -o D_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/083/SRR12487583/SRR12487583_2.fastq.gz -o D_t_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/084/SRR12487584/SRR12487584_2.fastq.gz -o D_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/085/SRR12487585/SRR12487585_2.fastq.gz -o D_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/086/SRR12487586/SRR12487586_2.fastq.gz -o Q_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/087/SRR12487587/SRR12487587_2.fastq.gz -o D_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/088/SRR12487588/SRR12487588_2.fastq.gz -o D_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/089/SRR12487589/SRR12487589_2.fastq.gz -o K_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/090/SRR12487590/SRR12487590_2.fastq.gz -o K_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/091/SRR12487591/SRR12487591_2.fastq.gz -o K_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/092/SRR12487592/SRR12487592_2.fastq.gz -o K_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/093/SRR12487593/SRR12487593_2.fastq.gz -o L_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/094/SRR12487594/SRR12487594_2.fastq.gz -o L_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/095/SRR12487595/SRR12487595_2.fastq.gz -o L_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/096/SRR12487596/SRR12487596_2.fastq.gz -o L_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/097/SRR12487597/SRR12487597_2.fastq.gz -o Q_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/098/SRR12487598/SRR12487598_2.fastq.gz -o L_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/099/SRR12487599/SRR12487599_2.fastq.gz -o F_t_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/000/SRR12487600/SRR12487600_2.fastq.gz -o F_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/001/SRR12487601/SRR12487601_2.fastq.gz -o F_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/002/SRR12487602/SRR12487602_2.fastq.gz -o F_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/003/SRR12487603/SRR12487603_2.fastq.gz -o F_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/004/SRR12487604/SRR12487604_2.fastq.gz -o F_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/005/SRR12487605/SRR12487605_2.fastq.gz -o N_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/006/SRR12487606/SRR12487606_2.fastq.gz -o N_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/007/SRR12487607/SRR12487607_2.fastq.gz -o N_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/008/SRR12487608/SRR12487608_2.fastq.gz -o Q_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/009/SRR12487609/SRR12487609_2.fastq.gz -o N_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/010/SRR12487610/SRR12487610_2.fastq.gz -o N_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/011/SRR12487611/SRR12487611_2.fastq.gz -o C_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/012/SRR12487612/SRR12487612_2.fastq.gz -o C_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/013/SRR12487613/SRR12487613_2.fastq.gz -o C_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/014/SRR12487614/SRR12487614_2.fastq.gz -o C_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/015/SRR12487615/SRR12487615_2.fastq.gz -o C_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/016/SRR12487616/SRR12487616_2.fastq.gz -o B_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/017/SRR12487617/SRR12487617_2.fastq.gz -o B_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/018/SRR12487618/SRR12487618_2.fastq.gz -o B_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/019/SRR12487619/SRR12487619_2.fastq.gz -o Q_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/020/SRR12487620/SRR12487620_2.fastq.gz -o Q_0_R2.fastq.gz The project contains 100 FASTQ file pairs. For the purpose of this tutorial we assume that all fastq files are stored in fastq/ folder. Each file name encodes the information about mouse id and PMBC sample time-point (0,7,14,21 days) or tissue (s - spleen, t -tumor) - S - mouce id, experiment group - s - spleen tissue The structure of sequences is shown on the image bellow. Upstream analysis The easiest way to obtain results from this type of data is to use mixcr analyze amplicon command in the following manner: > mixcr analyze amplicon \\ --species mmu \\ --starting-material rna \\ --receptor-type tcr \\ --5-end no-v-primers \\ --3-end c-primers \\ --adapters adapters-present \\ fastq/S_s_R1.fastq.gz fastq/S_s_R2.fastq.gz \\ result/S_s Arguments explained: --species is set to hsa for Mus Musculus --starting-material rna It affects the choice of V gene region which will be used as target in align step ( vParameters.geneFeatureToAlign , see align documentation ). By specifying rna as starting material, VTranscriptWithout5UTRWithP will be used as geneFeatureToAlign for V segment. --receptor-type tcr . It affects the choice of underlying alignment algorithms. --5-end is set to no-v-primers because samples were prepared using 5'RACE protocol. This leads to a global alignment on the left bound of V gene. --3-end is set to c-primers . --adapers is set to adapters-present because primers sequences are present in the data and has not been cut prior to. Under the hood the command above actually executes the following pipeline: # align raw reads mixcr align -s mmu \\ -OvParameters.geneFeatureToAlign = \"VTranscriptWithout5UTRWithP\" \\ -OvParameters.parameters.floatingLeftBound = true \\ -OjParameters.parameters.floatingRightBound = false \\ -OcParameters.parameters.floatingRightBound = true \\ fastq/S_s_R1.fastq.gz fastq/S_s_R2.fastq.gz \\ result/S_s_R1.vdjca # assemble clonotypes mixcr assemble result/S_s_R1.vdjca result/S_s_R1.clns # export to tsv mixcr exportClones result/S_s_R1.clns result/S_s_R1.txt One may use the script bellow to process all samples together (see GNU Parallel ): ls fastq/*R1* | parallel -j 4 \\ 'mixcr analyze amplicon \\ --species hsa \\ --starting-material rna \\ --receptor-type bcr \\ --5-end no-v-primers \\ --3-end j-primers \\ --adapters adapters-present \\ {} {=s:R1:R2:=} \\ {=s:.*/:results/:;s:_R.*::=}' After executing the command above for every sample we will have a following set of output files: # human-readable reports S_s_R1.report # raw alignments (highly compressed binary file) S_s_R1.vdjca # TCR\u03b1 & TCR\u03b2 CDR3 clonotypes (highly compressed binary file) S_s_R1.clns # TCR\u03b1 & TCR\u03b2 CDR3 clonotypes exported in tab-delimited txt S_s_R1.TRB.txt S_s_R1.TRB.txt Quality control Now when we have processed all samples, we can proceed to quality control. First thing that we want to look at is the alignment quality. This can be easily done with the following command: mixcr exportQc align result/*.vdjca alignQc.pdf From the plot above we see, that only about 50% of reads from every sample have been successfully aligned. The major reason why the alignment failed is that a lot of reads lack TCR sequences. In that case, if we want to dig a bit deeper into the issue we can realign one of the samples and save not-aligned reads into separate files for manual inspection. Let's pick one of the samples, ex. S_7, and realign it. mixcr align \\ --species mmu \\ --report result/S_7.debug.report \\ -OvParameters.geneFeatureToAlign = VTranscriptWithP \\ -OvParameters.parameters.floatingLeftBound = true \\ -OjParameters.parameters.floatingRightBound = false \\ -OcParameters.parameters.floatingRightBound = true \\ --not-aligned-R1 S_7_notAligned_R1.fastq \\ --not-aligned-R2 S_7_notAligned_R2.fastq \\ fastq/S_7_R1.fastq.gz fastq/S_7_R2.fastq.gz \\ S_7.debug.vdjca Now one can use BLAST to determine the origin of the reads in S_7_notAligned_R1.fastq and S_7_notAligned_R2.fastq Finally, we can look at the chain distribution among all clones. mixcr exportQc chainUsage test_run/*.vdjca chainUsage.pdf On the plot bellow we see, despite some TRB dominance, both (TCR alpha and TCR beta) chains equally present in each sample.","title":"SMARTer Mouse TCR a/b Profiling Kit"},{"location":"mixcr/guides/takara-mmu-tcr/#smarter-mouse-tcr-ab-profiling-kit","text":"Here we will discuss how to process TCR cDNA libraries obtained with SMARTer Mouse TCR a/b Profiling Kit.","title":"SMARTer Mouse TCR a/b Profiling Kit"},{"location":"mixcr/guides/takara-mmu-tcr/#data-libraries","text":"This tutorial uses the data from the following publication: A T cell repertoire timestamp is at the core of responsiveness to CTLA-4 blockade Hagit Philip et al., , iScience, 2021 Feb; doi: 10.1016/j.isci.2021.102100 Samples were collected from 20 mice implanted with MC38 adenocarcinoma cells. The experiment contained 2 groups, of which the first group (5 animals with ids A - E) was dosed with 10 ml/kg/day of vehicle on day 1, 3 and 6 of the experiment. The second group (15 animals with ids F - T) was dosed with the investigational antibody anti-mCTLA4 (5/2.5 mg/kg/day at 1/3, 6). After treatment with the immune checkpoint inhibitor antibody anti-mCTLA4 blood samples for the preparation of PBMCs were taken at days 0,7,14 and 21. Tumors (where still visible) and spleens were collected immediately after euthanasia, and directly transferred to liquid nitrogen (snap-frozen samples). Total RNA was isolated from every sample and cDNA libraries were prepared using SMARTer Mouse TCR a/b Profiling Kit. TCR sequencing was performed on an Illumina Miseq sequencer using the 600-cycle Miseq reagent kit v3(Illumina) with pair-end, 2x300 base pair reads. The data for this tutorial can be downloaded using the script bellow. #!/usr/bin/env bash curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/021/SRR12487521/SRR12487521_1.fastq.gz -o S_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/022/SRR12487522/SRR12487522_1.fastq.gz -o S_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/023/SRR12487523/SRR12487523_1.fastq.gz -o S_21_R1.fastq.gz See full script #!/usr/bin/env bash curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/021/SRR12487521/SRR12487521_1.fastq.gz -o S_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/022/SRR12487522/SRR12487522_1.fastq.gz -o S_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/023/SRR12487523/SRR12487523_1.fastq.gz -o S_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/024/SRR12487524/SRR12487524_1.fastq.gz -o S_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/025/SRR12487525/SRR12487525_1.fastq.gz -o S_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/026/SRR12487526/SRR12487526_1.fastq.gz -o I_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/027/SRR12487527/SRR12487527_1.fastq.gz -o I_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/028/SRR12487528/SRR12487528_1.fastq.gz -o I_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/029/SRR12487529/SRR12487529_1.fastq.gz -o I_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/030/SRR12487530/SRR12487530_1.fastq.gz -o I_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/031/SRR12487531/SRR12487531_1.fastq.gz -o T_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/032/SRR12487532/SRR12487532_1.fastq.gz -o J_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/033/SRR12487533/SRR12487533_1.fastq.gz -o J_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/034/SRR12487534/SRR12487534_1.fastq.gz -o J_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/035/SRR12487535/SRR12487535_1.fastq.gz -o J_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/036/SRR12487536/SRR12487536_1.fastq.gz -o J_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/037/SRR12487537/SRR12487537_1.fastq.gz -o A_t_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/038/SRR12487538/SRR12487538_1.fastq.gz -o A_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/039/SRR12487539/SRR12487539_1.fastq.gz -o A_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/040/SRR12487540/SRR12487540_1.fastq.gz -o A_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/041/SRR12487541/SRR12487541_1.fastq.gz -o M_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/042/SRR12487542/SRR12487542_1.fastq.gz -o T_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/043/SRR12487543/SRR12487543_1.fastq.gz -o M_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/044/SRR12487544/SRR12487544_1.fastq.gz -o M_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/045/SRR12487545/SRR12487545_1.fastq.gz -o M_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/046/SRR12487546/SRR12487546_1.fastq.gz -o M_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/047/SRR12487547/SRR12487547_1.fastq.gz -o G_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/048/SRR12487548/SRR12487548_1.fastq.gz -o G_t_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/049/SRR12487549/SRR12487549_1.fastq.gz -o G_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/050/SRR12487550/SRR12487550_1.fastq.gz -o G_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/051/SRR12487551/SRR12487551_1.fastq.gz -o G_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/052/SRR12487552/SRR12487552_1.fastq.gz -o G_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/053/SRR12487553/SRR12487553_1.fastq.gz -o T_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/054/SRR12487554/SRR12487554_1.fastq.gz -o O_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/055/SRR12487555/SRR12487555_1.fastq.gz -o O_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/056/SRR12487556/SRR12487556_1.fastq.gz -o O_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/057/SRR12487557/SRR12487557_1.fastq.gz -o O_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/058/SRR12487558/SRR12487558_1.fastq.gz -o O_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/059/SRR12487559/SRR12487559_1.fastq.gz -o R_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/060/SRR12487560/SRR12487560_1.fastq.gz -o R_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/061/SRR12487561/SRR12487561_1.fastq.gz -o R_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/062/SRR12487562/SRR12487562_1.fastq.gz -o R_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/063/SRR12487563/SRR12487563_1.fastq.gz -o R_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/064/SRR12487564/SRR12487564_1.fastq.gz -o T_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/065/SRR12487565/SRR12487565_1.fastq.gz -o H_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/066/SRR12487566/SRR12487566_1.fastq.gz -o H_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/067/SRR12487567/SRR12487567_1.fastq.gz -o H_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/068/SRR12487568/SRR12487568_1.fastq.gz -o H_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/069/SRR12487569/SRR12487569_1.fastq.gz -o H_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/070/SRR12487570/SRR12487570_1.fastq.gz -o P_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/071/SRR12487571/SRR12487571_1.fastq.gz -o P_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/072/SRR12487572/SRR12487572_1.fastq.gz -o P_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/073/SRR12487573/SRR12487573_1.fastq.gz -o P_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/074/SRR12487574/SRR12487574_1.fastq.gz -o P_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/075/SRR12487575/SRR12487575_1.fastq.gz -o T_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/076/SRR12487576/SRR12487576_1.fastq.gz -o E_t_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/077/SRR12487577/SRR12487577_1.fastq.gz -o E_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/078/SRR12487578/SRR12487578_1.fastq.gz -o E_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/079/SRR12487579/SRR12487579_1.fastq.gz -o E_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/080/SRR12487580/SRR12487580_1.fastq.gz -o E_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/081/SRR12487581/SRR12487581_1.fastq.gz -o E_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/082/SRR12487582/SRR12487582_1.fastq.gz -o D_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/083/SRR12487583/SRR12487583_1.fastq.gz -o D_t_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/084/SRR12487584/SRR12487584_1.fastq.gz -o D_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/085/SRR12487585/SRR12487585_1.fastq.gz -o D_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/086/SRR12487586/SRR12487586_1.fastq.gz -o Q_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/087/SRR12487587/SRR12487587_1.fastq.gz -o D_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/088/SRR12487588/SRR12487588_1.fastq.gz -o D_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/089/SRR12487589/SRR12487589_1.fastq.gz -o K_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/090/SRR12487590/SRR12487590_1.fastq.gz -o K_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/091/SRR12487591/SRR12487591_1.fastq.gz -o K_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/092/SRR12487592/SRR12487592_1.fastq.gz -o K_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/093/SRR12487593/SRR12487593_1.fastq.gz -o L_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/094/SRR12487594/SRR12487594_1.fastq.gz -o L_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/095/SRR12487595/SRR12487595_1.fastq.gz -o L_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/096/SRR12487596/SRR12487596_1.fastq.gz -o L_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/097/SRR12487597/SRR12487597_1.fastq.gz -o Q_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/098/SRR12487598/SRR12487598_1.fastq.gz -o L_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/099/SRR12487599/SRR12487599_1.fastq.gz -o F_t_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/000/SRR12487600/SRR12487600_1.fastq.gz -o F_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/001/SRR12487601/SRR12487601_1.fastq.gz -o F_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/002/SRR12487602/SRR12487602_1.fastq.gz -o F_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/003/SRR12487603/SRR12487603_1.fastq.gz -o F_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/004/SRR12487604/SRR12487604_1.fastq.gz -o F_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/005/SRR12487605/SRR12487605_1.fastq.gz -o N_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/006/SRR12487606/SRR12487606_1.fastq.gz -o N_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/007/SRR12487607/SRR12487607_1.fastq.gz -o N_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/008/SRR12487608/SRR12487608_1.fastq.gz -o Q_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/009/SRR12487609/SRR12487609_1.fastq.gz -o N_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/010/SRR12487610/SRR12487610_1.fastq.gz -o N_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/011/SRR12487611/SRR12487611_1.fastq.gz -o C_s_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/012/SRR12487612/SRR12487612_1.fastq.gz -o C_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/013/SRR12487613/SRR12487613_1.fastq.gz -o C_21_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/014/SRR12487614/SRR12487614_1.fastq.gz -o C_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/015/SRR12487615/SRR12487615_1.fastq.gz -o C_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/016/SRR12487616/SRR12487616_1.fastq.gz -o B_7_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/017/SRR12487617/SRR12487617_1.fastq.gz -o B_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/018/SRR12487618/SRR12487618_1.fastq.gz -o B_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/019/SRR12487619/SRR12487619_1.fastq.gz -o Q_14_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/020/SRR12487620/SRR12487620_1.fastq.gz -o Q_0_R1.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/021/SRR12487521/SRR12487521_2.fastq.gz -o S_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/022/SRR12487522/SRR12487522_2.fastq.gz -o S_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/023/SRR12487523/SRR12487523_2.fastq.gz -o S_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/024/SRR12487524/SRR12487524_2.fastq.gz -o S_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/025/SRR12487525/SRR12487525_2.fastq.gz -o S_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/026/SRR12487526/SRR12487526_2.fastq.gz -o I_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/027/SRR12487527/SRR12487527_2.fastq.gz -o I_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/028/SRR12487528/SRR12487528_2.fastq.gz -o I_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/029/SRR12487529/SRR12487529_2.fastq.gz -o I_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/030/SRR12487530/SRR12487530_2.fastq.gz -o I_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/031/SRR12487531/SRR12487531_2.fastq.gz -o T_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/032/SRR12487532/SRR12487532_2.fastq.gz -o J_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/033/SRR12487533/SRR12487533_2.fastq.gz -o J_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/034/SRR12487534/SRR12487534_2.fastq.gz -o J_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/035/SRR12487535/SRR12487535_2.fastq.gz -o J_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/036/SRR12487536/SRR12487536_2.fastq.gz -o J_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/037/SRR12487537/SRR12487537_2.fastq.gz -o A_t_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/038/SRR12487538/SRR12487538_2.fastq.gz -o A_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/039/SRR12487539/SRR12487539_2.fastq.gz -o A_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/040/SRR12487540/SRR12487540_2.fastq.gz -o A_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/041/SRR12487541/SRR12487541_2.fastq.gz -o M_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/042/SRR12487542/SRR12487542_2.fastq.gz -o T_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/043/SRR12487543/SRR12487543_2.fastq.gz -o M_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/044/SRR12487544/SRR12487544_2.fastq.gz -o M_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/045/SRR12487545/SRR12487545_2.fastq.gz -o M_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/046/SRR12487546/SRR12487546_2.fastq.gz -o M_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/047/SRR12487547/SRR12487547_2.fastq.gz -o G_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/048/SRR12487548/SRR12487548_2.fastq.gz -o G_t_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/049/SRR12487549/SRR12487549_2.fastq.gz -o G_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/050/SRR12487550/SRR12487550_2.fastq.gz -o G_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/051/SRR12487551/SRR12487551_2.fastq.gz -o G_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/052/SRR12487552/SRR12487552_2.fastq.gz -o G_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/053/SRR12487553/SRR12487553_2.fastq.gz -o T_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/054/SRR12487554/SRR12487554_2.fastq.gz -o O_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/055/SRR12487555/SRR12487555_2.fastq.gz -o O_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/056/SRR12487556/SRR12487556_2.fastq.gz -o O_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/057/SRR12487557/SRR12487557_2.fastq.gz -o O_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/058/SRR12487558/SRR12487558_2.fastq.gz -o O_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/059/SRR12487559/SRR12487559_2.fastq.gz -o R_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/060/SRR12487560/SRR12487560_2.fastq.gz -o R_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/061/SRR12487561/SRR12487561_2.fastq.gz -o R_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/062/SRR12487562/SRR12487562_2.fastq.gz -o R_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/063/SRR12487563/SRR12487563_2.fastq.gz -o R_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/064/SRR12487564/SRR12487564_2.fastq.gz -o T_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/065/SRR12487565/SRR12487565_2.fastq.gz -o H_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/066/SRR12487566/SRR12487566_2.fastq.gz -o H_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/067/SRR12487567/SRR12487567_2.fastq.gz -o H_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/068/SRR12487568/SRR12487568_2.fastq.gz -o H_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/069/SRR12487569/SRR12487569_2.fastq.gz -o H_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/070/SRR12487570/SRR12487570_2.fastq.gz -o P_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/071/SRR12487571/SRR12487571_2.fastq.gz -o P_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/072/SRR12487572/SRR12487572_2.fastq.gz -o P_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/073/SRR12487573/SRR12487573_2.fastq.gz -o P_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/074/SRR12487574/SRR12487574_2.fastq.gz -o P_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/075/SRR12487575/SRR12487575_2.fastq.gz -o T_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/076/SRR12487576/SRR12487576_2.fastq.gz -o E_t_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/077/SRR12487577/SRR12487577_2.fastq.gz -o E_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/078/SRR12487578/SRR12487578_2.fastq.gz -o E_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/079/SRR12487579/SRR12487579_2.fastq.gz -o E_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/080/SRR12487580/SRR12487580_2.fastq.gz -o E_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/081/SRR12487581/SRR12487581_2.fastq.gz -o E_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/082/SRR12487582/SRR12487582_2.fastq.gz -o D_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/083/SRR12487583/SRR12487583_2.fastq.gz -o D_t_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/084/SRR12487584/SRR12487584_2.fastq.gz -o D_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/085/SRR12487585/SRR12487585_2.fastq.gz -o D_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/086/SRR12487586/SRR12487586_2.fastq.gz -o Q_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/087/SRR12487587/SRR12487587_2.fastq.gz -o D_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/088/SRR12487588/SRR12487588_2.fastq.gz -o D_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/089/SRR12487589/SRR12487589_2.fastq.gz -o K_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/090/SRR12487590/SRR12487590_2.fastq.gz -o K_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/091/SRR12487591/SRR12487591_2.fastq.gz -o K_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/092/SRR12487592/SRR12487592_2.fastq.gz -o K_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/093/SRR12487593/SRR12487593_2.fastq.gz -o L_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/094/SRR12487594/SRR12487594_2.fastq.gz -o L_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/095/SRR12487595/SRR12487595_2.fastq.gz -o L_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/096/SRR12487596/SRR12487596_2.fastq.gz -o L_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/097/SRR12487597/SRR12487597_2.fastq.gz -o Q_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/098/SRR12487598/SRR12487598_2.fastq.gz -o L_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/099/SRR12487599/SRR12487599_2.fastq.gz -o F_t_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/000/SRR12487600/SRR12487600_2.fastq.gz -o F_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/001/SRR12487601/SRR12487601_2.fastq.gz -o F_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/002/SRR12487602/SRR12487602_2.fastq.gz -o F_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/003/SRR12487603/SRR12487603_2.fastq.gz -o F_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/004/SRR12487604/SRR12487604_2.fastq.gz -o F_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/005/SRR12487605/SRR12487605_2.fastq.gz -o N_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/006/SRR12487606/SRR12487606_2.fastq.gz -o N_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/007/SRR12487607/SRR12487607_2.fastq.gz -o N_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/008/SRR12487608/SRR12487608_2.fastq.gz -o Q_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/009/SRR12487609/SRR12487609_2.fastq.gz -o N_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/010/SRR12487610/SRR12487610_2.fastq.gz -o N_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/011/SRR12487611/SRR12487611_2.fastq.gz -o C_s_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/012/SRR12487612/SRR12487612_2.fastq.gz -o C_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/013/SRR12487613/SRR12487613_2.fastq.gz -o C_21_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/014/SRR12487614/SRR12487614_2.fastq.gz -o C_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/015/SRR12487615/SRR12487615_2.fastq.gz -o C_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/016/SRR12487616/SRR12487616_2.fastq.gz -o B_7_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/017/SRR12487617/SRR12487617_2.fastq.gz -o B_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/018/SRR12487618/SRR12487618_2.fastq.gz -o B_0_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/019/SRR12487619/SRR12487619_2.fastq.gz -o Q_14_R2.fastq.gz curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR124/020/SRR12487620/SRR12487620_2.fastq.gz -o Q_0_R2.fastq.gz The project contains 100 FASTQ file pairs. For the purpose of this tutorial we assume that all fastq files are stored in fastq/ folder. Each file name encodes the information about mouse id and PMBC sample time-point (0,7,14,21 days) or tissue (s - spleen, t -tumor) - S - mouce id, experiment group - s - spleen tissue The structure of sequences is shown on the image bellow.","title":"Data libraries"},{"location":"mixcr/guides/takara-mmu-tcr/#upstream-analysis","text":"The easiest way to obtain results from this type of data is to use mixcr analyze amplicon command in the following manner: > mixcr analyze amplicon \\ --species mmu \\ --starting-material rna \\ --receptor-type tcr \\ --5-end no-v-primers \\ --3-end c-primers \\ --adapters adapters-present \\ fastq/S_s_R1.fastq.gz fastq/S_s_R2.fastq.gz \\ result/S_s Arguments explained: --species is set to hsa for Mus Musculus --starting-material rna It affects the choice of V gene region which will be used as target in align step ( vParameters.geneFeatureToAlign , see align documentation ). By specifying rna as starting material, VTranscriptWithout5UTRWithP will be used as geneFeatureToAlign for V segment. --receptor-type tcr . It affects the choice of underlying alignment algorithms. --5-end is set to no-v-primers because samples were prepared using 5'RACE protocol. This leads to a global alignment on the left bound of V gene. --3-end is set to c-primers . --adapers is set to adapters-present because primers sequences are present in the data and has not been cut prior to. Under the hood the command above actually executes the following pipeline: # align raw reads mixcr align -s mmu \\ -OvParameters.geneFeatureToAlign = \"VTranscriptWithout5UTRWithP\" \\ -OvParameters.parameters.floatingLeftBound = true \\ -OjParameters.parameters.floatingRightBound = false \\ -OcParameters.parameters.floatingRightBound = true \\ fastq/S_s_R1.fastq.gz fastq/S_s_R2.fastq.gz \\ result/S_s_R1.vdjca # assemble clonotypes mixcr assemble result/S_s_R1.vdjca result/S_s_R1.clns # export to tsv mixcr exportClones result/S_s_R1.clns result/S_s_R1.txt One may use the script bellow to process all samples together (see GNU Parallel ): ls fastq/*R1* | parallel -j 4 \\ 'mixcr analyze amplicon \\ --species hsa \\ --starting-material rna \\ --receptor-type bcr \\ --5-end no-v-primers \\ --3-end j-primers \\ --adapters adapters-present \\ {} {=s:R1:R2:=} \\ {=s:.*/:results/:;s:_R.*::=}' After executing the command above for every sample we will have a following set of output files: # human-readable reports S_s_R1.report # raw alignments (highly compressed binary file) S_s_R1.vdjca # TCR\u03b1 & TCR\u03b2 CDR3 clonotypes (highly compressed binary file) S_s_R1.clns # TCR\u03b1 & TCR\u03b2 CDR3 clonotypes exported in tab-delimited txt S_s_R1.TRB.txt S_s_R1.TRB.txt","title":"Upstream analysis"},{"location":"mixcr/guides/takara-mmu-tcr/#quality-control","text":"Now when we have processed all samples, we can proceed to quality control. First thing that we want to look at is the alignment quality. This can be easily done with the following command: mixcr exportQc align result/*.vdjca alignQc.pdf From the plot above we see, that only about 50% of reads from every sample have been successfully aligned. The major reason why the alignment failed is that a lot of reads lack TCR sequences. In that case, if we want to dig a bit deeper into the issue we can realign one of the samples and save not-aligned reads into separate files for manual inspection. Let's pick one of the samples, ex. S_7, and realign it. mixcr align \\ --species mmu \\ --report result/S_7.debug.report \\ -OvParameters.geneFeatureToAlign = VTranscriptWithP \\ -OvParameters.parameters.floatingLeftBound = true \\ -OjParameters.parameters.floatingRightBound = false \\ -OcParameters.parameters.floatingRightBound = true \\ --not-aligned-R1 S_7_notAligned_R1.fastq \\ --not-aligned-R2 S_7_notAligned_R2.fastq \\ fastq/S_7_R1.fastq.gz fastq/S_7_R2.fastq.gz \\ S_7.debug.vdjca Now one can use BLAST to determine the origin of the reads in S_7_notAligned_R1.fastq and S_7_notAligned_R2.fastq Finally, we can look at the chain distribution among all clones. mixcr exportQc chainUsage test_run/*.vdjca chainUsage.pdf On the plot bellow we see, despite some TRB dominance, both (TCR alpha and TCR beta) chains equally present in each sample.","title":"Quality control"},{"location":"mixcr/guides/milaboratories-human-bcr-rna-multi/milaboratories-human-bcr-rna-multi/","text":"MiLaboratories Human Ig Repertoire RNA Multiplex Kit This kit allows to obtain full length IG heavy and light chain repertoires with UMI-based accuracy. Discriminates all IGH isotypes including IgM, IgD, IgG3, IgG1, IgA1, IgG2, IgG4, IgE, and IgA2. Bellow you can see the structure of cDNA library. Upstream analysis One-line solution The most straightforward way to get clonotype tables is to use a universal mixcr analyze command in the following manner: ' >mixcr analyze amplicon \\ --species hsa \\ --starting-material rna \\ --receptor-type bcr \\ --umi-pattern-name MiLaboratoriesMultiplexBCR \\ --5-end no-v-primers \\ --3-end c-primers \\ --adapters no-adapters \\ --assemble \"-OassemblingFeatures={CDR1Begin:FR4End} -OseparateByC=true\" \\ M1_4T1_Blood_S2_L001_R1_001_B3.1.fastq.gz \\ M1_4T1_Blood_S2_L001_R1_001_B3.1.fastq.gz \\ M1_4T1_Blood_S2 The meaning of these options is the following. --species is set to hsa for Homo Sapiens --starting-material is set to rna and corresponds to VTranscriptWithout5UTRWithP alignment feature for V-gene (see Gene features and anchor points for details) --receptor-type bcr . It affects the choice of alignment algorithms. MiXCR uses a specific set of algorithms for BCR data. --umi-pattern-name MiLaboratoriesMultiplexBCR . This is a build in MiXCR umi-pattern that stands for \"^N{0:2}tggtatcaacgcagagt(UMI:NNNNTNNNNTNNNN)N{20}(R1:*) \\ ^N{22}(R2:*)\" . This pattern sets the UMI location in the read and is also written in a way that primers locations will be excluded from the sequences during the analysis. --5-end is set to no-v-primers because we specified umi-pattern in such a way that primers locations will be excluded from the sequences during the analysis. This leads to a global alignment algorithms to align the left bound of V gene. --3-end-primers is set to c-primers . --adapers no-adapters because we specified umi-pattern in such a way that primers locations will be excluded from the sequences during the analysis. --assemble \"-OassemblingFeatures={CDR1Begin:FR4End} -OseparateByC=true\" . Here we pass two extra arguments for mixcr assemble step of the pipeline. First we extend the assembling feature to start from CDR1 . That is because this is BCR data, where hypermutations occur throughout V gene, and we want to capture as much as we can. Second, we use -OseparateByC=true option to separate clones with the same assembling feature sequence but different C genes, which is essential for isotype identification. M1_4T1_Blood_S2_L001_R1_001_B3.1.fastq.gz M1_4T1_Blood_S2_L001_R1_001_B3.1.fastq.gz M1_4T1_Blood_S2 Finally, we provide the names of input files and an output prefix: Now, since we have multiple files ist easier to process them all together instead of running the same command multiple times. One of the ways to achieve it is to use GNU Parallel : > fastq/*R1* | parallel -j2 \\ '~/mixcr-private/mixcr analyze amplicon \\ --species hsa \\ --starting-material rna \\ --receptor-type bcr \\ --umi-pattern-name MiLaboratoriesMultiplexBCR \\ --5-end no-v-primers \\ --3-end c-primers \\ --adapters no-adapters \\ --assemble \"-OassemblingFeatures={CDR1Begin:FR4End} -OseparateByC=true\" \\ {} \\ {=s:R1:R2:=} \\ {=s:.*/:results/:;s:_L001.*::=}' Under the hood of mixcr analyze pipeline Under the hood, mixcr analyze amplicon command that we use above actually executes the following pipeline of MiXCR actions: align Performs : alignment of raw sequencing reads against reference database of V-, D-, J- and C- gene segments pattern matching of tag pattern sequence and extraction of barcodes > mixcr align \\ --species hsa \\ --report result/Multi_TRA_10ng_3.report \\ --json-report result/Multi_TRA_10ng_3.report.json \\ -OvParameters.geneFeatureToAlign = ` VTranscriptWithout5UTRWithP ` \\ -OvParameters.parameters.floatingLeftBound = false \\ -OjParameters.parameters.floatingRightBound = false \\ -OcParameters.parameters.floatingRightBound = false \\ fastq/M1_4T1_Blood_S2_L001_R1_001_B3.1.fastq.gz \\ fastq/M1_4T1_Blood_S2_L001_R2_001_B3.1.fastq.gz \\ results/M1_4T1_Blood_S2.vdjca Options --report and --json-report are specified here explicitly. Since we start from RNA data we use VTranscriptWithout5UTRWithP for the alignment of V segments (see Gene features and anchor points . -OvParameters.parameters.floatingLeftBound=false -OjParameters.parameters floatingRightBound=false -OcParameters.parameters.floatingRightBound=false These options determine global vs local alignment algorithm on the bounds of gene segments. As have been mentioned above we bypass primer sequences by means of the umi-pattern. Thus all segment bouns should be aligned globally. This step utilizes all available CPUs and scales perfectly. When there are a lot of CPUs, the only limiting factor is the speed of disk I/O. To limit the number of used CPUs one can pass --threads N option. assemble Assembles clonotypes and applies several layers of errors correction: assembly consensus CDR3 sequence quality-awared correction for sequencing errors clustering to correct for PCR errors > mixcr assemble \\ --report results/Multi_TRA_10ng_3.report \\ --json-report results/Multi_TRA_10ng_3.report.json \\ -OassemblingFeatures ={ CDR1Begin:FR4End } \\ -OseparateByC = true \\ M1_4T1_Blood_S2.vdjca \\ M1_4T1_Blood_S2.clns Options --report and --json-report are specified here explicitly so that the report files will be appended with assembly report. exportClones Finally, to export clonotype tables in tabular form exportClones is used: > mixcr exportClones \\ -p full \\ M1_4T1_Blood_S2.clns \\ M1_4T1_Blood_S2.tsv Here -p full is a shorthand for the full preset of common export columns. Quality control Now when the upstream analysis is finished we can move on to quality control. First lets look at the alignment report plot. # obtain alignment quality control > mixcr exportQc align \\ result/*.vdjca \\ alignQc.pdf We see that all samples have a very high score of successfully aligned reads. No signficat issues present. Next, lets examine chane usage distribution We don't see any contamination from other Ig chains. As expected, all samples consist only of IGH chains.","title":"MiLaboratories Human Ig Repertoire RNA Multiplex Kit"},{"location":"mixcr/guides/milaboratories-human-bcr-rna-multi/milaboratories-human-bcr-rna-multi/#milaboratories-human-ig-repertoire-rna-multiplex-kit","text":"This kit allows to obtain full length IG heavy and light chain repertoires with UMI-based accuracy. Discriminates all IGH isotypes including IgM, IgD, IgG3, IgG1, IgA1, IgG2, IgG4, IgE, and IgA2. Bellow you can see the structure of cDNA library.","title":"MiLaboratories Human Ig Repertoire RNA Multiplex Kit"},{"location":"mixcr/guides/milaboratories-human-bcr-rna-multi/milaboratories-human-bcr-rna-multi/#upstream-analysis","text":"","title":"Upstream analysis"},{"location":"mixcr/guides/milaboratories-human-bcr-rna-multi/milaboratories-human-bcr-rna-multi/#one-line-solution","text":"The most straightforward way to get clonotype tables is to use a universal mixcr analyze command in the following manner: ' >mixcr analyze amplicon \\ --species hsa \\ --starting-material rna \\ --receptor-type bcr \\ --umi-pattern-name MiLaboratoriesMultiplexBCR \\ --5-end no-v-primers \\ --3-end c-primers \\ --adapters no-adapters \\ --assemble \"-OassemblingFeatures={CDR1Begin:FR4End} -OseparateByC=true\" \\ M1_4T1_Blood_S2_L001_R1_001_B3.1.fastq.gz \\ M1_4T1_Blood_S2_L001_R1_001_B3.1.fastq.gz \\ M1_4T1_Blood_S2 The meaning of these options is the following. --species is set to hsa for Homo Sapiens --starting-material is set to rna and corresponds to VTranscriptWithout5UTRWithP alignment feature for V-gene (see Gene features and anchor points for details) --receptor-type bcr . It affects the choice of alignment algorithms. MiXCR uses a specific set of algorithms for BCR data. --umi-pattern-name MiLaboratoriesMultiplexBCR . This is a build in MiXCR umi-pattern that stands for \"^N{0:2}tggtatcaacgcagagt(UMI:NNNNTNNNNTNNNN)N{20}(R1:*) \\ ^N{22}(R2:*)\" . This pattern sets the UMI location in the read and is also written in a way that primers locations will be excluded from the sequences during the analysis. --5-end is set to no-v-primers because we specified umi-pattern in such a way that primers locations will be excluded from the sequences during the analysis. This leads to a global alignment algorithms to align the left bound of V gene. --3-end-primers is set to c-primers . --adapers no-adapters because we specified umi-pattern in such a way that primers locations will be excluded from the sequences during the analysis. --assemble \"-OassemblingFeatures={CDR1Begin:FR4End} -OseparateByC=true\" . Here we pass two extra arguments for mixcr assemble step of the pipeline. First we extend the assembling feature to start from CDR1 . That is because this is BCR data, where hypermutations occur throughout V gene, and we want to capture as much as we can. Second, we use -OseparateByC=true option to separate clones with the same assembling feature sequence but different C genes, which is essential for isotype identification. M1_4T1_Blood_S2_L001_R1_001_B3.1.fastq.gz M1_4T1_Blood_S2_L001_R1_001_B3.1.fastq.gz M1_4T1_Blood_S2 Finally, we provide the names of input files and an output prefix: Now, since we have multiple files ist easier to process them all together instead of running the same command multiple times. One of the ways to achieve it is to use GNU Parallel : > fastq/*R1* | parallel -j2 \\ '~/mixcr-private/mixcr analyze amplicon \\ --species hsa \\ --starting-material rna \\ --receptor-type bcr \\ --umi-pattern-name MiLaboratoriesMultiplexBCR \\ --5-end no-v-primers \\ --3-end c-primers \\ --adapters no-adapters \\ --assemble \"-OassemblingFeatures={CDR1Begin:FR4End} -OseparateByC=true\" \\ {} \\ {=s:R1:R2:=} \\ {=s:.*/:results/:;s:_L001.*::=}'","title":"One-line solution"},{"location":"mixcr/guides/milaboratories-human-bcr-rna-multi/milaboratories-human-bcr-rna-multi/#under-the-hood-of-mixcr-analyze-pipeline","text":"Under the hood, mixcr analyze amplicon command that we use above actually executes the following pipeline of MiXCR actions:","title":"Under the hood of mixcr analyze pipeline"},{"location":"mixcr/guides/milaboratories-human-bcr-rna-multi/milaboratories-human-bcr-rna-multi/#align","text":"Performs : alignment of raw sequencing reads against reference database of V-, D-, J- and C- gene segments pattern matching of tag pattern sequence and extraction of barcodes > mixcr align \\ --species hsa \\ --report result/Multi_TRA_10ng_3.report \\ --json-report result/Multi_TRA_10ng_3.report.json \\ -OvParameters.geneFeatureToAlign = ` VTranscriptWithout5UTRWithP ` \\ -OvParameters.parameters.floatingLeftBound = false \\ -OjParameters.parameters.floatingRightBound = false \\ -OcParameters.parameters.floatingRightBound = false \\ fastq/M1_4T1_Blood_S2_L001_R1_001_B3.1.fastq.gz \\ fastq/M1_4T1_Blood_S2_L001_R2_001_B3.1.fastq.gz \\ results/M1_4T1_Blood_S2.vdjca Options --report and --json-report are specified here explicitly. Since we start from RNA data we use VTranscriptWithout5UTRWithP for the alignment of V segments (see Gene features and anchor points . -OvParameters.parameters.floatingLeftBound=false -OjParameters.parameters floatingRightBound=false -OcParameters.parameters.floatingRightBound=false These options determine global vs local alignment algorithm on the bounds of gene segments. As have been mentioned above we bypass primer sequences by means of the umi-pattern. Thus all segment bouns should be aligned globally. This step utilizes all available CPUs and scales perfectly. When there are a lot of CPUs, the only limiting factor is the speed of disk I/O. To limit the number of used CPUs one can pass --threads N option.","title":"align"},{"location":"mixcr/guides/milaboratories-human-bcr-rna-multi/milaboratories-human-bcr-rna-multi/#assemble","text":"Assembles clonotypes and applies several layers of errors correction: assembly consensus CDR3 sequence quality-awared correction for sequencing errors clustering to correct for PCR errors > mixcr assemble \\ --report results/Multi_TRA_10ng_3.report \\ --json-report results/Multi_TRA_10ng_3.report.json \\ -OassemblingFeatures ={ CDR1Begin:FR4End } \\ -OseparateByC = true \\ M1_4T1_Blood_S2.vdjca \\ M1_4T1_Blood_S2.clns Options --report and --json-report are specified here explicitly so that the report files will be appended with assembly report.","title":"assemble"},{"location":"mixcr/guides/milaboratories-human-bcr-rna-multi/milaboratories-human-bcr-rna-multi/#exportclones","text":"Finally, to export clonotype tables in tabular form exportClones is used: > mixcr exportClones \\ -p full \\ M1_4T1_Blood_S2.clns \\ M1_4T1_Blood_S2.tsv Here -p full is a shorthand for the full preset of common export columns.","title":"exportClones"},{"location":"mixcr/guides/milaboratories-human-bcr-rna-multi/milaboratories-human-bcr-rna-multi/#quality-control","text":"Now when the upstream analysis is finished we can move on to quality control. First lets look at the alignment report plot. # obtain alignment quality control > mixcr exportQc align \\ result/*.vdjca \\ alignQc.pdf We see that all samples have a very high score of successfully aligned reads. No signficat issues present. Next, lets examine chane usage distribution We don't see any contamination from other Ig chains. As expected, all samples consist only of IGH chains.","title":"Quality control"},{"location":"mixcr/guides/milaboratories-human-tcr-rna-race/milaboratories-human-tcr-rna-race/","text":"MiLaboratories RNA 5'RACE TCR repertoire kit In this tutorial we are going to analyze data generated using MiLaboratories HUMAN RNA 5'RACE TCR repertoire kit. The data for this tutorial consists of 12 samples. For each sample two cDNA libraries were prepared one for each TCR chain (TRA,TRB). Samples differ among ech other by the amount of RNA used for 1st strand cDNA synthesis. Bellow you can see the structure of cDNA library. Upstream analysis One-line solution The most straightforward way to get clonotype tables is to use a universal mixcr analyze command. According to the library preparation protocol, the library has V primers on 5'-end and C primers on 3', so the command for a single sample is the following: > mixcr analyze amplicon \\ --species mmu \\ --starting-material hsa \\ --receptor-type tcr \\ --umi-pattern-name MiLaboratoriesRACETCR \\ --5-end no-v-primers \\ --3-end c-primers \\ --adapters adapters-present \\ --report Multi_TRA_10ng_3.report: = \\ fastq/RACE_TRA_10ng_3_S167_R1_001.fastq.gz \\ fastq/RACE_TRA_10ng_3_S167_R1_001.fastq.gz \\ results/RACE_TRA_10ng_3 The meaning of these options is the following. --species is set to hsa for Homo Sapiens . You want to set this parameter to mmu for Mus Musculus --starting-material is set to rna and corresponds to VTranscriptWithout5UTRWithP alignment feature for V-gene ( see Gene features and anchor points for details) --receptor-type tcr . It affects the choice of alignment algorithms. --umi-pattern-name MiLaboratoriesRACETCR specifies a build in UMI pattern for MiLaboratories RNA 5'RACE TCR repertoire kit. This name stands for the following pattern: \"^(R1:*) \\ ^tggtatcaacgcagagt(UMI:NNNNTNNNNTNNNN)(R2:*)\" . It specifies the position of UMI barcode. MiXCR provides a powerful regex-like language allowing to specify almost arbitrary barcode structure. --5-end is set to no-v-primers because the data was generated using 5'RACE protocol. This choice leads to a global alignment algorithm to align the left bound of V. --3-end-primers is set to c-primers since the primer used for library preparation is complimentary to C-region of TCR genes. This leads to a global alignment algorithms to align the right bound of J and a local alignment at the right bound of C gene. --adapers adapterspresent because primer sequences were not cut off prior to. Running the command above will generate the following files: > ls result/ # human-readable reports RACE_TRA_10ng_3.report # raw alignments (highly compressed binary file) RACE_TRA_10ng_3.vdjca # alignments with corrected UMI barcode sequences RACE_TRA_10ng_3.corrected.vdjca # TCR\u03b1 & TCR\u03b2 CDR3 clonotypes (highly compressed binary file) RACE_TRA_10ng_3.clns # TCR\u03b1 & TCR\u03b2 CDR3 clonotypes exported in tab-delimited txt RACE_TRA_10ng_3.clonotypes.TRA.tsv RACE_TRA_10ng_3.clonotypes.TRB.tsv RACE_TRA_10ng_3.clonotypes.TRD.tsv RACE_TRA_10ng_3.clonotypes.TRG.tsv Clonotype tables is the main result of the upstream analysis. They are stored in a highly compressed and efficient binary .clns file and can be exported in many ways: detailed tab-delimited format with dozens of customizable columns, human readable for manual inspection, and AIRR format suitable for many scientific downstream analysis tools. By default, MiXCR exports clonotypes in a tab-delimited format separately for each immunological chain. In order to run the analysis for all samples in the project on Linux we can for example use GNU Parallel in the following way: > ls /fastq/*R1* | \\ parallel -j2 \\ ' mixcr analyze amplicon \\ --species hsa \\ --starting-material rna \\ --receptor-type tcr \\ --umi-pattern-name MiLaboratoriesRACETCR \\ --5-end no-v-primers \\ --3-end c-primers \\ --adapters adapters-present \\ --report {= s:.*/:results/: ; s:_S.*:.report: =} \\ {} \\ {= s:R1:R2: =} \\ Under the hood pipeline Under the hood, mixcr analyze amplicon executes the following pipeline of MiXCR actions: align Performs : alignment of raw sequencing reads against reference database of V-, D-, J- and C- gene segments pattern matching of tag pattern sequence and extraction of barcodes > mixcr align \\ --species hsa \\ --tag-pattern '^(R1:*) \\ ^tggtatcaacgcagagt(UMI:NNNNTNNNNTNNNN)(R2:*)' \\ --report result/RACE_TRA_10ng_3.report \\ --json-report result/RACE_TRA_10ng_3.report.json \\ -OvParameters.geneFeatureToAlign = \"VTranscriptWithout5UTRWithP\" \\ -OvParameters.parameters.floatingLeftBound = false \\ -OjParameters.parameters.floatingRightBound = false \\ -OcParameters.parameters.floatingRightBound = true \\ fastq/RACE_TRA_10ng_3.fastq.gz \\ fastq/RACE_TRA_10ng_3.fastq.gz \\ results/RACE_TRA_10ng_3.vdjca Options --report and --json-report are specified here explicitly. Since we start from RNA data we use VTranscriptWithout5UTRWithP for the alignment of V segments (see Gene features and anchor points . Because no primers were used for V segment, we use global alignment on the left bound of V and since we have primers on C segment, we use global alignment for J and local on the right bound of C. This behavior is defined by the following options: -OvParameters.parameters.floatingLeftBound=false , -OjParameters.parameters.floatingRightBound=false , -OcParameters.parameters.floatingRightBound=true . This step utilizes all available CPUs and scales perfectly. When there are a lot of CPUs, the only limiting factor is the speed of disk I/O. To limit the number of used CPUs one can pass --threads N option. correctAndSortTags Corrects sequencing and PCR errors inside barcode sequences. This step does extremely important job by correcting artificial diversity caused by errors in barcodes. In the considered example project it corrects only sequences of UMIs. > mixcr correctAndSortTags \\ --report results/RACE_TRA_10ng_3.report \\ --json-report results/RACE_TRA_10ng_3.report.json \\ RACE_TRA_10ng_3.vdjca \\ RACE_TRA_10ng_3.corrected.vdjca Options --report and --json-report are specified here explicitly so that the report files will be appended with the barcode correction report. assemble Assembles clonotypes and applies several layers of errors correction. In the current example project we consider TCR\u03b1 & TCR\u03b2 separately and clonotype by its CDR3 sequence. The layers of correction applied in this example are: assembly consensus CDR3 sequence for each UMI quality-awared correction for sequencing errors clustering to correct for PCR errors, which still may present even in the case of UMI data, since a error may be introduced e.g. on the first reverse-transcription cycle > mixcr assemble \\ --report results/RACE_TRA_10ng_3.report \\ --json-report results/RACE_TRA_10ng_3.report.json \\ RACE_TRA_10ng_3.corrected.vdjca \\ RACE_TRA_10ng_3.clns Options --report and --json-report are specified here explicitly so that the report files will be appended with assembly report. exportClones Finally, to export clonotype tables in tabular form exportClones is used: > mixcr exportClones \\ -p full \\ -uniqueTagCount UMI \\ RACE_TRA_10ng_3.clns \\ RACE_TRA_10ng_3.tsv Here -p full is a shorthand for the full preset of common export columns and -uniqueTagCount UMI adds a column with the UMI count for each clone. Quality control Now when the upstream analysis is finished we can move on to quality control. First lets look at the alignment report plot. # obtain alignment quality control > mixcr exportQc align \\ result/*.vdjca \\ alignQc.pdf Let's examine the plot.","title":"MiLaboratories RNA 5'RACE TCR repertoire kit"},{"location":"mixcr/guides/milaboratories-human-tcr-rna-race/milaboratories-human-tcr-rna-race/#milaboratories-rna-5race-tcr-repertoire-kit","text":"In this tutorial we are going to analyze data generated using MiLaboratories HUMAN RNA 5'RACE TCR repertoire kit. The data for this tutorial consists of 12 samples. For each sample two cDNA libraries were prepared one for each TCR chain (TRA,TRB). Samples differ among ech other by the amount of RNA used for 1st strand cDNA synthesis. Bellow you can see the structure of cDNA library.","title":"MiLaboratories RNA 5'RACE TCR repertoire kit"},{"location":"mixcr/guides/milaboratories-human-tcr-rna-race/milaboratories-human-tcr-rna-race/#upstream-analysis","text":"","title":"Upstream analysis"},{"location":"mixcr/guides/milaboratories-human-tcr-rna-race/milaboratories-human-tcr-rna-race/#one-line-solution","text":"The most straightforward way to get clonotype tables is to use a universal mixcr analyze command. According to the library preparation protocol, the library has V primers on 5'-end and C primers on 3', so the command for a single sample is the following: > mixcr analyze amplicon \\ --species mmu \\ --starting-material hsa \\ --receptor-type tcr \\ --umi-pattern-name MiLaboratoriesRACETCR \\ --5-end no-v-primers \\ --3-end c-primers \\ --adapters adapters-present \\ --report Multi_TRA_10ng_3.report: = \\ fastq/RACE_TRA_10ng_3_S167_R1_001.fastq.gz \\ fastq/RACE_TRA_10ng_3_S167_R1_001.fastq.gz \\ results/RACE_TRA_10ng_3 The meaning of these options is the following. --species is set to hsa for Homo Sapiens . You want to set this parameter to mmu for Mus Musculus --starting-material is set to rna and corresponds to VTranscriptWithout5UTRWithP alignment feature for V-gene ( see Gene features and anchor points for details) --receptor-type tcr . It affects the choice of alignment algorithms. --umi-pattern-name MiLaboratoriesRACETCR specifies a build in UMI pattern for MiLaboratories RNA 5'RACE TCR repertoire kit. This name stands for the following pattern: \"^(R1:*) \\ ^tggtatcaacgcagagt(UMI:NNNNTNNNNTNNNN)(R2:*)\" . It specifies the position of UMI barcode. MiXCR provides a powerful regex-like language allowing to specify almost arbitrary barcode structure. --5-end is set to no-v-primers because the data was generated using 5'RACE protocol. This choice leads to a global alignment algorithm to align the left bound of V. --3-end-primers is set to c-primers since the primer used for library preparation is complimentary to C-region of TCR genes. This leads to a global alignment algorithms to align the right bound of J and a local alignment at the right bound of C gene. --adapers adapterspresent because primer sequences were not cut off prior to. Running the command above will generate the following files: > ls result/ # human-readable reports RACE_TRA_10ng_3.report # raw alignments (highly compressed binary file) RACE_TRA_10ng_3.vdjca # alignments with corrected UMI barcode sequences RACE_TRA_10ng_3.corrected.vdjca # TCR\u03b1 & TCR\u03b2 CDR3 clonotypes (highly compressed binary file) RACE_TRA_10ng_3.clns # TCR\u03b1 & TCR\u03b2 CDR3 clonotypes exported in tab-delimited txt RACE_TRA_10ng_3.clonotypes.TRA.tsv RACE_TRA_10ng_3.clonotypes.TRB.tsv RACE_TRA_10ng_3.clonotypes.TRD.tsv RACE_TRA_10ng_3.clonotypes.TRG.tsv Clonotype tables is the main result of the upstream analysis. They are stored in a highly compressed and efficient binary .clns file and can be exported in many ways: detailed tab-delimited format with dozens of customizable columns, human readable for manual inspection, and AIRR format suitable for many scientific downstream analysis tools. By default, MiXCR exports clonotypes in a tab-delimited format separately for each immunological chain. In order to run the analysis for all samples in the project on Linux we can for example use GNU Parallel in the following way: > ls /fastq/*R1* | \\ parallel -j2 \\ ' mixcr analyze amplicon \\ --species hsa \\ --starting-material rna \\ --receptor-type tcr \\ --umi-pattern-name MiLaboratoriesRACETCR \\ --5-end no-v-primers \\ --3-end c-primers \\ --adapters adapters-present \\ --report {= s:.*/:results/: ; s:_S.*:.report: =} \\ {} \\ {= s:R1:R2: =} \\","title":"One-line solution"},{"location":"mixcr/guides/milaboratories-human-tcr-rna-race/milaboratories-human-tcr-rna-race/#under-the-hood-pipeline","text":"Under the hood, mixcr analyze amplicon executes the following pipeline of MiXCR actions:","title":"Under the hood pipeline"},{"location":"mixcr/guides/milaboratories-human-tcr-rna-race/milaboratories-human-tcr-rna-race/#align","text":"Performs : alignment of raw sequencing reads against reference database of V-, D-, J- and C- gene segments pattern matching of tag pattern sequence and extraction of barcodes > mixcr align \\ --species hsa \\ --tag-pattern '^(R1:*) \\ ^tggtatcaacgcagagt(UMI:NNNNTNNNNTNNNN)(R2:*)' \\ --report result/RACE_TRA_10ng_3.report \\ --json-report result/RACE_TRA_10ng_3.report.json \\ -OvParameters.geneFeatureToAlign = \"VTranscriptWithout5UTRWithP\" \\ -OvParameters.parameters.floatingLeftBound = false \\ -OjParameters.parameters.floatingRightBound = false \\ -OcParameters.parameters.floatingRightBound = true \\ fastq/RACE_TRA_10ng_3.fastq.gz \\ fastq/RACE_TRA_10ng_3.fastq.gz \\ results/RACE_TRA_10ng_3.vdjca Options --report and --json-report are specified here explicitly. Since we start from RNA data we use VTranscriptWithout5UTRWithP for the alignment of V segments (see Gene features and anchor points . Because no primers were used for V segment, we use global alignment on the left bound of V and since we have primers on C segment, we use global alignment for J and local on the right bound of C. This behavior is defined by the following options: -OvParameters.parameters.floatingLeftBound=false , -OjParameters.parameters.floatingRightBound=false , -OcParameters.parameters.floatingRightBound=true . This step utilizes all available CPUs and scales perfectly. When there are a lot of CPUs, the only limiting factor is the speed of disk I/O. To limit the number of used CPUs one can pass --threads N option.","title":"align"},{"location":"mixcr/guides/milaboratories-human-tcr-rna-race/milaboratories-human-tcr-rna-race/#correctandsorttags","text":"Corrects sequencing and PCR errors inside barcode sequences. This step does extremely important job by correcting artificial diversity caused by errors in barcodes. In the considered example project it corrects only sequences of UMIs. > mixcr correctAndSortTags \\ --report results/RACE_TRA_10ng_3.report \\ --json-report results/RACE_TRA_10ng_3.report.json \\ RACE_TRA_10ng_3.vdjca \\ RACE_TRA_10ng_3.corrected.vdjca Options --report and --json-report are specified here explicitly so that the report files will be appended with the barcode correction report.","title":"correctAndSortTags"},{"location":"mixcr/guides/milaboratories-human-tcr-rna-race/milaboratories-human-tcr-rna-race/#assemble","text":"Assembles clonotypes and applies several layers of errors correction. In the current example project we consider TCR\u03b1 & TCR\u03b2 separately and clonotype by its CDR3 sequence. The layers of correction applied in this example are: assembly consensus CDR3 sequence for each UMI quality-awared correction for sequencing errors clustering to correct for PCR errors, which still may present even in the case of UMI data, since a error may be introduced e.g. on the first reverse-transcription cycle > mixcr assemble \\ --report results/RACE_TRA_10ng_3.report \\ --json-report results/RACE_TRA_10ng_3.report.json \\ RACE_TRA_10ng_3.corrected.vdjca \\ RACE_TRA_10ng_3.clns Options --report and --json-report are specified here explicitly so that the report files will be appended with assembly report.","title":"assemble"},{"location":"mixcr/guides/milaboratories-human-tcr-rna-race/milaboratories-human-tcr-rna-race/#exportclones","text":"Finally, to export clonotype tables in tabular form exportClones is used: > mixcr exportClones \\ -p full \\ -uniqueTagCount UMI \\ RACE_TRA_10ng_3.clns \\ RACE_TRA_10ng_3.tsv Here -p full is a shorthand for the full preset of common export columns and -uniqueTagCount UMI adds a column with the UMI count for each clone.","title":"exportClones"},{"location":"mixcr/guides/milaboratories-human-tcr-rna-race/milaboratories-human-tcr-rna-race/#quality-control","text":"Now when the upstream analysis is finished we can move on to quality control. First lets look at the alignment report plot. # obtain alignment quality control > mixcr exportQc align \\ result/*.vdjca \\ alignQc.pdf Let's examine the plot.","title":"Quality control"},{"location":"mixcr/reference/mitool-compress-sequence-set/","text":"mitool compress-sequence-set Compress a .txt file with sequences into compressed .bin file. Usage: mitool compress-sequence-set [ OPTIONS ] SOURCE DESTINATION Arguments: SOURCE Input *.txt file with nucleotide sequences on each line DESTINATION Output *.bin compressed sequence set Options: -h, --help Show this message and exit","title":"compress-sequence-set"},{"location":"mixcr/reference/mitool-compress-sequence-set/#mitool-compress-sequence-set","text":"Compress a .txt file with sequences into compressed .bin file. Usage: mitool compress-sequence-set [ OPTIONS ] SOURCE DESTINATION Arguments: SOURCE Input *.txt file with nucleotide sequences on each line DESTINATION Output *.bin compressed sequence set Options: -h, --help Show this message and exit","title":"mitool compress-sequence-set"},{"location":"mixcr/reference/mitool-consensus/","text":"mitool consensus Assemble consensuses for sequences inside tag groups.(ex. UMI-based correction) Usage: mitool consensus [ OPTIONS ] SOURCE DESTINATION Arguments: SOURCE Input *.mic file DESTINATION Output *.mic file. Options: -g, --group-tag <TEXT> Tags to build groups of reads for consensus assembly (e.g. CELL , UMI , etc...). If not set MiTool will use defaults if preset was specified on the parse step. -a, --assemble-tag <TEXT> Tags to assemble consensuses for (e.g. R1 , R2 , PAYLOAD , etc...). If not set MiTool will use defaults if preset was specified on the parse step. --use-system-temp Use system temp folder for temporary files `-t, --threads Number of processing threads -r, --report <PATH> Human readable report file. If file already exists, it will be overwritten. -O <VALUE> Override consensus assembly parameters. -h, --help Show this message and exit","title":"consensus"},{"location":"mixcr/reference/mitool-consensus/#mitool-consensus","text":"Assemble consensuses for sequences inside tag groups.(ex. UMI-based correction) Usage: mitool consensus [ OPTIONS ] SOURCE DESTINATION Arguments: SOURCE Input *.mic file DESTINATION Output *.mic file. Options: -g, --group-tag <TEXT> Tags to build groups of reads for consensus assembly (e.g. CELL , UMI , etc...). If not set MiTool will use defaults if preset was specified on the parse step. -a, --assemble-tag <TEXT> Tags to assemble consensuses for (e.g. R1 , R2 , PAYLOAD , etc...). If not set MiTool will use defaults if preset was specified on the parse step. --use-system-temp Use system temp folder for temporary files `-t, --threads Number of processing threads -r, --report <PATH> Human readable report file. If file already exists, it will be overwritten. -O <VALUE> Override consensus assembly parameters. -h, --help Show this message and exit","title":"mitool consensus"},{"location":"mixcr/reference/mitool-correct/","text":"mitool correct Correct tag sequences Usage: mitool correct [ OPTIONS ] SOURCE DESTINATION Arguments: SOURCE Input *.mic file DESTINATION : Output *.mic file. Options: -t, --tag <TEXT> Name(s) of the tags to correct, each subsequent tag is corrected inside the group of equal tags going before it in the list. To correct a tag against a fixed set add a set specification separated by a hash sign after the tag name, i.e. \"CELL#preset:737K-august-2016\" or \"UMI#file:my_umi_list.txt\" . !!! note if --preset was used on the parse step you most probably can run this command without additional parameters as the appropriate defaults will be set for you from the preset collection -p, --power <FLOAT> ( default : 0.001 or from preset) This parameter determines how thorough the procedure should eliminate variants looking like errors. Smaller value leave less erroneous variants at the cost of accidentally correcting true variants. This value approximates the fraction of erroneous variants the algorithm will miss (type II errors). -s, --substitution-rate <FLOAT> ( default : 0.001 or from preset) Expected background non-sequencing-related substitution rate -i, --indel-rate <FLOAT> ( default : 1.0E-5 or from preset) Expected background non-sequencing-related indel rate -q, --min-quality <INT> ( default : 12 or from preset) Minimal quality score for the tag. Tags having positions with lower quality score will be discarded, if not corrected. --max-substitutions <INT> ( default : 2 or from preset) Maximal number of substitutions to search for. --max-indels <INT> ( default : 2 or from preset) Maximal number of indels to search for. --max-errors <INT> ( default : 3 or from preset) Maximal number of indels and substitutions combined to search for. --use-system-temp Use system temp folder for temporary files -r, --report <PATH> Human readable report file. If file already exists, it will be overwritten. -h, --help : Show this message and exit","title":"correct"},{"location":"mixcr/reference/mitool-correct/#mitool-correct","text":"Correct tag sequences Usage: mitool correct [ OPTIONS ] SOURCE DESTINATION Arguments: SOURCE Input *.mic file DESTINATION : Output *.mic file. Options: -t, --tag <TEXT> Name(s) of the tags to correct, each subsequent tag is corrected inside the group of equal tags going before it in the list. To correct a tag against a fixed set add a set specification separated by a hash sign after the tag name, i.e. \"CELL#preset:737K-august-2016\" or \"UMI#file:my_umi_list.txt\" . !!! note if --preset was used on the parse step you most probably can run this command without additional parameters as the appropriate defaults will be set for you from the preset collection -p, --power <FLOAT> ( default : 0.001 or from preset) This parameter determines how thorough the procedure should eliminate variants looking like errors. Smaller value leave less erroneous variants at the cost of accidentally correcting true variants. This value approximates the fraction of erroneous variants the algorithm will miss (type II errors). -s, --substitution-rate <FLOAT> ( default : 0.001 or from preset) Expected background non-sequencing-related substitution rate -i, --indel-rate <FLOAT> ( default : 1.0E-5 or from preset) Expected background non-sequencing-related indel rate -q, --min-quality <INT> ( default : 12 or from preset) Minimal quality score for the tag. Tags having positions with lower quality score will be discarded, if not corrected. --max-substitutions <INT> ( default : 2 or from preset) Maximal number of substitutions to search for. --max-indels <INT> ( default : 2 or from preset) Maximal number of indels to search for. --max-errors <INT> ( default : 3 or from preset) Maximal number of indels and substitutions combined to search for. --use-system-temp Use system temp folder for temporary files -r, --report <PATH> Human readable report file. If file already exists, it will be overwritten. -h, --help : Show this message and exit","title":"mitool correct"},{"location":"mixcr/reference/mitool-export-fastq/","text":"mitool export-fastq Export sequences from mic file into a FASTQ formatted file. Allows to export sequences with different tags into separate FASTQ files. Usage: mitool export-fastq [ OPTIONS ] SOURCE Arguments: SOURCE Input *.mic file Options: -O <VALUE> Tag names to output file names mapping (i.e. -OUMI=my_file.fastq.gz or -OR1=my_R1.fastq.gz ) -t, --header-tag <TEXT> Will add the sequence and quality score lines of the corresponding tags to the header line of exported fastq records -h, --help Show this message and exit","title":"export-fastq"},{"location":"mixcr/reference/mitool-export-fastq/#mitool-export-fastq","text":"Export sequences from mic file into a FASTQ formatted file. Allows to export sequences with different tags into separate FASTQ files. Usage: mitool export-fastq [ OPTIONS ] SOURCE Arguments: SOURCE Input *.mic file Options: -O <VALUE> Tag names to output file names mapping (i.e. -OUMI=my_file.fastq.gz or -OR1=my_R1.fastq.gz ) -t, --header-tag <TEXT> Will add the sequence and quality score lines of the corresponding tags to the header line of exported fastq records -h, --help Show this message and exit","title":"mitool export-fastq"},{"location":"mixcr/reference/mitool-filter/","text":"mitool filter Filter sequences in .mic file Usage: mitool filter [ OPTIONS ] SOURCE Arguments: <SOURCE> Input *.mic file Options: -c, --channel <TEXT...> Filter expression followed by the destination *.mic file name Tip it might be a good idea to wrap filtering expression in ' (single quote char) to prevent interpretation of it's content by the shell) -l, --channels-from-file <PATH> Load channel list from a two column tab-separated table file (filter + output file name). -t, --channels-from-tag-table <PATH> Load channel list from a tab-separated table with header setting tag names and cells tag values that are to be matched. -h, --help Show this message and exit","title":"filter"},{"location":"mixcr/reference/mitool-filter/#mitool-filter","text":"Filter sequences in .mic file Usage: mitool filter [ OPTIONS ] SOURCE Arguments: <SOURCE> Input *.mic file Options: -c, --channel <TEXT...> Filter expression followed by the destination *.mic file name Tip it might be a good idea to wrap filtering expression in ' (single quote char) to prevent interpretation of it's content by the shell) -l, --channels-from-file <PATH> Load channel list from a two column tab-separated table file (filter + output file name). -t, --channels-from-tag-table <PATH> Load channel list from a tab-separated table with header setting tag names and cells tag values that are to be matched. -h, --help Show this message and exit","title":"mitool filter"},{"location":"mixcr/reference/mitool-format-fastq/","text":"mitool format-fastq Usage: mitool format-fastq [ OPTIONS ] SOURCE... Arguments: SOURCE Input *.fastq or *.fastq.gz files Options: -n, --limit <INT> Limit number of output sequences -s, --skip <INT> Skip sequences before printing -i, --index <INT> Skip sequences before printing --read-strand Don't reverse second read in paired-end data -h, --help Show this message and exit","title":"format-fastq"},{"location":"mixcr/reference/mitool-format-fastq/#mitool-format-fastq","text":"Usage: mitool format-fastq [ OPTIONS ] SOURCE... Arguments: SOURCE Input *.fastq or *.fastq.gz files Options: -n, --limit <INT> Limit number of output sequences -s, --skip <INT> Skip sequences before printing -i, --index <INT> Skip sequences before printing --read-strand Don't reverse second read in paired-end data -h, --help Show this message and exit","title":"mitool format-fastq"},{"location":"mixcr/reference/mitool-parse/","text":"mitool parse Parse a given pattern in FASTQ file. Usage: mitool parse [ OPTIONS ] [ SOURCE ] ... DESTINATION Arguments: <SOURCE> Input *.fastq or *.fastq.gz files. Use \"{{n}}\" if you want to concatenate files from multiple lanes. Example my_file_L{{n}}_R1.fastq.gz my_file_L{{n}}_R2.fastq.gz <DESTINATION> Output *.mic file. Options: --pattern <VALUE> Pattern to parse against --pattern-file <VALUE> Load pattern from file --preset <VALUE> Load pattern and other options from built-in pattern library using a specific preset name, this also implies different default settings for other steps executed for the output file. --threads <INT> Number of processing threads -u, --unstranded If paired-end input is used, determines whether to try all combinations of mate-pairs or only match reads to the corresponding pattern sections (i.e. first file to first section, etc...) -n, --limit <INT> Limit number of reads -b, --max-error-budget <FLOAT> ( default : 10.0 or from preset) Maximal bit budget, higher values allows more substitutions in small letters. --unmatched <PATH> File(s) to write reads that were not matched against the pattern. Specify this option the same number of times as there are input reads. -r, --report <PATH> Human readable report file. If file already exists, it will be overwritten. -h, --help Show this message and exit","title":"parse"},{"location":"mixcr/reference/mitool-parse/#mitool-parse","text":"Parse a given pattern in FASTQ file. Usage: mitool parse [ OPTIONS ] [ SOURCE ] ... DESTINATION Arguments: <SOURCE> Input *.fastq or *.fastq.gz files. Use \"{{n}}\" if you want to concatenate files from multiple lanes. Example my_file_L{{n}}_R1.fastq.gz my_file_L{{n}}_R2.fastq.gz <DESTINATION> Output *.mic file. Options: --pattern <VALUE> Pattern to parse against --pattern-file <VALUE> Load pattern from file --preset <VALUE> Load pattern and other options from built-in pattern library using a specific preset name, this also implies different default settings for other steps executed for the output file. --threads <INT> Number of processing threads -u, --unstranded If paired-end input is used, determines whether to try all combinations of mate-pairs or only match reads to the corresponding pattern sections (i.e. first file to first section, etc...) -n, --limit <INT> Limit number of reads -b, --max-error-budget <FLOAT> ( default : 10.0 or from preset) Maximal bit budget, higher values allows more substitutions in small letters. --unmatched <PATH> File(s) to write reads that were not matched against the pattern. Specify this option the same number of times as there are input reads. -r, --report <PATH> Human readable report file. If file already exists, it will be overwritten. -h, --help Show this message and exit","title":"mitool parse"},{"location":"mixcr/reference/mitool-process-fastq/","text":"mitool process-fastq Usage: mitool process-fastq [ OPTIONS ] SOURCE DESTINATION Arguments: SOURCE Input *.fastq[.gz] file DESTINATION Output *.fastq[.gz] file Options: -e, --expression <TEXT> Pipeline expression. -n, --limit <INT> Limit number of reads -h, --help Show this message and exit","title":"process-fastq"},{"location":"mixcr/reference/mitool-process-fastq/#mitool-process-fastq","text":"Usage: mitool process-fastq [ OPTIONS ] SOURCE DESTINATION Arguments: SOURCE Input *.fastq[.gz] file DESTINATION Output *.fastq[.gz] file Options: -e, --expression <TEXT> Pipeline expression. -n, --limit <INT> Limit number of reads -h, --help Show this message and exit","title":"mitool process-fastq"},{"location":"mixcr/reference/mitool-tag-stat/","text":"mitool tag-stat Print statistics regarding tags in a mic file. Usage: mitool tag-stat [ OPTIONS ] SOURCE [ DESTINATION ] Arguments: <SOURCE> Input *.mic file DESTINATION Output *.txt file, if not specified, output will be printed to stdout Options: -t, --tags <TEXT> Name(s) of the tags to export -l, --top <INT> Output results only for the top-N tags -h, --help Show this message and exit","title":"tag-stat"},{"location":"mixcr/reference/mitool-tag-stat/#mitool-tag-stat","text":"Print statistics regarding tags in a mic file. Usage: mitool tag-stat [ OPTIONS ] SOURCE [ DESTINATION ] Arguments: <SOURCE> Input *.mic file DESTINATION Output *.txt file, if not specified, output will be printed to stdout Options: -t, --tags <TEXT> Name(s) of the tags to export -l, --top <INT> Output results only for the top-N tags -h, --help Show this message and exit","title":"mitool tag-stat"},{"location":"mixcr/reference/mixcr-align/","text":"mixcr align Aligns raw sequencing data against V-, D-, J- and C- gene segment references library database for specified species. If the input sequences have barcodes (UMIs, cell barcodes etc.), MiXCR allows to parse barcodes using powerful pattern matching syntax and assign them to every alignment. Additionally, read trimming may be applied if corresponding options are specified. MiXCR supports paired-end and single-end .fastq , .fasta , .bam and .sam formats. Command line options mixcr align [-f] [-nw] [-n <limit>] [-t <threads>] --species <species> [--library <library>] [--report <reportFile>] [--json-report <jsonReport>] [--tag-pattern <tagPattern>] [--tag-pattern-name <tagPatternName>] [--tag-pattern-file <tagPatternFile>] [--tag-parse-unstranded] [--tag-max-budget <tagMaxBudget>] [--preset <alignerParametersName>] [--not-aligned-R1 <failedReadsR1>] [--not-aligned-R2 <failedReadsR2>] [--trimming-quality-threshold <trimmingQualityThreshold>] [--trimming-window-size <trimmingWindowSize>] [--write-all] [--high-compression] [--read-buffer <readBufferSize>] [-O<String=String>]... input_R1(.fastq.gz|.fq|.fastq|.fasta|.fa|.BAM|.SAM) [input_R2(.fastq.gz|.fq|.fastq)] alignments.vdjca The command returns a highly-compressed, memory- and CPU-efficient binary .vdjca file that holds exhaustive information about alignments. Alignments can be further extracted in tabular form usign exportAlignments or in human-readable form using exportAlignmentsPretty . Additionally, MiXCR produces a comprehensive report which provides a detailed overview of the alignment performance and quality of the library. Basic command line options are: -n, --limit <limit> Take only first limit sequences from input file(s) to process -t, --threads <threads> Specify number of processing threads -nw, --no-warnings Suppress all warning messages --verbose Show verbose warning messages -f, --force-overwrite Force overwrite of output file(s). --species, -s Species (organism). Possible values: hsa (or HomoSapiens), mmu (or MusMusculus), rat , spalax , alpaca , lamaGlama , mulatta ( Macaca Mulatta ), fascicularis ( Macaca Fascicularis ) or any species from IMGT \u00ae library . --library, -b <library> V/D/J/C gene library. By default, the default MiXCR reference library is used. One can also use external libraries -r, --report <reportFile> Report file (human readable version, see -j / --json-report for machine readable report) -j, --json-report <jsonReport> JSON formatted report file --tag-pattern <tagPattern> Tag pattern to extract from the read. --tag-pattern-name <tagPatternName> Tag pattern name from the built-in list. Available patterns: [TODO] --tag-pattern-file <tagPatternFile> Read tag pattern from a file --tag-parse-unstranded If paired-end input is used, determines whether to try all combinations of mate-pairs or only match reads to the corresponding pattern sections (i.e. first file to first section, etc.) --tag-max-budget <tagMaxBudget> Maximal bit budget, higher values allows more substitutions in small letters. -p, --preset <alignerParametersName> Parameters preset. Available values : default , rna-seq , kAligner2 . --not-aligned-R1 <failedReadsR1> Pipe not aligned R1 reads into separate file. --not-aligned-R2 <failedReadsR2> Pipe not aligned R2 reads into separate file. --write-all Write alignment results for all input reads (even if alignment failed). --high-compression Use higher compression for output file, 10~25% slower, minus 30~50% of file size. --read-buffer <readBufferSize> Size of buffer for FASTQ readers -trimming-quality-threshold <trimmingQualityThreshold> Read pre-processing: trimming quality threshold. Zero value (default) can be used to skip trimming. --trimming-window-size <trimmingWindowSize> Read pre-processing: trimming window size -O <String=String> Overrides default aligner parameter values (see below). Aligner parameters MiXCR uses a wide range of parameters that control aligners behaviour. There are global parameters and gene-specific parameters organized in groups: vParameters , dParameters , jParameters and cParameters . Each group of parameters may contain further subgroups of parameters. In order to override a parameter value one can use -O followed by fully qualified parameter name and parameter value (e.g. -Ogroup1.group2.parameter=value ). Global aligner parameters include: -OsaveOriginalReads=false Save original sequencing reads in .vdjca file (default false ). -OallowPartialAlignments=false Save incomplete alignments (e.g. only V / only J) in .vdjca file. -OallowNoCDR3PartAlignments=false Save alignments which do not fully cover CDR3 region. -OallowChimeras=false Accept alignments with different loci of V and J genes (by default such alignments are dropped). -OminSumScore=120 Minimal total alignment score value of V and J genes. -OmaxHits=5 Maximal number of hits for each gene type: if input sequence align to more than maxHits targets, then only top maxHits hits will be kept. -OvjAlignmentOrder=VThenJ (only for single-end analysis) Order in which V and J genes aligned in target (possible values JThenV and VThenJ ). Parameter affects only single-read alignments and alignments of overlapped paired-end reads. Non-overlapping paired-end reads are always processed in VThenJ mode. JThenV can be used for short reads (~100bp) with full (or nearly full) J gene coverage. -OrelativeMinVFR3CDR3Score=0.7 (only for paired-end analysis) Relative minimal alignment score of FR3+VCDR3Part region for V gene. V hit will be kept only if its FR3+VCDR3Part part aligns with score greater than relativeMinVFR3CDR3Score * maxFR3CDR3Score , where maxFR3CDR3Score is the maximal alignment score for FR3+VCDR3Part region among all of V hits for current input reads pair. -OreadsLayout=Opposite (only for paired-end analysis) Relative orientation of paired reads. Available values: Opposite , Collinear , Unknown -OrelativeMinVScore=0.7 (only for paired-end analysis) Relative minimum score of V gene. Only those V hits will be considered, which score is greater then relativeMinVScore * maxVScore , where maxVScore is the maximum score throw all obtained V hits. -OalignmentBoundaryTolerance=5 Force alignment of opposite mate pair if another mate alignment almost reach its boundary (left for right read and right for left read), keeping at most alignmentBoundaryTolerance letters not ailgned. -OminChimeraDetectionScore=120 Used in V/J chimera detection and elimination mechanism: both alignments in R1 and R2 should be greater than this value. -OvjOverlapWindow=3 Maximal possible overlap between V and J alignments includeDScore=false Add D alignment score to the overall alignment score includeCScore=false Add C alignment score to the overall alignment score To override these parameters one can e.g. do: > mixcr align --species hs \\ -OallowPartialAlignments = true \\ -OallowNoCDR3PartAlignments = true \\ input_file1 [ input_file2 ] output_file.vdjca Merging algorithm parameters MiXCR overlaps R1 and R2 reads if corresponding alignments overlap. There several parameters controlling merging behaviour: -OmergerParameters.qualityMergingAlgorithm=MaxSubtraction Algorithm used to compute Phred quality of overlapping region. Possible values: SumMax , SumSubtraction , MaxSubtraction and MaxMax . -OmergerParameters.minimalOverlap=17 Minimal length of R1 and R2 to proceed with overlap algorithm. -OmergerParameters.minimalIdentity=0.9 Minimal allowed percent of matched letters in overlapping region. To override these parameters one can e.g. do: > mixcr align --species hs \\ -OmergerParameters.minimalIdentity = 0 .8 \\ input_file1 [ input_file2 ] output_file.vdjca Gene features to align MiXCR allows to specify particular gene features that will be extracted from reference and used as a targets for alignments. Thus, each sequencing read will be aligned to these extracted reference regions. Parameters responsible for target gene regions are: -OvParameters.geneFeatureToAlign=VRegionWithP region in V gene which will be used as target -OdParameters.geneFeatureToAlign=DRegionWithP region in D gene which will be used as target -OjParameters.geneFeatureToAlign=JRegionWithP region in J gene which will be used as target -OcParameters.geneFeatureToAlign=CExon1 region in C gene which will be used as target It is important to specify these gene regions such that they will fully cover target clonal gene region which will be used in assemble (e.g. CDR3). To override these parameters one can e.g. do: > mixcr align --species hs \\ -OvParameters.geneFeatureToAlign = VTranscriptWithP \\ input_file1 [ input_file2 ] output_file.vdjca V, J and C aligners parameters MiXCR has two types of aligners to align V, J and C genes: kAligner \u2014 better suited for linear scoring and better works with T-cell data kAligner2 \u2014 specifically designed for affine scoring, better handles large number of mutations (e.g. hypermutations) and long indels typical for B-cell data These aligners are based on k-mer seed-and-vote algorithms inspired by this paper . There are many parameters that may be tuned individually for each aligner for each gene type. MiXCR offers a number of default preset parameters that may be chosen with --preset command line option: default \u2014 for T-cell and non-targeted B-cell data rna-seq \u2014 for non-targeted RNA-Seq (shotgun) data with kAligner2 \u2014 for targeted B-cell data For default and rna-seq presets MiXCR uses kAligner for all gene types. For kAligner2 preset MiXCR uses kAligner2 for Variable and Joining segments and kAligner for Constant region. Parameters for kAligner The following parameters can be specified for kAligner : mapperKValue Length of seeds used in aligner. floatingLeftBound Specifies whether left bound of alignment is fixed or float: if floatingLeftBound set to false, the left bound of either target or query will be aligned. Default values are suitable in most cases. If your target molecules have no primer sequences in V Region (e.g. 5'RACE) (or your -OvParameters.geneFeatureToAlign does not cover the region where primer is located) you can change value of this parameter for V gene to false to increase V gene identification accuracy and overall specificity of alignments. floatingRightBound Specifies whether right bound of alignment is fixed or float: if floatingRightBound set to false, the right bound of either target or query will be aligned. Default values are suitable in most cases. If your target molecules have no primer sequences in J Region (e.g. library was amplified using primer to the C region) you can change value of this parameter for J gene to false to increase J gene identification accuracy and overall specificity of alignments. minAlignmentLength Minimal length of aligned region. maxAdjacentIndels Maximum number of indels between two seeds. absoluteMinScore Minimal score of alignment: alignments with smaller score will be dropped. relativeMinScore Minimal relative score of alignments: if alignment score is smaller than relativeMinScore * maxScore , where maxScore is the best score among all alignments for particular gene type (V, J or C) and input sequence, it will be dropped. maxHits Maximal number of hits: if input sequence align with more than maxHits queries, only top maxHits hits will be kept. mapperAbsoluteMinScore k-mer mapper absolute min score mapperRelativeMinScore k-mer mapper relative min score mapperMatchScore Match score for single k-mer match. mapperMismatchPenalty Mismatch penalty for single k-mer mismatch. mapperOffsetShiftPenalty Penalty for k-mer position shift. mapperMinSeedsDistance Min distance between seeds in seed-and-vote strategy. mapperMaxSeedsDistance Max distance between neighbor seeds during seeding. alignmentStopPenalty Stop penalty. Default values for these parameters are: Parameter Default V value Default J value Default C value RNA-Seq V value RNA-Seq J value RNA-Seq C value kAligner2 C value mapperKValue 5 5 5 5 5 5 5 floatingLeftBound true true false false true false false floatingRightBound true false false true false false false minAlignmentLength 15 15 15 15 15 15 15 maxAdjacentIndels 2 2 2 2 2 2 2 absoluteMinScore 40 40.0 40.0 55.0 50.0 40.0 40.0 relativeMinScore 0.87 0.87 0.87 0.87 0.87 0.87 0.87 maxHits 7 7 7 7 7 7 7 mapperAbsoluteMinScore 1.5 1.5 1.5 1.5 1.5 1.5 1.5 mapperRelativeMinScore 0.7 0.75 0.75 0.7 0.75 0.75 0.75 mapperMatchScore 1.0 1.0 1.0 1.0 1.0 1.0 1.0 mapperMismatchPenalty -0.1 -0.1 -0.1 -0.1 -0.1 -0.1 -0.1 mapperOffsetShiftPenalty -0.3 -0.3 -0.3 -0.3 -0.3 -0.3 -0.3 mapperMinSeedsDistance 4 4 4 4 4 4 4 mapperMaxSeedsDistance 10 8 10 10 8 10 10 alignmentStopPenalty -1000 -1000 -1000 -1000 -1000 -1000 -1000 To override these parameters one can e.g. do: > mixcr align --species hs \\ -OvParameters.parameters.minAlignmentLength = 30 \\ -OjParameters.parameters.relativeMinScore = 0 .7 \\ input_file1 [ input_file2 ] output_file.vdjca Scoring used in aligners is specified by scoring subgroup of parameters. It contains the following parameters: subsMatrix=simple(match = <match>, mismatch = <mismatch>>) Substitution matrix. Available types: simple - a matrix with diagonal elements equal to match and other elements equal to mismatch raw - a complete set of 16 matrix elements should be specified; for example: raw(5,-9,-9,-9,-9,5,-9,-9,-9,-9,5,-9,-9,-9,-9,5) ( equivalent to the default value ) gapPenalty=<penalty> Penalty for a gap. For default preset MiXCR uses simple(match = 5, mismatch = -9) and gapPenalty=-12 for V-, J- and C- aligners. For rna-seq preset MiXCR uses simple(match = 5, mismatch = -11) and gapPenalty=-21 values. Scoring parameters can be overridden in the following way: > mixcr align --species hs \\ -OvParameters.parameters.scoring.gapPenalty = -20 \\ -OvParameters.parameters.scoring.subsMatrix = simple ( match = 4 ,mismatch = -11 ) \\ input_file1 [ input_file2 ] output_file.vdjca Parameters for kAligner2 The following parameters can be tuned for kAligner2 : mapperNValue Length of k-mer seeds used in aligner. mapperKValue Allowed number of mutations in k-mer floatingLeftBound Specifies whether left bound of alignment is fixed or float: if floatingLeftBound set to false, the left bound of either target or query will be aligned. Default values are suitable in most cases. If your target molecules have no primer sequences in V Region (e.g. 5'RACE) you can change value of this parameter for V gene to false to increase V gene identification accuracy and overall specificity of alignments. floatingRightBound Specifies whether right bound of alignment is fixed or float: if floatingRightBound set to false , the right bound of either target or query will be aligned. Default values are suitable in most cases. If your target molecules have no primer sequences in J Region (e.g. library was amplified using primer to the C region) or your -OjParameters.geneFeatureToAlign does not cover the region where primer is located, then you can change value of this parameter for J gene to false to increase J gene identification accuracy and overall specificity of alignments. absoluteMinScore Minimal score of alignment: alignments with smaller score will be dropped. relativeMinScore Minimal relative score of alignments: if alignment score is smaller than relativeMinScore * maxScore , where maxScore is the best score among all alignments for particular gene type (V, J or C) and input sequence, it will be dropped. maxHits Maximal number of hits: if input sequence align with more than maxHits queries, only top maxHits hits will be kept. mapperAbsoluteMinClusterScore Minimal allowed absolute hit score obtained by mapper to consider hit as reliable candidate mapperExtraClusterScore Extra score for good cluster. mapperMatchScore Score for single k-mer match. mapperMismatchScore Mismatch penalty for single k-mer mismatch. mapperOffsetShiftScore Penalty for k-mer position shift. mapperSlotCount Number of simultaneously constructed clusters in one-pass initial cluster detection algorithm. mapperMaxClusters Max allowed clusters. mapperMaxClusterIndels Max indels inside a cluster (if indel is bigger, alignment will be divided into several clusters). mapperKMersPerPosition If mapperKValue > 0 , it is possible to map several seeds with holes in different places to the same position in target sequence. This parameter control the maximum. mapperAbsoluteMinScore k-mer mapper absolute min score mapperRelativeMinScore k-mer mapper relative min score mapperMinSeedsDistance min distance between seeds in seed-and-vote strategy mapperMaxSeedsDistance max distance between neighbor seeds during seeding alignmentStopPenalty stop penalty Default values are: Parameter Default V value Default J value mapperNValue 8 8 mapperKValue 1 1 floatingLeftBound true true floatingRightBound true false mapperAbsoluteMinClusterScore 102 102 mapperExtraClusterScore -38 -38 mapperMatchScore 95 95 mapperMismatchScore -14 -14 mapperOffsetShiftScore -82 -82 mapperSlotCount 6 6 mapperMaxClusters 4 4 mapperMaxClusterIndels 4 4 mapperKMersPerPosition 4 4 mapperAbsoluteMinScore 100 100 mapperRelativeMinScore 0.8 0.8 mapperMinSeedsDistance 5 5 mapperMaxSeedsDistance 15 5 alignmentStopPenalty 0 0 absoluteMinScore 150 140 relativeMinScore 0.8 0.8 maxHits 3 3 To override these parameters one can e.g. do: > mixcr align --species hs --preset kAligner2 \\ -OvParameters.parameters.maxHits = 5 \\ input_file1 [ input_file2 ] output_file.vdjca MiXCR uses affine scoring for kAligner2 : subsMatrix=simple(match = <match>, mismatch = <mismatch>>) Substitution matrix. Available types: simple - a matrix with diagonal elements equal to match and other elements equal to mismatch raw - a complete set of 16 matrix elements should be specified; for example: raw(5,-9,-9,-9,-9,5,-9,-9,-9,-9,5,-9,-9,-9,-9,5) (equivalent to the default value) gapOpenPenalty=<penalty> Penalty for opening a gap. gapExtensionPenalty=<penalty> Penalty gap extension. Default values used with kAligner2 preset are: subsMatrix=simple(match = 10, mismatch = -19) gapOpenPenalty=-62 gapExtensionPenalty=-11 Scoring parameters can be overridden in the following way: > mixcr align --species hs --preset kAligner2 \\ -OvParameters.parameters.scoring.gapOpenPenalty = -30 \\ -OvParameters.parameters.scoring.subsMatrix = simple ( match = 4 ,mismatch = -11 ) \\ input_file1 [ input_file2 ] output_file.vdjca D aligner parameters The following parameters can be overridden for D aligner: -OdParameters.absoluteMinScore=25.0 Minimal score of alignment: alignments with smaller scores will be dropped. -OdParameters.relativeMinScore=.85 Minimal relative score of alignment: if alignment score is smaller than relativeMinScore * maxScore , where maxScore is the best score among all alignments for particular sequence, it will be dropped. -OdParameters.maxHits=3 Maximal number of hits: if input sequence align with more than maxHits queries, only top maxHits hits will be kept. One can override these parameters like in the following example:\" > mixcr align \\ --species hs \\ -OdParameters.absoluteMinScore = 10 \\ input_file1 [ input_file2 ] output_file.vdjca Scoring parameters for D aligner are the following: -OdParameters.type=linear Type of scoring. Possible values: affine , linear . -OdParameters.subsMatrix=simple(match = 5,mismatch = -9) Substitution matrix. Available types: simple - a matrix with diagonal elements equal to match and other elements equal to mismatch raw - a complete set of 16 matrix elements should be specified; for example: raw(5,-9,-9,-9,-9,5,-9,-9,-9,-9,5,-9,-9,-9,-9,5) (equivalent to the default value) -OdParameters.gapPenalty=-12 Penalty for a gap. D aligner parameters can be overridden in the following way: > mixcr align \\ --species hs \\ -OdParameters.scoring.gapExtensionPenalty = -5 \\ input_file1 [ input_file2 ] output_file.vdjca Hardware recommendations Alignment step is CPU-consuming. It utilizes all available CPU kernels (unless --threads option is specified) and scales nearly linearly with the increase of CPU count. The only factor limiting linear scaling is I/O speed (disk read) and decompression of gzipped fastq data. It consumes low amount of RAM and 4Gb should be enough for any size of input files.","title":"align"},{"location":"mixcr/reference/mixcr-align/#mixcr-align","text":"Aligns raw sequencing data against V-, D-, J- and C- gene segment references library database for specified species. If the input sequences have barcodes (UMIs, cell barcodes etc.), MiXCR allows to parse barcodes using powerful pattern matching syntax and assign them to every alignment. Additionally, read trimming may be applied if corresponding options are specified. MiXCR supports paired-end and single-end .fastq , .fasta , .bam and .sam formats.","title":"mixcr align"},{"location":"mixcr/reference/mixcr-align/#command-line-options","text":"mixcr align [-f] [-nw] [-n <limit>] [-t <threads>] --species <species> [--library <library>] [--report <reportFile>] [--json-report <jsonReport>] [--tag-pattern <tagPattern>] [--tag-pattern-name <tagPatternName>] [--tag-pattern-file <tagPatternFile>] [--tag-parse-unstranded] [--tag-max-budget <tagMaxBudget>] [--preset <alignerParametersName>] [--not-aligned-R1 <failedReadsR1>] [--not-aligned-R2 <failedReadsR2>] [--trimming-quality-threshold <trimmingQualityThreshold>] [--trimming-window-size <trimmingWindowSize>] [--write-all] [--high-compression] [--read-buffer <readBufferSize>] [-O<String=String>]... input_R1(.fastq.gz|.fq|.fastq|.fasta|.fa|.BAM|.SAM) [input_R2(.fastq.gz|.fq|.fastq)] alignments.vdjca The command returns a highly-compressed, memory- and CPU-efficient binary .vdjca file that holds exhaustive information about alignments. Alignments can be further extracted in tabular form usign exportAlignments or in human-readable form using exportAlignmentsPretty . Additionally, MiXCR produces a comprehensive report which provides a detailed overview of the alignment performance and quality of the library. Basic command line options are: -n, --limit <limit> Take only first limit sequences from input file(s) to process -t, --threads <threads> Specify number of processing threads -nw, --no-warnings Suppress all warning messages --verbose Show verbose warning messages -f, --force-overwrite Force overwrite of output file(s). --species, -s Species (organism). Possible values: hsa (or HomoSapiens), mmu (or MusMusculus), rat , spalax , alpaca , lamaGlama , mulatta ( Macaca Mulatta ), fascicularis ( Macaca Fascicularis ) or any species from IMGT \u00ae library . --library, -b <library> V/D/J/C gene library. By default, the default MiXCR reference library is used. One can also use external libraries -r, --report <reportFile> Report file (human readable version, see -j / --json-report for machine readable report) -j, --json-report <jsonReport> JSON formatted report file --tag-pattern <tagPattern> Tag pattern to extract from the read. --tag-pattern-name <tagPatternName> Tag pattern name from the built-in list. Available patterns: [TODO] --tag-pattern-file <tagPatternFile> Read tag pattern from a file --tag-parse-unstranded If paired-end input is used, determines whether to try all combinations of mate-pairs or only match reads to the corresponding pattern sections (i.e. first file to first section, etc.) --tag-max-budget <tagMaxBudget> Maximal bit budget, higher values allows more substitutions in small letters. -p, --preset <alignerParametersName> Parameters preset. Available values : default , rna-seq , kAligner2 . --not-aligned-R1 <failedReadsR1> Pipe not aligned R1 reads into separate file. --not-aligned-R2 <failedReadsR2> Pipe not aligned R2 reads into separate file. --write-all Write alignment results for all input reads (even if alignment failed). --high-compression Use higher compression for output file, 10~25% slower, minus 30~50% of file size. --read-buffer <readBufferSize> Size of buffer for FASTQ readers -trimming-quality-threshold <trimmingQualityThreshold> Read pre-processing: trimming quality threshold. Zero value (default) can be used to skip trimming. --trimming-window-size <trimmingWindowSize> Read pre-processing: trimming window size -O <String=String> Overrides default aligner parameter values (see below).","title":"Command line options"},{"location":"mixcr/reference/mixcr-align/#aligner-parameters","text":"MiXCR uses a wide range of parameters that control aligners behaviour. There are global parameters and gene-specific parameters organized in groups: vParameters , dParameters , jParameters and cParameters . Each group of parameters may contain further subgroups of parameters. In order to override a parameter value one can use -O followed by fully qualified parameter name and parameter value (e.g. -Ogroup1.group2.parameter=value ). Global aligner parameters include: -OsaveOriginalReads=false Save original sequencing reads in .vdjca file (default false ). -OallowPartialAlignments=false Save incomplete alignments (e.g. only V / only J) in .vdjca file. -OallowNoCDR3PartAlignments=false Save alignments which do not fully cover CDR3 region. -OallowChimeras=false Accept alignments with different loci of V and J genes (by default such alignments are dropped). -OminSumScore=120 Minimal total alignment score value of V and J genes. -OmaxHits=5 Maximal number of hits for each gene type: if input sequence align to more than maxHits targets, then only top maxHits hits will be kept. -OvjAlignmentOrder=VThenJ (only for single-end analysis) Order in which V and J genes aligned in target (possible values JThenV and VThenJ ). Parameter affects only single-read alignments and alignments of overlapped paired-end reads. Non-overlapping paired-end reads are always processed in VThenJ mode. JThenV can be used for short reads (~100bp) with full (or nearly full) J gene coverage. -OrelativeMinVFR3CDR3Score=0.7 (only for paired-end analysis) Relative minimal alignment score of FR3+VCDR3Part region for V gene. V hit will be kept only if its FR3+VCDR3Part part aligns with score greater than relativeMinVFR3CDR3Score * maxFR3CDR3Score , where maxFR3CDR3Score is the maximal alignment score for FR3+VCDR3Part region among all of V hits for current input reads pair. -OreadsLayout=Opposite (only for paired-end analysis) Relative orientation of paired reads. Available values: Opposite , Collinear , Unknown -OrelativeMinVScore=0.7 (only for paired-end analysis) Relative minimum score of V gene. Only those V hits will be considered, which score is greater then relativeMinVScore * maxVScore , where maxVScore is the maximum score throw all obtained V hits. -OalignmentBoundaryTolerance=5 Force alignment of opposite mate pair if another mate alignment almost reach its boundary (left for right read and right for left read), keeping at most alignmentBoundaryTolerance letters not ailgned. -OminChimeraDetectionScore=120 Used in V/J chimera detection and elimination mechanism: both alignments in R1 and R2 should be greater than this value. -OvjOverlapWindow=3 Maximal possible overlap between V and J alignments includeDScore=false Add D alignment score to the overall alignment score includeCScore=false Add C alignment score to the overall alignment score To override these parameters one can e.g. do: > mixcr align --species hs \\ -OallowPartialAlignments = true \\ -OallowNoCDR3PartAlignments = true \\ input_file1 [ input_file2 ] output_file.vdjca","title":"Aligner parameters"},{"location":"mixcr/reference/mixcr-align/#merging-algorithm-parameters","text":"MiXCR overlaps R1 and R2 reads if corresponding alignments overlap. There several parameters controlling merging behaviour: -OmergerParameters.qualityMergingAlgorithm=MaxSubtraction Algorithm used to compute Phred quality of overlapping region. Possible values: SumMax , SumSubtraction , MaxSubtraction and MaxMax . -OmergerParameters.minimalOverlap=17 Minimal length of R1 and R2 to proceed with overlap algorithm. -OmergerParameters.minimalIdentity=0.9 Minimal allowed percent of matched letters in overlapping region. To override these parameters one can e.g. do: > mixcr align --species hs \\ -OmergerParameters.minimalIdentity = 0 .8 \\ input_file1 [ input_file2 ] output_file.vdjca","title":"Merging algorithm parameters"},{"location":"mixcr/reference/mixcr-align/#gene-features-to-align","text":"MiXCR allows to specify particular gene features that will be extracted from reference and used as a targets for alignments. Thus, each sequencing read will be aligned to these extracted reference regions. Parameters responsible for target gene regions are: -OvParameters.geneFeatureToAlign=VRegionWithP region in V gene which will be used as target -OdParameters.geneFeatureToAlign=DRegionWithP region in D gene which will be used as target -OjParameters.geneFeatureToAlign=JRegionWithP region in J gene which will be used as target -OcParameters.geneFeatureToAlign=CExon1 region in C gene which will be used as target It is important to specify these gene regions such that they will fully cover target clonal gene region which will be used in assemble (e.g. CDR3). To override these parameters one can e.g. do: > mixcr align --species hs \\ -OvParameters.geneFeatureToAlign = VTranscriptWithP \\ input_file1 [ input_file2 ] output_file.vdjca","title":"Gene features to align"},{"location":"mixcr/reference/mixcr-align/#v-j-and-c-aligners-parameters","text":"MiXCR has two types of aligners to align V, J and C genes: kAligner \u2014 better suited for linear scoring and better works with T-cell data kAligner2 \u2014 specifically designed for affine scoring, better handles large number of mutations (e.g. hypermutations) and long indels typical for B-cell data These aligners are based on k-mer seed-and-vote algorithms inspired by this paper . There are many parameters that may be tuned individually for each aligner for each gene type. MiXCR offers a number of default preset parameters that may be chosen with --preset command line option: default \u2014 for T-cell and non-targeted B-cell data rna-seq \u2014 for non-targeted RNA-Seq (shotgun) data with kAligner2 \u2014 for targeted B-cell data For default and rna-seq presets MiXCR uses kAligner for all gene types. For kAligner2 preset MiXCR uses kAligner2 for Variable and Joining segments and kAligner for Constant region.","title":"V, J and C aligners parameters"},{"location":"mixcr/reference/mixcr-align/#parameters-for-kaligner","text":"The following parameters can be specified for kAligner : mapperKValue Length of seeds used in aligner. floatingLeftBound Specifies whether left bound of alignment is fixed or float: if floatingLeftBound set to false, the left bound of either target or query will be aligned. Default values are suitable in most cases. If your target molecules have no primer sequences in V Region (e.g. 5'RACE) (or your -OvParameters.geneFeatureToAlign does not cover the region where primer is located) you can change value of this parameter for V gene to false to increase V gene identification accuracy and overall specificity of alignments. floatingRightBound Specifies whether right bound of alignment is fixed or float: if floatingRightBound set to false, the right bound of either target or query will be aligned. Default values are suitable in most cases. If your target molecules have no primer sequences in J Region (e.g. library was amplified using primer to the C region) you can change value of this parameter for J gene to false to increase J gene identification accuracy and overall specificity of alignments. minAlignmentLength Minimal length of aligned region. maxAdjacentIndels Maximum number of indels between two seeds. absoluteMinScore Minimal score of alignment: alignments with smaller score will be dropped. relativeMinScore Minimal relative score of alignments: if alignment score is smaller than relativeMinScore * maxScore , where maxScore is the best score among all alignments for particular gene type (V, J or C) and input sequence, it will be dropped. maxHits Maximal number of hits: if input sequence align with more than maxHits queries, only top maxHits hits will be kept. mapperAbsoluteMinScore k-mer mapper absolute min score mapperRelativeMinScore k-mer mapper relative min score mapperMatchScore Match score for single k-mer match. mapperMismatchPenalty Mismatch penalty for single k-mer mismatch. mapperOffsetShiftPenalty Penalty for k-mer position shift. mapperMinSeedsDistance Min distance between seeds in seed-and-vote strategy. mapperMaxSeedsDistance Max distance between neighbor seeds during seeding. alignmentStopPenalty Stop penalty. Default values for these parameters are: Parameter Default V value Default J value Default C value RNA-Seq V value RNA-Seq J value RNA-Seq C value kAligner2 C value mapperKValue 5 5 5 5 5 5 5 floatingLeftBound true true false false true false false floatingRightBound true false false true false false false minAlignmentLength 15 15 15 15 15 15 15 maxAdjacentIndels 2 2 2 2 2 2 2 absoluteMinScore 40 40.0 40.0 55.0 50.0 40.0 40.0 relativeMinScore 0.87 0.87 0.87 0.87 0.87 0.87 0.87 maxHits 7 7 7 7 7 7 7 mapperAbsoluteMinScore 1.5 1.5 1.5 1.5 1.5 1.5 1.5 mapperRelativeMinScore 0.7 0.75 0.75 0.7 0.75 0.75 0.75 mapperMatchScore 1.0 1.0 1.0 1.0 1.0 1.0 1.0 mapperMismatchPenalty -0.1 -0.1 -0.1 -0.1 -0.1 -0.1 -0.1 mapperOffsetShiftPenalty -0.3 -0.3 -0.3 -0.3 -0.3 -0.3 -0.3 mapperMinSeedsDistance 4 4 4 4 4 4 4 mapperMaxSeedsDistance 10 8 10 10 8 10 10 alignmentStopPenalty -1000 -1000 -1000 -1000 -1000 -1000 -1000 To override these parameters one can e.g. do: > mixcr align --species hs \\ -OvParameters.parameters.minAlignmentLength = 30 \\ -OjParameters.parameters.relativeMinScore = 0 .7 \\ input_file1 [ input_file2 ] output_file.vdjca Scoring used in aligners is specified by scoring subgroup of parameters. It contains the following parameters: subsMatrix=simple(match = <match>, mismatch = <mismatch>>) Substitution matrix. Available types: simple - a matrix with diagonal elements equal to match and other elements equal to mismatch raw - a complete set of 16 matrix elements should be specified; for example: raw(5,-9,-9,-9,-9,5,-9,-9,-9,-9,5,-9,-9,-9,-9,5) ( equivalent to the default value ) gapPenalty=<penalty> Penalty for a gap. For default preset MiXCR uses simple(match = 5, mismatch = -9) and gapPenalty=-12 for V-, J- and C- aligners. For rna-seq preset MiXCR uses simple(match = 5, mismatch = -11) and gapPenalty=-21 values. Scoring parameters can be overridden in the following way: > mixcr align --species hs \\ -OvParameters.parameters.scoring.gapPenalty = -20 \\ -OvParameters.parameters.scoring.subsMatrix = simple ( match = 4 ,mismatch = -11 ) \\ input_file1 [ input_file2 ] output_file.vdjca","title":"Parameters for kAligner"},{"location":"mixcr/reference/mixcr-align/#parameters-for-kaligner2","text":"The following parameters can be tuned for kAligner2 : mapperNValue Length of k-mer seeds used in aligner. mapperKValue Allowed number of mutations in k-mer floatingLeftBound Specifies whether left bound of alignment is fixed or float: if floatingLeftBound set to false, the left bound of either target or query will be aligned. Default values are suitable in most cases. If your target molecules have no primer sequences in V Region (e.g. 5'RACE) you can change value of this parameter for V gene to false to increase V gene identification accuracy and overall specificity of alignments. floatingRightBound Specifies whether right bound of alignment is fixed or float: if floatingRightBound set to false , the right bound of either target or query will be aligned. Default values are suitable in most cases. If your target molecules have no primer sequences in J Region (e.g. library was amplified using primer to the C region) or your -OjParameters.geneFeatureToAlign does not cover the region where primer is located, then you can change value of this parameter for J gene to false to increase J gene identification accuracy and overall specificity of alignments. absoluteMinScore Minimal score of alignment: alignments with smaller score will be dropped. relativeMinScore Minimal relative score of alignments: if alignment score is smaller than relativeMinScore * maxScore , where maxScore is the best score among all alignments for particular gene type (V, J or C) and input sequence, it will be dropped. maxHits Maximal number of hits: if input sequence align with more than maxHits queries, only top maxHits hits will be kept. mapperAbsoluteMinClusterScore Minimal allowed absolute hit score obtained by mapper to consider hit as reliable candidate mapperExtraClusterScore Extra score for good cluster. mapperMatchScore Score for single k-mer match. mapperMismatchScore Mismatch penalty for single k-mer mismatch. mapperOffsetShiftScore Penalty for k-mer position shift. mapperSlotCount Number of simultaneously constructed clusters in one-pass initial cluster detection algorithm. mapperMaxClusters Max allowed clusters. mapperMaxClusterIndels Max indels inside a cluster (if indel is bigger, alignment will be divided into several clusters). mapperKMersPerPosition If mapperKValue > 0 , it is possible to map several seeds with holes in different places to the same position in target sequence. This parameter control the maximum. mapperAbsoluteMinScore k-mer mapper absolute min score mapperRelativeMinScore k-mer mapper relative min score mapperMinSeedsDistance min distance between seeds in seed-and-vote strategy mapperMaxSeedsDistance max distance between neighbor seeds during seeding alignmentStopPenalty stop penalty Default values are: Parameter Default V value Default J value mapperNValue 8 8 mapperKValue 1 1 floatingLeftBound true true floatingRightBound true false mapperAbsoluteMinClusterScore 102 102 mapperExtraClusterScore -38 -38 mapperMatchScore 95 95 mapperMismatchScore -14 -14 mapperOffsetShiftScore -82 -82 mapperSlotCount 6 6 mapperMaxClusters 4 4 mapperMaxClusterIndels 4 4 mapperKMersPerPosition 4 4 mapperAbsoluteMinScore 100 100 mapperRelativeMinScore 0.8 0.8 mapperMinSeedsDistance 5 5 mapperMaxSeedsDistance 15 5 alignmentStopPenalty 0 0 absoluteMinScore 150 140 relativeMinScore 0.8 0.8 maxHits 3 3 To override these parameters one can e.g. do: > mixcr align --species hs --preset kAligner2 \\ -OvParameters.parameters.maxHits = 5 \\ input_file1 [ input_file2 ] output_file.vdjca MiXCR uses affine scoring for kAligner2 : subsMatrix=simple(match = <match>, mismatch = <mismatch>>) Substitution matrix. Available types: simple - a matrix with diagonal elements equal to match and other elements equal to mismatch raw - a complete set of 16 matrix elements should be specified; for example: raw(5,-9,-9,-9,-9,5,-9,-9,-9,-9,5,-9,-9,-9,-9,5) (equivalent to the default value) gapOpenPenalty=<penalty> Penalty for opening a gap. gapExtensionPenalty=<penalty> Penalty gap extension. Default values used with kAligner2 preset are: subsMatrix=simple(match = 10, mismatch = -19) gapOpenPenalty=-62 gapExtensionPenalty=-11 Scoring parameters can be overridden in the following way: > mixcr align --species hs --preset kAligner2 \\ -OvParameters.parameters.scoring.gapOpenPenalty = -30 \\ -OvParameters.parameters.scoring.subsMatrix = simple ( match = 4 ,mismatch = -11 ) \\ input_file1 [ input_file2 ] output_file.vdjca","title":"Parameters for kAligner2"},{"location":"mixcr/reference/mixcr-align/#d-aligner-parameters","text":"The following parameters can be overridden for D aligner: -OdParameters.absoluteMinScore=25.0 Minimal score of alignment: alignments with smaller scores will be dropped. -OdParameters.relativeMinScore=.85 Minimal relative score of alignment: if alignment score is smaller than relativeMinScore * maxScore , where maxScore is the best score among all alignments for particular sequence, it will be dropped. -OdParameters.maxHits=3 Maximal number of hits: if input sequence align with more than maxHits queries, only top maxHits hits will be kept. One can override these parameters like in the following example:\" > mixcr align \\ --species hs \\ -OdParameters.absoluteMinScore = 10 \\ input_file1 [ input_file2 ] output_file.vdjca Scoring parameters for D aligner are the following: -OdParameters.type=linear Type of scoring. Possible values: affine , linear . -OdParameters.subsMatrix=simple(match = 5,mismatch = -9) Substitution matrix. Available types: simple - a matrix with diagonal elements equal to match and other elements equal to mismatch raw - a complete set of 16 matrix elements should be specified; for example: raw(5,-9,-9,-9,-9,5,-9,-9,-9,-9,5,-9,-9,-9,-9,5) (equivalent to the default value) -OdParameters.gapPenalty=-12 Penalty for a gap. D aligner parameters can be overridden in the following way: > mixcr align \\ --species hs \\ -OdParameters.scoring.gapExtensionPenalty = -5 \\ input_file1 [ input_file2 ] output_file.vdjca","title":"D aligner parameters"},{"location":"mixcr/reference/mixcr-align/#hardware-recommendations","text":"Alignment step is CPU-consuming. It utilizes all available CPU kernels (unless --threads option is specified) and scales nearly linearly with the increase of CPU count. The only factor limiting linear scaling is I/O speed (disk read) and decompression of gzipped fastq data. It consumes low amount of RAM and 4Gb should be enough for any size of input files.","title":"Hardware recommendations"},{"location":"mixcr/reference/mixcr-analyze/","text":"mixcr analyze Uber command to run complicated analysis pipelines for generic data types in one line. Generic targeted amplicon libraries MiXCR analyze amplicon runs the dedicated pipeline for the analysis of enriched targeted generic TCR/IG libraries (5\u2019RACE, Amplicon, Multiplex, etc) with or without UMIs. The pipeline includes alignment of raw sequencing reads, tag correction in case of UMI-barcoded data, assembly of aligned sequences into clonotypes, optional contig assembly and finally export of the resulting clonotype tables into tab-delimited files. mixcr analyze amplicon [-f] [-t <threads>] \\ --species <species> \\ --starting-material <startingMaterial> \\ --5-end <5End> \\ --3-end <3End> \\ --adapters <adapters> \\ [--umi-pattern <pattern>] \\ [--umi-pattern-name <patternName>] \\ [--region-of-interest <regionOfInterest>] \\ [--receptor-type <receptorType>] \\ [--contig-assembly] \\ [--report <report>] \\ [--json-report <jsonReport>] \\ [--library <library>] \\ [--align <alignParameters>] \\ [--align-preset <alignPreset>] \\ [--assemble <assembleParameters>] \\ [--assembleContigs <assembleContigParameters>] \\ [--export <exportParameters>] \\ [--no-export] \\ [--only-productive] \\ [--impute-germline-on-export] \\ input_file1 [input_file2] \\ output_prefix The command takes raw sequencing data as input and supports the following formats (same as align ): paired-end and single-end .fastq , .fasta , .bam and .sam . Since analyze command produces multiple files as output it requires to specify output file name prefix. -f, --force-overwrite Force overwrite of output file(s). -t, --threads <threads> Specify number of processing threads -s, --species <species> Species (organism). Possible values: hsa (or HomoSapiens), mmu (or MusMusculus), rat , spalax , alpaca , lamaGlama , mulatta ( Macaca Mulatta ), fascicularis ( Macaca Fascicularis ) or any species from IMGT \u00ae library . --starting-material <startingMaterial> Starting material. Possible values: rna , dna --5-end <5End> 5'-end of the library. Possible values: no-v-primers (e.g. 5'RACE with template switch oligo or a like), v-primers (V gene single primer / multiplex) --3-end <3End> 3'-end of the library. Possible values: j-primers (J gene single primer / multiplex), j-c-intron-primers (J-C intron single primer / multiplex), c-primers (C gene single primer / multiplex; e.g. IGHC primers specific to different immunoglobulin isotypes) --adapters <adapters> Presence of PCR primers and/or adapter sequences. If sequences of primers used for PCR or adapters are present in sequencing data, it may influence the accuracy of V, J and C gene segments identification and CDR3 mapping. Possible values: adapters-present , no-adapters --umi-pattern <pattern> Pattern for UMI-barcoded data --umi-pattern-name One of predefined barcode patterns for UMI-barcoded data --region-of-interest <regionOfInterest> MiXCR will use only reads covering the whole target region; reads which partially cover selected region will be dropped during clonotype assembly . All non-CDR3 options require long high-quality paired-end data. Default value CDR3 . --receptor-type <chains> Receptor type. Possible values: tcr , bcr , xcr (default), tra , trb , trd , trg , igh , igk , igl --contig-assembly Assemble longest possible consensus contig sequences from input data. -r, --report <report> Report file path -j, --json-report <jsonReport> JSON report file path. -b, --library <library> V/D/J/C gene library. --align <alignParameters> Additional parameters for align step specified with double quotes (e.g --align \"--limit 1000\" --align \"-OminSumScore=100\" etc. --align-preset <alignPreset> Aligner parameters preset --assemble <assembleParameters> Additional parameters for assemble step specified with double quotes (e. g --assemble \"-OassemblingFeatures=[V5UTR+L1+L2+FR1,FR3+CDR3] --assemble \"-ObadQualityThreshold=0\" etc.) --assembleContigs <assembleContigParameters> Additional parameters for assemble contigs step specified with double quotes --export <exportParameters> Additional parameters for exportClones step specified with double quotes (e.g --export \"-p full\" --export \"-cloneId\" etc). --impute-germline-on-export Impute germline on export --only-productive Filter out-of-frame sequences and clonotypes with stop-codons in clonal sequence export --no-export Do not export clonotypes to tab-delimited file. Example usage for a generic 5'RACE TCR protocol with no UMIs for Mus Musculus alpha chain: > mixcr analyze amplicon \\ --species mmu \\ --starting-material rna \\ --5-primers v-primers \\ --3-primers j-primers \\ --adapters adapters-present \\ --receptor-type TRAD \\ --report sample1.report \\ sample1_R1.fastq.gz \\ sample1_R2.fastq.gz \\ sample1 The output will contain the following files: > ls # human-readable reports sample1.report # raw alignments (highly compressed binary file) sample1.vdjca # TCR\u03b1 CDR3 clonotypes (highly compressed binary file) sample1.clns # TCR\u03b1 clonotypes exported in tab-delimited txt sample1.clonotypes.TRAD.tsv Details Under the hood mixcr analyze amplicon is equivalent to execution of the following MiXCR actions: align Performs : alignment of raw sequencing reads against reference database of V-, D-, J- and C- gene segments pattern matching of tag pattern sequence and extraction of barcodes mixcr align \\ --species <species> \\ --preset <alignerPreset> \\ --tag-pattern <umiPattern> \\ -OvParameters.geneFeatureToAlign=<vFeatureToAlign> \\ -OvParameters.parameters.floatingLeftBound=<vBound> \\ -OvParameters.parameters.floatingRightBound=<jBound> \\ -OvParameters.parameters.floatingRightBound=<cBound> \\ [align options] \\ input_R1.fastq [input_R2.fastq] \\ output_prefix.vdjca Values of parameters are computed from the values of required analyze amplicon options. Option --starting-material affects the choice of V gene region which will be used as a target for Variable segment: rna corresponds to the VTranscriptWithout5UTRWithP and dna to VGeneWithP (see Gene features and anchor points for details). Option --receptor-type affects aligner parameters preset if --align-preset is not specified. For BCR data MiXCR will use kAligner2 , which is better suited for highly mutated data with big indels, while in other case it will use kAligner . The presence or absence of primer and adapter sequences affects behavior of aligners with respect to the alignment boundaries ( floatingLeftBound / floatingRightBound aligner options : if V gene single primer / multiplex is used at 5\u2019-end and adapters-present , the option value for floatingLeftBound will be set to true for V gene aligner parameters; in other cases it will be set to false; if J gene single primer / multiplex is used at 3\u2019-end and adapters-present , the option value floatingRightBound will be set to true for J gene aligner parameters; in other cases it will be set to false ; if J-C intron single primer / multiplex is used at 3\u2019-end and adapters-present , floatingRightBound will be set to true for C gene aligner parameters; in other cases it will be set to false . correctAndSortTags Corrects sequencing and PCR errors inside barcode sequences. > mixcr correctAndSortTags \\ [correct options] \\ output_prefix.vdjca \\ output_prefix.corrected.vdjca assemble Assembles clonotypes and applies several layers of errors correction. > mixcr assemble \\ [--write-alignments] \\ -OassemblingFeatures=<regionOfInterest> \\ -OseparateByV=<separateByV> \\ -OseparateByJ=<separateByJ> \\ -OseparateByC=<separateByC> \\ [assemble options] \\ output_prefix.corrected.vdjca \\ output_prefix.(clns|clna) Option --write-alignments is used if --contig-assembly is specified for analyze amplicon . The presence or absence of primer and adapter sequences also affects behavior of clonotype pre-clusterign : if V gene single primer / multiplex is used at 5\u2019-end and adapters-present , the option value for separateByV will be set to false ; in other cases it will be set to true ; if J gene single primer / multiplex is used at 3\u2019-end and adapters-present , the option value separateByJ will be set to false ; in other cases it will be set to true ; if J-C intron single primer / multiplex is used at 3\u2019-end and adapters-present , separateByC will be set to false for C gene aligner parameters; in other cases it will be set to true . assembleContigs Assembles full-length (as long as present) consensus contig sequences: > mixcr assembleContigs \\ [export options] \\ output_prefix.clna \\ output_prefix.contigs.clns exportClones Exports clonotype tables separately for each immunological chain: > mixcr exportClones --chains TRAD \\ [export options] \\ output_prefix.contigs.clns \\ output_prefix.clonotypes.TRAD.txt > mixcr exportClones --chains TRB \\ [export options] \\ output_prefix.contigs.clns \\ output_prefix.clonotypes.TRB.txt > mixcr exportClones --chains IGH \\ [export options] \\ output_prefix.contigs.clns \\ output_prefix.clonotypes.IGH.txt > mixcr exportClones --chains IGK \\ [export options] \\ output_prefix.contigs.clns \\ output_prefix.clonotypes.IGK.txt > mixcr exportClones --chains IGL \\ [export options] \\ output_prefix.contigs.clns \\ output_prefix.clonotypes.IGL.txt Generic non-targeted shotgun data (RNA-Seq) MiXCR analyze amplicon runs the dedicated pipeline for the analysis of non-enriched RNA-seq and non-targeted genomic data. The pipeline includes alignment of raw sequencing reads, partial assembly of overlapping fragmented reads, imputation of good TCR alignments, assembly of aligned sequences into clonotypes, optional reconstruction of longest possible consensus contigs and exporting the resulting clonotypes into tab-delimited files. mixcr analyze shotgun [ -f ] [ -t <threads> ] \\ --species <species> \\ --starting-material <startingMaterial> \\ [ --contig-assembly ] \\ [ --do-not-extend-alignments ] \\ [ --assemble-partial-rounds <nRounds> ] \\ [ --report <report> ] \\ [ --json-report <jsonReport> ] \\ [ --library <library> ] \\ [ --align <alignParameters> ] \\ [ --assemblePartial <assemblePartialParameters> ] [ --extend <extendParameters> ] \\ [ --assemble <assembleParameters> ] \\ [ --assembleContigs <assembleContigParameters> ] \\ [ --export <exportParameters> ] \\ [ --no-export ] \\ [ --only-productive ] \\ [ --impute-germline-on-export ] \\ input_file1 [ input_file2 ] \\ output_prefix The command takes raw sequencing data as input and supports the following formats (same as align ): paired-end and single-end .fastq , .fasta , .bam and .sam . Since analyze command produces multiple files as output it requires to specify output file name prefix. Note that the pipeline assumes that the data contain no adapter / primer sequences. The pipeline is rigorously optimize to extract all available productive information from the data keeping at the same time zero false-positive rate. -f, --force-overwrite Force overwrite of output file(s). -t, --threads <threads> Specify number of processing threads -s, --species <species> Species (organism). Possible values: hsa (or HomoSapiens), mmu (or MusMusculus), rat , spalax , alpaca , lamaGlama , mulatta ( Macaca Mulatta ), fascicularis ( Macaca Fascicularis ) or any species from IMGT \u00ae library . --starting-material <startingMaterial> Starting material. Possible values: rna , dna --contig-assembly Assemble longest possible consensus contig sequences from input data. --do-not-extend-alignments Skip TCR extension step assemble-partial-rounds <nRounds> Number of times assemblePartial is run -r, --report <report> Report file path -j, --json-report <jsonReport> JSON report file path -b, --library <library> V/D/J/C gene library. --align <alignParameters> Additional parameters for align step specified with double quotes (e.g --align \"--limit 1000\" --align \"-OminSumScore=100\" etc. --assemblePartial <assemblePartialParameters> Additional parameters for partial assemgly step specified with double quotes. --extend <extendParameters> Additional parameters for TCR extension step specified with double quotes. --assemble <assembleParameters> Additional parameters for assemble step specified with double quotes (e. g --assemble \"-OassemblingFeatures=[V5UTR+L1+L2+FR1,FR3+CDR3] --assemble \"-ObadQualityThreshold=0\" etc.) --assembleContigs <assembleContigParameters> Additional parameters for assemble contigs step specified with double quotes --export <exportParameters> Additional parameters for exportClones step specified with double quotes (e.g --export \"-p full\" --export \"-cloneId\" etc). --impute-germline-on-export Impute germline on export --only-productive Filter out-of-frame sequences and clonotypes with stop-codons in clonal sequence export --no-export Do not export clonotypes to tab-delimited file. Example usage: > mixcr analyze shotgun \\ --species hs \\ --starting-material rna \\ --report sample1.report \\ --contig-assembly \\ --impute-germline-on-export \\ sample1_R1.fastq.gz \\ sample1_R2.fastq.gz \\ sample1 The output will contain the following files: > ls # human-readable reports sample1.report # raw alignments (highly compressed binary file) sample1.vdjca # partial assemble round #1 sample1.rescued_1.vdjca # partial assemble round #2 sample1.rescued_2.vdjca # extended alignments (for TCRs) sample1.extended.vdjca # CDR3 clonotypes (highly compressed binary clones & alignments file) sample1.clna # consensus contig sequences sample1.contigs.clns # TCR/BCR Clonotypes exported in tab-delimited txt sample1.clonotypes.TRAD.tsv sample1.clonotypes.TRB.tsv sample1.clonotypes.IGH.tsv sample1.clonotypes.IGK.tsv sample1.clonotypes.IGL.tsv Details Under the hood mixcr analyze amplicon is equivalent to execution of the following MiXCR actions: align Performs alignment of raw sequencing reads against reference database of V-, D-, J- and C- gene segments: mixcr align \\ --species <species> \\ --preset rna-seq \\ -OvParameters.geneFeatureToAlign=<vFeatureToAlign> \\ -OvParameters.parameters.floatingLeftBound=false \\ -OvParameters.parameters.floatingRightBound=false \\ -OvParameters.parameters.floatingRightBound=false \\ [align options] \\ input_R1.fastq [input_R2.fastq] \\ output_prefix.vdjca MiXCR uses rna-seq preset which is specifically optimized for non-targeted fragmented shotgun data. Option --starting-material affects the choice of V gene region which will be used as a target for Variable segment: rna corresponds to the VTranscriptWithout5UTRWithP and dna to VGeneWithP (see Gene features and anchor points for details). assemblePartial Rescues alignments which only partially cover CDR3 region. > mixcr assemblePartial \\ [assemblePartial options] \\ output_prefix.vdjca \\ output_prefix.rescued_1.vdjca > mixcr assemblePartial \\ [assemblePartial options] \\ output_prefix.rescued_1.vdjca \\ output_prefix.rescued_2.vdjca extend Extends edges of TCR alignments which misses only a few letter at the edges to cover full CDR3. > mixcr extend \\ [extend options] \\ output_prefix.rescued_2.vdjca \\ output_prefix.extended.vdjca assemble Assembles CDR3 clonotypes and applies several layers of errors correction. > mixcr assemble \\ [--write-alignments] \\ -OassemblingFeatures=CDR3 \\ -OseparateByV=true \\ -OseparateByJ=true \\ [assemble options] \\ output_prefix.corrected.vdjca \\ output_prefix.(clns|clna) Option --write-alignments is used if --contig-assembly is specified for analyze amplicon . assembleContigs Assembles full-length (as long as present) consensus contig sequences: > mixcr assembleContigs \\ [export options] \\ output_prefix.clna \\ output_prefix.contigs.clns exportClones Exports clonotype tables separately for each immunological chain: > mixcr exportClones --chains TRAD \\ [export options] \\ output_prefix.contigs.clns \\ output_prefix.clonotypes.TRAD.txt > mixcr exportClones --chains TRB \\ [export options] \\ output_prefix.contigs.clns \\ output_prefix.clonotypes.TRB.txt > mixcr exportClones --chains IGH \\ [export options] \\ output_prefix.contigs.clns \\ output_prefix.clonotypes.IGH.txt > mixcr exportClones --chains IGK \\ [export options] \\ output_prefix.contigs.clns \\ output_prefix.clonotypes.IGK.txt > mixcr exportClones --chains IGL \\ [export options] \\ output_prefix.contigs.clns \\ output_prefix.clonotypes.IGL.txt","title":"analyze"},{"location":"mixcr/reference/mixcr-analyze/#mixcr-analyze","text":"Uber command to run complicated analysis pipelines for generic data types in one line.","title":"mixcr analyze"},{"location":"mixcr/reference/mixcr-analyze/#generic-targeted-amplicon-libraries","text":"MiXCR analyze amplicon runs the dedicated pipeline for the analysis of enriched targeted generic TCR/IG libraries (5\u2019RACE, Amplicon, Multiplex, etc) with or without UMIs. The pipeline includes alignment of raw sequencing reads, tag correction in case of UMI-barcoded data, assembly of aligned sequences into clonotypes, optional contig assembly and finally export of the resulting clonotype tables into tab-delimited files. mixcr analyze amplicon [-f] [-t <threads>] \\ --species <species> \\ --starting-material <startingMaterial> \\ --5-end <5End> \\ --3-end <3End> \\ --adapters <adapters> \\ [--umi-pattern <pattern>] \\ [--umi-pattern-name <patternName>] \\ [--region-of-interest <regionOfInterest>] \\ [--receptor-type <receptorType>] \\ [--contig-assembly] \\ [--report <report>] \\ [--json-report <jsonReport>] \\ [--library <library>] \\ [--align <alignParameters>] \\ [--align-preset <alignPreset>] \\ [--assemble <assembleParameters>] \\ [--assembleContigs <assembleContigParameters>] \\ [--export <exportParameters>] \\ [--no-export] \\ [--only-productive] \\ [--impute-germline-on-export] \\ input_file1 [input_file2] \\ output_prefix The command takes raw sequencing data as input and supports the following formats (same as align ): paired-end and single-end .fastq , .fasta , .bam and .sam . Since analyze command produces multiple files as output it requires to specify output file name prefix. -f, --force-overwrite Force overwrite of output file(s). -t, --threads <threads> Specify number of processing threads -s, --species <species> Species (organism). Possible values: hsa (or HomoSapiens), mmu (or MusMusculus), rat , spalax , alpaca , lamaGlama , mulatta ( Macaca Mulatta ), fascicularis ( Macaca Fascicularis ) or any species from IMGT \u00ae library . --starting-material <startingMaterial> Starting material. Possible values: rna , dna --5-end <5End> 5'-end of the library. Possible values: no-v-primers (e.g. 5'RACE with template switch oligo or a like), v-primers (V gene single primer / multiplex) --3-end <3End> 3'-end of the library. Possible values: j-primers (J gene single primer / multiplex), j-c-intron-primers (J-C intron single primer / multiplex), c-primers (C gene single primer / multiplex; e.g. IGHC primers specific to different immunoglobulin isotypes) --adapters <adapters> Presence of PCR primers and/or adapter sequences. If sequences of primers used for PCR or adapters are present in sequencing data, it may influence the accuracy of V, J and C gene segments identification and CDR3 mapping. Possible values: adapters-present , no-adapters --umi-pattern <pattern> Pattern for UMI-barcoded data --umi-pattern-name One of predefined barcode patterns for UMI-barcoded data --region-of-interest <regionOfInterest> MiXCR will use only reads covering the whole target region; reads which partially cover selected region will be dropped during clonotype assembly . All non-CDR3 options require long high-quality paired-end data. Default value CDR3 . --receptor-type <chains> Receptor type. Possible values: tcr , bcr , xcr (default), tra , trb , trd , trg , igh , igk , igl --contig-assembly Assemble longest possible consensus contig sequences from input data. -r, --report <report> Report file path -j, --json-report <jsonReport> JSON report file path. -b, --library <library> V/D/J/C gene library. --align <alignParameters> Additional parameters for align step specified with double quotes (e.g --align \"--limit 1000\" --align \"-OminSumScore=100\" etc. --align-preset <alignPreset> Aligner parameters preset --assemble <assembleParameters> Additional parameters for assemble step specified with double quotes (e. g --assemble \"-OassemblingFeatures=[V5UTR+L1+L2+FR1,FR3+CDR3] --assemble \"-ObadQualityThreshold=0\" etc.) --assembleContigs <assembleContigParameters> Additional parameters for assemble contigs step specified with double quotes --export <exportParameters> Additional parameters for exportClones step specified with double quotes (e.g --export \"-p full\" --export \"-cloneId\" etc). --impute-germline-on-export Impute germline on export --only-productive Filter out-of-frame sequences and clonotypes with stop-codons in clonal sequence export --no-export Do not export clonotypes to tab-delimited file. Example usage for a generic 5'RACE TCR protocol with no UMIs for Mus Musculus alpha chain: > mixcr analyze amplicon \\ --species mmu \\ --starting-material rna \\ --5-primers v-primers \\ --3-primers j-primers \\ --adapters adapters-present \\ --receptor-type TRAD \\ --report sample1.report \\ sample1_R1.fastq.gz \\ sample1_R2.fastq.gz \\ sample1 The output will contain the following files: > ls # human-readable reports sample1.report # raw alignments (highly compressed binary file) sample1.vdjca # TCR\u03b1 CDR3 clonotypes (highly compressed binary file) sample1.clns # TCR\u03b1 clonotypes exported in tab-delimited txt sample1.clonotypes.TRAD.tsv","title":"Generic targeted amplicon libraries"},{"location":"mixcr/reference/mixcr-analyze/#details","text":"Under the hood mixcr analyze amplicon is equivalent to execution of the following MiXCR actions:","title":"Details"},{"location":"mixcr/reference/mixcr-analyze/#align","text":"Performs : alignment of raw sequencing reads against reference database of V-, D-, J- and C- gene segments pattern matching of tag pattern sequence and extraction of barcodes mixcr align \\ --species <species> \\ --preset <alignerPreset> \\ --tag-pattern <umiPattern> \\ -OvParameters.geneFeatureToAlign=<vFeatureToAlign> \\ -OvParameters.parameters.floatingLeftBound=<vBound> \\ -OvParameters.parameters.floatingRightBound=<jBound> \\ -OvParameters.parameters.floatingRightBound=<cBound> \\ [align options] \\ input_R1.fastq [input_R2.fastq] \\ output_prefix.vdjca Values of parameters are computed from the values of required analyze amplicon options. Option --starting-material affects the choice of V gene region which will be used as a target for Variable segment: rna corresponds to the VTranscriptWithout5UTRWithP and dna to VGeneWithP (see Gene features and anchor points for details). Option --receptor-type affects aligner parameters preset if --align-preset is not specified. For BCR data MiXCR will use kAligner2 , which is better suited for highly mutated data with big indels, while in other case it will use kAligner . The presence or absence of primer and adapter sequences affects behavior of aligners with respect to the alignment boundaries ( floatingLeftBound / floatingRightBound aligner options : if V gene single primer / multiplex is used at 5\u2019-end and adapters-present , the option value for floatingLeftBound will be set to true for V gene aligner parameters; in other cases it will be set to false; if J gene single primer / multiplex is used at 3\u2019-end and adapters-present , the option value floatingRightBound will be set to true for J gene aligner parameters; in other cases it will be set to false ; if J-C intron single primer / multiplex is used at 3\u2019-end and adapters-present , floatingRightBound will be set to true for C gene aligner parameters; in other cases it will be set to false .","title":"align"},{"location":"mixcr/reference/mixcr-analyze/#correctandsorttags","text":"Corrects sequencing and PCR errors inside barcode sequences. > mixcr correctAndSortTags \\ [correct options] \\ output_prefix.vdjca \\ output_prefix.corrected.vdjca","title":"correctAndSortTags"},{"location":"mixcr/reference/mixcr-analyze/#assemble","text":"Assembles clonotypes and applies several layers of errors correction. > mixcr assemble \\ [--write-alignments] \\ -OassemblingFeatures=<regionOfInterest> \\ -OseparateByV=<separateByV> \\ -OseparateByJ=<separateByJ> \\ -OseparateByC=<separateByC> \\ [assemble options] \\ output_prefix.corrected.vdjca \\ output_prefix.(clns|clna) Option --write-alignments is used if --contig-assembly is specified for analyze amplicon . The presence or absence of primer and adapter sequences also affects behavior of clonotype pre-clusterign : if V gene single primer / multiplex is used at 5\u2019-end and adapters-present , the option value for separateByV will be set to false ; in other cases it will be set to true ; if J gene single primer / multiplex is used at 3\u2019-end and adapters-present , the option value separateByJ will be set to false ; in other cases it will be set to true ; if J-C intron single primer / multiplex is used at 3\u2019-end and adapters-present , separateByC will be set to false for C gene aligner parameters; in other cases it will be set to true .","title":"assemble"},{"location":"mixcr/reference/mixcr-analyze/#assemblecontigs","text":"Assembles full-length (as long as present) consensus contig sequences: > mixcr assembleContigs \\ [export options] \\ output_prefix.clna \\ output_prefix.contigs.clns","title":"assembleContigs"},{"location":"mixcr/reference/mixcr-analyze/#exportclones","text":"Exports clonotype tables separately for each immunological chain: > mixcr exportClones --chains TRAD \\ [export options] \\ output_prefix.contigs.clns \\ output_prefix.clonotypes.TRAD.txt > mixcr exportClones --chains TRB \\ [export options] \\ output_prefix.contigs.clns \\ output_prefix.clonotypes.TRB.txt > mixcr exportClones --chains IGH \\ [export options] \\ output_prefix.contigs.clns \\ output_prefix.clonotypes.IGH.txt > mixcr exportClones --chains IGK \\ [export options] \\ output_prefix.contigs.clns \\ output_prefix.clonotypes.IGK.txt > mixcr exportClones --chains IGL \\ [export options] \\ output_prefix.contigs.clns \\ output_prefix.clonotypes.IGL.txt","title":"exportClones"},{"location":"mixcr/reference/mixcr-analyze/#generic-non-targeted-shotgun-data-rna-seq","text":"MiXCR analyze amplicon runs the dedicated pipeline for the analysis of non-enriched RNA-seq and non-targeted genomic data. The pipeline includes alignment of raw sequencing reads, partial assembly of overlapping fragmented reads, imputation of good TCR alignments, assembly of aligned sequences into clonotypes, optional reconstruction of longest possible consensus contigs and exporting the resulting clonotypes into tab-delimited files. mixcr analyze shotgun [ -f ] [ -t <threads> ] \\ --species <species> \\ --starting-material <startingMaterial> \\ [ --contig-assembly ] \\ [ --do-not-extend-alignments ] \\ [ --assemble-partial-rounds <nRounds> ] \\ [ --report <report> ] \\ [ --json-report <jsonReport> ] \\ [ --library <library> ] \\ [ --align <alignParameters> ] \\ [ --assemblePartial <assemblePartialParameters> ] [ --extend <extendParameters> ] \\ [ --assemble <assembleParameters> ] \\ [ --assembleContigs <assembleContigParameters> ] \\ [ --export <exportParameters> ] \\ [ --no-export ] \\ [ --only-productive ] \\ [ --impute-germline-on-export ] \\ input_file1 [ input_file2 ] \\ output_prefix The command takes raw sequencing data as input and supports the following formats (same as align ): paired-end and single-end .fastq , .fasta , .bam and .sam . Since analyze command produces multiple files as output it requires to specify output file name prefix. Note that the pipeline assumes that the data contain no adapter / primer sequences. The pipeline is rigorously optimize to extract all available productive information from the data keeping at the same time zero false-positive rate. -f, --force-overwrite Force overwrite of output file(s). -t, --threads <threads> Specify number of processing threads -s, --species <species> Species (organism). Possible values: hsa (or HomoSapiens), mmu (or MusMusculus), rat , spalax , alpaca , lamaGlama , mulatta ( Macaca Mulatta ), fascicularis ( Macaca Fascicularis ) or any species from IMGT \u00ae library . --starting-material <startingMaterial> Starting material. Possible values: rna , dna --contig-assembly Assemble longest possible consensus contig sequences from input data. --do-not-extend-alignments Skip TCR extension step assemble-partial-rounds <nRounds> Number of times assemblePartial is run -r, --report <report> Report file path -j, --json-report <jsonReport> JSON report file path -b, --library <library> V/D/J/C gene library. --align <alignParameters> Additional parameters for align step specified with double quotes (e.g --align \"--limit 1000\" --align \"-OminSumScore=100\" etc. --assemblePartial <assemblePartialParameters> Additional parameters for partial assemgly step specified with double quotes. --extend <extendParameters> Additional parameters for TCR extension step specified with double quotes. --assemble <assembleParameters> Additional parameters for assemble step specified with double quotes (e. g --assemble \"-OassemblingFeatures=[V5UTR+L1+L2+FR1,FR3+CDR3] --assemble \"-ObadQualityThreshold=0\" etc.) --assembleContigs <assembleContigParameters> Additional parameters for assemble contigs step specified with double quotes --export <exportParameters> Additional parameters for exportClones step specified with double quotes (e.g --export \"-p full\" --export \"-cloneId\" etc). --impute-germline-on-export Impute germline on export --only-productive Filter out-of-frame sequences and clonotypes with stop-codons in clonal sequence export --no-export Do not export clonotypes to tab-delimited file. Example usage: > mixcr analyze shotgun \\ --species hs \\ --starting-material rna \\ --report sample1.report \\ --contig-assembly \\ --impute-germline-on-export \\ sample1_R1.fastq.gz \\ sample1_R2.fastq.gz \\ sample1 The output will contain the following files: > ls # human-readable reports sample1.report # raw alignments (highly compressed binary file) sample1.vdjca # partial assemble round #1 sample1.rescued_1.vdjca # partial assemble round #2 sample1.rescued_2.vdjca # extended alignments (for TCRs) sample1.extended.vdjca # CDR3 clonotypes (highly compressed binary clones & alignments file) sample1.clna # consensus contig sequences sample1.contigs.clns # TCR/BCR Clonotypes exported in tab-delimited txt sample1.clonotypes.TRAD.tsv sample1.clonotypes.TRB.tsv sample1.clonotypes.IGH.tsv sample1.clonotypes.IGK.tsv sample1.clonotypes.IGL.tsv","title":"Generic non-targeted shotgun data (RNA-Seq)"},{"location":"mixcr/reference/mixcr-analyze/#details_1","text":"Under the hood mixcr analyze amplicon is equivalent to execution of the following MiXCR actions:","title":"Details"},{"location":"mixcr/reference/mixcr-analyze/#align_1","text":"Performs alignment of raw sequencing reads against reference database of V-, D-, J- and C- gene segments: mixcr align \\ --species <species> \\ --preset rna-seq \\ -OvParameters.geneFeatureToAlign=<vFeatureToAlign> \\ -OvParameters.parameters.floatingLeftBound=false \\ -OvParameters.parameters.floatingRightBound=false \\ -OvParameters.parameters.floatingRightBound=false \\ [align options] \\ input_R1.fastq [input_R2.fastq] \\ output_prefix.vdjca MiXCR uses rna-seq preset which is specifically optimized for non-targeted fragmented shotgun data. Option --starting-material affects the choice of V gene region which will be used as a target for Variable segment: rna corresponds to the VTranscriptWithout5UTRWithP and dna to VGeneWithP (see Gene features and anchor points for details).","title":"align"},{"location":"mixcr/reference/mixcr-analyze/#assemblepartial","text":"Rescues alignments which only partially cover CDR3 region. > mixcr assemblePartial \\ [assemblePartial options] \\ output_prefix.vdjca \\ output_prefix.rescued_1.vdjca > mixcr assemblePartial \\ [assemblePartial options] \\ output_prefix.rescued_1.vdjca \\ output_prefix.rescued_2.vdjca","title":"assemblePartial"},{"location":"mixcr/reference/mixcr-analyze/#extend","text":"Extends edges of TCR alignments which misses only a few letter at the edges to cover full CDR3. > mixcr extend \\ [extend options] \\ output_prefix.rescued_2.vdjca \\ output_prefix.extended.vdjca","title":"extend"},{"location":"mixcr/reference/mixcr-analyze/#assemble_1","text":"Assembles CDR3 clonotypes and applies several layers of errors correction. > mixcr assemble \\ [--write-alignments] \\ -OassemblingFeatures=CDR3 \\ -OseparateByV=true \\ -OseparateByJ=true \\ [assemble options] \\ output_prefix.corrected.vdjca \\ output_prefix.(clns|clna) Option --write-alignments is used if --contig-assembly is specified for analyze amplicon .","title":"assemble"},{"location":"mixcr/reference/mixcr-analyze/#assemblecontigs_1","text":"Assembles full-length (as long as present) consensus contig sequences: > mixcr assembleContigs \\ [export options] \\ output_prefix.clna \\ output_prefix.contigs.clns","title":"assembleContigs"},{"location":"mixcr/reference/mixcr-analyze/#exportclones_1","text":"Exports clonotype tables separately for each immunological chain: > mixcr exportClones --chains TRAD \\ [export options] \\ output_prefix.contigs.clns \\ output_prefix.clonotypes.TRAD.txt > mixcr exportClones --chains TRB \\ [export options] \\ output_prefix.contigs.clns \\ output_prefix.clonotypes.TRB.txt > mixcr exportClones --chains IGH \\ [export options] \\ output_prefix.contigs.clns \\ output_prefix.clonotypes.IGH.txt > mixcr exportClones --chains IGK \\ [export options] \\ output_prefix.contigs.clns \\ output_prefix.clonotypes.IGK.txt > mixcr exportClones --chains IGL \\ [export options] \\ output_prefix.contigs.clns \\ output_prefix.clonotypes.IGL.txt","title":"exportClones"},{"location":"mixcr/reference/mixcr-assemble/","text":"mixcr assemble Assembles clonotypes. MiXCR allows to assemble clonotypes by arbitrary gene features . It also applies several layers of error-correction: quality guided error correction to fix sequencing errors and rescue low-quality reads clustering to correct for PCR errors both in case of non-barcoded and UMI-barcoded data specific barcode-guided correction for UMI and single-cell data Briefly, assemble pipeline consists of the following steps: Input. Assembler sequentially processes records (aligned reads) from input .vdjca file produced by align . Pre-clone assembler. If data have barcodes, MiXCR aggregates alignments with same barcode values in groups and assembly consensus \"pre-clones\" using special consensus algorithms . Note that there may be several consensus pre-clones for a single barcode. Core assembler. Core assembler tries to extract gene feature sequences (clonal sequence) from pre-clones or aligned reads (for non-barcoded data) specified by assemblingFeatures parameter ( CDR3 by default); the clonotypes are assembled with respect to clonal sequence. If aligned read does not contain clonal sequence (e.g. CDR3 region), it will be dropped. If clonal sequence contains at least one nucleotide with low quality (less than badQualityThreshold parameter value), then this record will be deferred for further processing by mapping procedure. If fraction of low quality nucleotides in deferred record is greater than maxBadPointsPercent parameter value, then this record will be finally dropped. Records with clonal sequence containing only good quality nucleotides are used to build core clonotypes by grouping records by equality of clonal sequences (e.g. CDR3). The sequence quality of the resulting core clonotype will be equal to the total of qualities of the assembled reads. Each core clonotype has two main properties: clonal sequence and count \u2014 a number of records aggregated by this clonotype. Sequencing errors correction (mapping). After the core clonotypes are built, MiXCR runs mapping procedure that processes records deferred on the previous step. Mapping is aimed at rescuing of quantitative information from low quality reads. For this, each deferred record is mapped onto already assembled clonotypes: if there is a fuzzy match, then this record will be aggregated by the corresponding clonotype; in case of several matched clonotypes, a single one will be randomly chosen with weights equal to clonotype counts. If no matches found, the record will be finally dropped. Pre-clustering. Pre-clustering is performed if separateByV , separateByJ or separateByC is true. Clones with the same assemblingFeature that were previously split due to the erroneous separateBy segment sequence are aggregated back together. PCR error correction (clustering). After clonotypes are assembled by pre-clone assembler, initial assembler and mapper, MiXCR proceeds to clustering . The clustering algorithm tries to find fuzzy matches between clonotypes and organize matched clonotypes in hierarchical tree ( cluster ), where each child layer is highly similar to its parent but has significantly smaller count . Thus, clonotypes with small counts will be attached to highly similar \"parent\" clonotypes with significantly greater count. After all clusters are built, only their heads are considered as final clones. The maximal depths of cluster, fuzzy matching criteria, relative counts of parent/childs and other parameters can be customized using clusteringStrategy parameters described below. Alignment refining. Finally, MiXCR re-aligns clonal sequences to reference V,D,J and C genes using classical strict alignment algorithms (variants of classical Smith-Waterman and Needleman\u2013Wunsch algorithms). Compared to k-aligners these algorithms does not have source of randomness and guarantee best result. In case of single-cell data MiXCR also assembles paired B-cell heavy/light and T-cell alpha/beta clonotypes. Command line options mixcr assemble [-f] [-nw] [--verbose] [-t <threads>] [--write-alignments] [--cell-level] [--report <reportFile>] [--json-report <jsonReport>] [--sort-by-sequence] [--high-compression] [--use-system-temp] [-O <String=String>]... [-P <String=String>]... input.vdjca output.(clns|clna) The command returns a highly-compressed, memory- and CPU-efficient binary .clns (clones) or .clna (clones & alignments) file that holds exhaustive information about clonotypes. Clonotype tables can be further extracted in tabular form usign exportClones or in human-readable form using exportClonesPretty . Additionally, MiXCR produces a comprehensive report which provides a detailed summary of each stage of assembly pipeline. -f, --force-overwrite Force overwrite of output file(s). -t, --threads <threads> Processing threads -nw, --no-warnings Suppress all warning messages. --write-alignments If this option is specified, output file will be written in \"Clones & Alignments\" .clna format, containing clones and all corresponding alignments. This file then can be used to build wider contigs for clonal sequence and extract original reads for each clone. --cell-level If tags are present, do assemble pre-clones on the cell level rather than on the molecular level. If there are no molecular tags in the data, but cell tags are present, this option will be used by default. This option has no effect on the data without tags. -r, --report <reportFile> Report file (human readable version, see -j / --json-report for machine readable report) -j, --json-report <jsonReport> JSON formatted report file -s, --sort-by-sequence Sort by sequence. Clones in the output file will be sorted by clonal sequence,which allows to build overlaps between clonesets. --high-compression Use higher compression for output file. --use-system-temp Use system temp folder for temporary files, the output folder will be used if this option is omitted. -O <String=String> Overrides default parameter values. -P <String=String> Overrides default pre-clone assembler parameter values. Pre-clone assembler parameters Pre-clone assembler parameters tunes the behavior of consensus algorithms and error correction for UMI-barcoded and single-cell data. There is one global parameter: -PminTagSuffixShare Only pre-clones having at least this share among reads with the same tag suffix will be preserved. This option is useful when assembling consensuses inside cell groups, but still want to decontaminate results using molecular barcodes. A group of -Passembler.* parameters is used for pre-assemble clone assembling feature sequence inside read groups having the same tags: -Passembler.maxIterations Maximal number of iterations for reference refinement. -Passembler.minAltSeedQualityScore Minimal quality score for all positions for the sequence to be used as an alternative seed (main seed sequence may have lower quality score) -Passembler.minAltSeedNormalizedPenalty Minimal normalized penalty (as in distance) that must be reached relative to all current consensuses by the record to form a new seed. -Passembler.altSeedPenaltyTolerance How far in relative terms to step back from the farthest record to search for the best alternative seed. Higher number (1.0 being maximal) widens the set of records among which the search is performed. -Passembler.minRecordSharePerConsensus Minimal share of records (from whole number of records) assembled into a consensus for the consensus to be considered viable -Passembler.minRecordsPerConsensus Minimal number of records for single consensus -Passembler.minRecursiveRecordShare Minimal share of records assembled into a consensus, from records left after removal of all more abundant consensuses for the consensus to be considered viable -Passembler.minQualityScore Final consensuses having positions with lower quality scores will be discarded -Passembler.maxConsensuses Maximum number of consensuses to assemble Group of -Passembler.aAssemblerParameters.* parameters used for consensus assembly: -Passembler.aAssemblerParameters.bandWidth Effective number of indels the procedure can correctly process -Passembler.aAssemblerParameters.scoring.type Alignment scoring type. Possible values: linear , affine -Passembler.aAssemblerParameters.scoring.subsMatrix Substitution matrix. Available types: simple - a matrix with diagonal elements equal to match and other elements equal to mismatch raw - a complete set of 16 matrix elements should be specified; for example: raw(5,-9,-9,-9,-9,5,-9,-9,-9,-9,5,-9,-9,-9,-9,5) ( equivalent to the default value ) -Passembler.aAssemblerParameters.scoring.gapPenalty Penalty for a gap for linear scoring. -Passembler.aAssemblerParameters.scoring.gapOpenPenalty Penalty for a gap open for affine scoring. -Passembler.aAssemblerParameters.scoring.gapExtensionPenalty Penalty for a gap extension for affine scoring. -Passembler.aAssemblerParameters.minAlignmentScore Records aligned with score less than this threshold will not be used for consensus assembly -Passembler.aAssemblerParameters.maxNormalizedAlignmentPenalty Maximal delta from the maximum possible alignment score divided by max score. Records aligned with higher penalty will not be used for consensus assembly. Bigger positive values of this parameter allows worse alignments to be accepted. -Passembler.aAssemblerParameters.trimMinimalSumQuality Minimal sum quality for a particular variant threshold used to trim regions with low coverage from the sides -Passembler.aAssemblerParameters.trimReferenceRegion If true, trimming will also be applied to the reference region -Passembler.aAssemblerParameters.maxQuality Maximal quality score value for the assembled consensus Default values for these parameters are different depending whether --cell-level option is specified or not. Show default values with --cell-level without --cell-level { \"assembler\" : { \"aAssemblerParameters\" : { \"bandWidth\" : 4 , \"scoring\" : { \"type\" : \"linear\" , \"alphabet\" : \"nucleotide\" , \"subsMatrix\" : \"simple(match = 5, mismatch = -4)\" , \"gapPenalty\" : -14 }, \"minAlignmentScore\" : 40 , \"maxNormalizedAlignmentPenalty\" : 0.15 , \"trimMinimalSumQuality\" : 0 , \"trimReferenceRegion\" : false , \"maxQuality\" : 45 }, \"maxIterations\" : 6 , \"minAltSeedQualityScore\" : 11 , \"minAltSeedNormalizedPenalty\" : 0.35 , \"altSeedPenaltyTolerance\" : 0.3 , \"minRecordSharePerConsensus\" : 0.01 , \"minRecordsPerConsensus\" : 1 , \"minRecursiveRecordShare\" : 0.2 , \"minQualityScore\" : 0 , \"maxConsensuses\" : 0 }, \"minTagSuffixShare\" : 0.8 } { \"assembler\" : { \"aAssemblerParameters\" : { \"bandWidth\" : 4 , \"scoring\" : { \"type\" : \"linear\" , \"alphabet\" : \"nucleotide\" , \"subsMatrix\" : \"simple(match = 5, mismatch = -4)\" , \"gapPenalty\" : -14 }, \"minAlignmentScore\" : 40 , \"maxNormalizedAlignmentPenalty\" : 0.15 , \"trimMinimalSumQuality\" : 0 , \"trimReferenceRegion\" : false , \"maxQuality\" : 45 }, \"maxIterations\" : 6 , \"minAltSeedQualityScore\" : 11 , \"minAltSeedNormalizedPenalty\" : 0.35 , \"altSeedPenaltyTolerance\" : 0.3 , \"minRecordSharePerConsensus\" : 0.2 , \"minRecordsPerConsensus\" : 1 , \"minRecursiveRecordShare\" : 0.4 , \"minQualityScore\" : 0 , \"maxConsensuses\" : 3 }, \"minTagSuffixShare\" : 0.0 } Core assembler parameters Basic core assembler parameters are: -OassemblingFeatures=CDR3 Specify gene feature used to assemble clonotypes. One may specify any custom gene region (e.g. FR3+CDR3 ); target clonal sequence can even be disjoint. Note that assemblingFeatures must cover CDR3. Example: > mixcr assemble -OassemblingFeatures = \"[V5UTR+L1+L2+FR1,FR3+CDR3]\" alignments.vdjca output.clns -OminimalClonalSequenceLength=12 Minimal length of clonal sequence -ObadQualityThreshold=20 Minimal value of sequencing quality score: nucleotides with lower quality are considered as \"bad\". If sequencing read contains at least one \"bad\" nucleotide within the target gene region, it will be deferred at initial assembling stage, for further processing by mapper. -OmaxBadPointsPercent=0.7 Maximal allowed fraction of \"bad\" points in sequence: if sequence contains more than maxBadPointsPercent \"bad\" nucleotides, it will be completely dropped and will not be used for further processing by mapper. Sequences with the allowed percent of \u201cbad\u201d points will be mapped to the assembled core clonotypes. Set -OmaxBadPointsPercent=0 in order to completely drop all sequences that contain at least one \"bad\" nucleotide. -OqualityAggregationType=Max Algorithm used for aggregation of total clonal sequence quality during assembling of sequencing reads. Possible values: Max (maximal quality across all reads for each position), Min (minimal quality across all reads for each position), Average (average quality across all reads for each position), MiniMax (all letters has the same quality which is the maximum of minimal quality of clonal sequence in each read). -OminimalQuality=0 Minimal allowed quality of each nucleotide of assembled clone. If at least one nucleotide in the assembled clone has quality lower than minimalQuality , this clone will be dropped (remember that qualities of reads are aggregated according to selected aggregation strategy during core clonotypes assembly; see qualityAggregationType ). -OaddReadsCountOnClustering=false Aggregate cluster counts when assembling final clones: if addReadsCountOnClustering is true , then all children clone counts will be added to the head clone; thus head clone count will be a total of its initial count and counts of all its children. Refers to further clustering strategy (see below). Does not refer to mapping of low quality sequencing reads described above. Usage example: turn-off mapping (consider all alignment as good quality) > mixcr assemble -ObadQualityThreshold = 0 alignments.vdjca output.clns Pre-clustering parameters MiXCR can separate clones with equal clonal sequence and different V, J and C (e.g. do distinguish clones with different IG isotype) genes. Additionally, to make analysis more robust to sequencing errors there is an additional pre-clustering step to shrink artificial diversity generated by this separation mechanism (see maximalPreClusteringRatio option). -OmaximalPreClusteringRatio=1.0 more abundant clone ( clone1 ) absorbs smaller clone ( clone2 ) if clone2.count < clone1.count * maximalPreClusteringRatio ( cloneX.count denotes number of reads in corresponding clone) and clone2 contain top V/J/C gene from clone1 in it\u2019s corresponding gene list. -OseparateByV=false if false clones with equal clonal sequence but different V gene will be merged into single clone. -OseparateByJ=false if false clones with equal clonal sequence but different J gene will be merged into single clone. -OseparateByC=false if false clones with equal clonal sequence but different C gene will be merged into single clone. Usage example: separate IG clones by isotypes: > mixcr assemble -OseparateByC = true alignments.vdjca output.clns Clustering parameters Parameters that control clustering procedure and determines the rules for the frequency-based correction of PCR and sequencing errors: -OcloneClusteringParameters.searchDepth=2 Maximum number of cluster layers (not including head). -OcloneClusteringParameters.allowedMutationsInNRegions=1 Maximum allowed number of mutations in N regions (non-template nucleotides in VD, DJ or VJ junctions): if two fuzzy matched clonal sequences will contain more than allowedMutationsInNRegions mismatches in N-regions, they will not be clustered together (one cannot be a direct child of another). -OcloneClusteringParameters.searchParameters=twoMismatchesOrIndels Parameters that control fuzzy match criteria between clones in adjacent layers. Available predefined values: oneMismatch , oneIndel , oneMismatchOrIndel , twoMismatches , twoIndels , twoMismatchesOrIndels , ..., fourMismatchesOrIndels . By default, twoMismatchesOrIndels allows two mismatches or indels (not more than two errors of both types) between two adjacent clones (parent and direct child). -OcloneClusteringParameters.clusteringFilter.specificMutationProbability=1E-3 Probability of a single nucleotide mutation in clonal sequence which has non-hypermutation origin (i.e. PCR or sequencing error). This parameter controls relative counts between two clones in adjacent layers: a smaller clone can be attached to a larger one if its count smaller than count of parent multiplied by (clonalSequenceLength * specificMutationProbability) ^ numberOfMutations Usage example: change maximum allowed number of mutations: > mixcr assemble -OcloneClusteringParameters.searchParameters = oneMismatchOrIndel alignments.vdjca output.clns Turn clustering off: > mixcr assemble -OcloneClusteringParameters = null alignments.vdjca output.clns Hardware recommendations Assembly step is memory consuming. Reading and decompression of .vdjca file is handled in parallel and highly efficient way. MiXCR needs amount of RAM sufficient to store clonotype table in memory. In an exterme case of one million of full-length UMI-assembled clonotypes, it is recommended to supply at least 32GB of RAM. Speed almost does not scale with the increase of CPU.","title":"assemble"},{"location":"mixcr/reference/mixcr-assemble/#mixcr-assemble","text":"Assembles clonotypes. MiXCR allows to assemble clonotypes by arbitrary gene features . It also applies several layers of error-correction: quality guided error correction to fix sequencing errors and rescue low-quality reads clustering to correct for PCR errors both in case of non-barcoded and UMI-barcoded data specific barcode-guided correction for UMI and single-cell data Briefly, assemble pipeline consists of the following steps: Input. Assembler sequentially processes records (aligned reads) from input .vdjca file produced by align . Pre-clone assembler. If data have barcodes, MiXCR aggregates alignments with same barcode values in groups and assembly consensus \"pre-clones\" using special consensus algorithms . Note that there may be several consensus pre-clones for a single barcode. Core assembler. Core assembler tries to extract gene feature sequences (clonal sequence) from pre-clones or aligned reads (for non-barcoded data) specified by assemblingFeatures parameter ( CDR3 by default); the clonotypes are assembled with respect to clonal sequence. If aligned read does not contain clonal sequence (e.g. CDR3 region), it will be dropped. If clonal sequence contains at least one nucleotide with low quality (less than badQualityThreshold parameter value), then this record will be deferred for further processing by mapping procedure. If fraction of low quality nucleotides in deferred record is greater than maxBadPointsPercent parameter value, then this record will be finally dropped. Records with clonal sequence containing only good quality nucleotides are used to build core clonotypes by grouping records by equality of clonal sequences (e.g. CDR3). The sequence quality of the resulting core clonotype will be equal to the total of qualities of the assembled reads. Each core clonotype has two main properties: clonal sequence and count \u2014 a number of records aggregated by this clonotype. Sequencing errors correction (mapping). After the core clonotypes are built, MiXCR runs mapping procedure that processes records deferred on the previous step. Mapping is aimed at rescuing of quantitative information from low quality reads. For this, each deferred record is mapped onto already assembled clonotypes: if there is a fuzzy match, then this record will be aggregated by the corresponding clonotype; in case of several matched clonotypes, a single one will be randomly chosen with weights equal to clonotype counts. If no matches found, the record will be finally dropped. Pre-clustering. Pre-clustering is performed if separateByV , separateByJ or separateByC is true. Clones with the same assemblingFeature that were previously split due to the erroneous separateBy segment sequence are aggregated back together. PCR error correction (clustering). After clonotypes are assembled by pre-clone assembler, initial assembler and mapper, MiXCR proceeds to clustering . The clustering algorithm tries to find fuzzy matches between clonotypes and organize matched clonotypes in hierarchical tree ( cluster ), where each child layer is highly similar to its parent but has significantly smaller count . Thus, clonotypes with small counts will be attached to highly similar \"parent\" clonotypes with significantly greater count. After all clusters are built, only their heads are considered as final clones. The maximal depths of cluster, fuzzy matching criteria, relative counts of parent/childs and other parameters can be customized using clusteringStrategy parameters described below. Alignment refining. Finally, MiXCR re-aligns clonal sequences to reference V,D,J and C genes using classical strict alignment algorithms (variants of classical Smith-Waterman and Needleman\u2013Wunsch algorithms). Compared to k-aligners these algorithms does not have source of randomness and guarantee best result. In case of single-cell data MiXCR also assembles paired B-cell heavy/light and T-cell alpha/beta clonotypes.","title":"mixcr assemble"},{"location":"mixcr/reference/mixcr-assemble/#command-line-options","text":"mixcr assemble [-f] [-nw] [--verbose] [-t <threads>] [--write-alignments] [--cell-level] [--report <reportFile>] [--json-report <jsonReport>] [--sort-by-sequence] [--high-compression] [--use-system-temp] [-O <String=String>]... [-P <String=String>]... input.vdjca output.(clns|clna) The command returns a highly-compressed, memory- and CPU-efficient binary .clns (clones) or .clna (clones & alignments) file that holds exhaustive information about clonotypes. Clonotype tables can be further extracted in tabular form usign exportClones or in human-readable form using exportClonesPretty . Additionally, MiXCR produces a comprehensive report which provides a detailed summary of each stage of assembly pipeline. -f, --force-overwrite Force overwrite of output file(s). -t, --threads <threads> Processing threads -nw, --no-warnings Suppress all warning messages. --write-alignments If this option is specified, output file will be written in \"Clones & Alignments\" .clna format, containing clones and all corresponding alignments. This file then can be used to build wider contigs for clonal sequence and extract original reads for each clone. --cell-level If tags are present, do assemble pre-clones on the cell level rather than on the molecular level. If there are no molecular tags in the data, but cell tags are present, this option will be used by default. This option has no effect on the data without tags. -r, --report <reportFile> Report file (human readable version, see -j / --json-report for machine readable report) -j, --json-report <jsonReport> JSON formatted report file -s, --sort-by-sequence Sort by sequence. Clones in the output file will be sorted by clonal sequence,which allows to build overlaps between clonesets. --high-compression Use higher compression for output file. --use-system-temp Use system temp folder for temporary files, the output folder will be used if this option is omitted. -O <String=String> Overrides default parameter values. -P <String=String> Overrides default pre-clone assembler parameter values.","title":"Command line options"},{"location":"mixcr/reference/mixcr-assemble/#pre-clone-assembler-parameters","text":"Pre-clone assembler parameters tunes the behavior of consensus algorithms and error correction for UMI-barcoded and single-cell data. There is one global parameter: -PminTagSuffixShare Only pre-clones having at least this share among reads with the same tag suffix will be preserved. This option is useful when assembling consensuses inside cell groups, but still want to decontaminate results using molecular barcodes. A group of -Passembler.* parameters is used for pre-assemble clone assembling feature sequence inside read groups having the same tags: -Passembler.maxIterations Maximal number of iterations for reference refinement. -Passembler.minAltSeedQualityScore Minimal quality score for all positions for the sequence to be used as an alternative seed (main seed sequence may have lower quality score) -Passembler.minAltSeedNormalizedPenalty Minimal normalized penalty (as in distance) that must be reached relative to all current consensuses by the record to form a new seed. -Passembler.altSeedPenaltyTolerance How far in relative terms to step back from the farthest record to search for the best alternative seed. Higher number (1.0 being maximal) widens the set of records among which the search is performed. -Passembler.minRecordSharePerConsensus Minimal share of records (from whole number of records) assembled into a consensus for the consensus to be considered viable -Passembler.minRecordsPerConsensus Minimal number of records for single consensus -Passembler.minRecursiveRecordShare Minimal share of records assembled into a consensus, from records left after removal of all more abundant consensuses for the consensus to be considered viable -Passembler.minQualityScore Final consensuses having positions with lower quality scores will be discarded -Passembler.maxConsensuses Maximum number of consensuses to assemble Group of -Passembler.aAssemblerParameters.* parameters used for consensus assembly: -Passembler.aAssemblerParameters.bandWidth Effective number of indels the procedure can correctly process -Passembler.aAssemblerParameters.scoring.type Alignment scoring type. Possible values: linear , affine -Passembler.aAssemblerParameters.scoring.subsMatrix Substitution matrix. Available types: simple - a matrix with diagonal elements equal to match and other elements equal to mismatch raw - a complete set of 16 matrix elements should be specified; for example: raw(5,-9,-9,-9,-9,5,-9,-9,-9,-9,5,-9,-9,-9,-9,5) ( equivalent to the default value ) -Passembler.aAssemblerParameters.scoring.gapPenalty Penalty for a gap for linear scoring. -Passembler.aAssemblerParameters.scoring.gapOpenPenalty Penalty for a gap open for affine scoring. -Passembler.aAssemblerParameters.scoring.gapExtensionPenalty Penalty for a gap extension for affine scoring. -Passembler.aAssemblerParameters.minAlignmentScore Records aligned with score less than this threshold will not be used for consensus assembly -Passembler.aAssemblerParameters.maxNormalizedAlignmentPenalty Maximal delta from the maximum possible alignment score divided by max score. Records aligned with higher penalty will not be used for consensus assembly. Bigger positive values of this parameter allows worse alignments to be accepted. -Passembler.aAssemblerParameters.trimMinimalSumQuality Minimal sum quality for a particular variant threshold used to trim regions with low coverage from the sides -Passembler.aAssemblerParameters.trimReferenceRegion If true, trimming will also be applied to the reference region -Passembler.aAssemblerParameters.maxQuality Maximal quality score value for the assembled consensus Default values for these parameters are different depending whether --cell-level option is specified or not. Show default values with --cell-level without --cell-level { \"assembler\" : { \"aAssemblerParameters\" : { \"bandWidth\" : 4 , \"scoring\" : { \"type\" : \"linear\" , \"alphabet\" : \"nucleotide\" , \"subsMatrix\" : \"simple(match = 5, mismatch = -4)\" , \"gapPenalty\" : -14 }, \"minAlignmentScore\" : 40 , \"maxNormalizedAlignmentPenalty\" : 0.15 , \"trimMinimalSumQuality\" : 0 , \"trimReferenceRegion\" : false , \"maxQuality\" : 45 }, \"maxIterations\" : 6 , \"minAltSeedQualityScore\" : 11 , \"minAltSeedNormalizedPenalty\" : 0.35 , \"altSeedPenaltyTolerance\" : 0.3 , \"minRecordSharePerConsensus\" : 0.01 , \"minRecordsPerConsensus\" : 1 , \"minRecursiveRecordShare\" : 0.2 , \"minQualityScore\" : 0 , \"maxConsensuses\" : 0 }, \"minTagSuffixShare\" : 0.8 } { \"assembler\" : { \"aAssemblerParameters\" : { \"bandWidth\" : 4 , \"scoring\" : { \"type\" : \"linear\" , \"alphabet\" : \"nucleotide\" , \"subsMatrix\" : \"simple(match = 5, mismatch = -4)\" , \"gapPenalty\" : -14 }, \"minAlignmentScore\" : 40 , \"maxNormalizedAlignmentPenalty\" : 0.15 , \"trimMinimalSumQuality\" : 0 , \"trimReferenceRegion\" : false , \"maxQuality\" : 45 }, \"maxIterations\" : 6 , \"minAltSeedQualityScore\" : 11 , \"minAltSeedNormalizedPenalty\" : 0.35 , \"altSeedPenaltyTolerance\" : 0.3 , \"minRecordSharePerConsensus\" : 0.2 , \"minRecordsPerConsensus\" : 1 , \"minRecursiveRecordShare\" : 0.4 , \"minQualityScore\" : 0 , \"maxConsensuses\" : 3 }, \"minTagSuffixShare\" : 0.0 }","title":"Pre-clone assembler parameters"},{"location":"mixcr/reference/mixcr-assemble/#core-assembler-parameters","text":"Basic core assembler parameters are: -OassemblingFeatures=CDR3 Specify gene feature used to assemble clonotypes. One may specify any custom gene region (e.g. FR3+CDR3 ); target clonal sequence can even be disjoint. Note that assemblingFeatures must cover CDR3. Example: > mixcr assemble -OassemblingFeatures = \"[V5UTR+L1+L2+FR1,FR3+CDR3]\" alignments.vdjca output.clns -OminimalClonalSequenceLength=12 Minimal length of clonal sequence -ObadQualityThreshold=20 Minimal value of sequencing quality score: nucleotides with lower quality are considered as \"bad\". If sequencing read contains at least one \"bad\" nucleotide within the target gene region, it will be deferred at initial assembling stage, for further processing by mapper. -OmaxBadPointsPercent=0.7 Maximal allowed fraction of \"bad\" points in sequence: if sequence contains more than maxBadPointsPercent \"bad\" nucleotides, it will be completely dropped and will not be used for further processing by mapper. Sequences with the allowed percent of \u201cbad\u201d points will be mapped to the assembled core clonotypes. Set -OmaxBadPointsPercent=0 in order to completely drop all sequences that contain at least one \"bad\" nucleotide. -OqualityAggregationType=Max Algorithm used for aggregation of total clonal sequence quality during assembling of sequencing reads. Possible values: Max (maximal quality across all reads for each position), Min (minimal quality across all reads for each position), Average (average quality across all reads for each position), MiniMax (all letters has the same quality which is the maximum of minimal quality of clonal sequence in each read). -OminimalQuality=0 Minimal allowed quality of each nucleotide of assembled clone. If at least one nucleotide in the assembled clone has quality lower than minimalQuality , this clone will be dropped (remember that qualities of reads are aggregated according to selected aggregation strategy during core clonotypes assembly; see qualityAggregationType ). -OaddReadsCountOnClustering=false Aggregate cluster counts when assembling final clones: if addReadsCountOnClustering is true , then all children clone counts will be added to the head clone; thus head clone count will be a total of its initial count and counts of all its children. Refers to further clustering strategy (see below). Does not refer to mapping of low quality sequencing reads described above. Usage example: turn-off mapping (consider all alignment as good quality) > mixcr assemble -ObadQualityThreshold = 0 alignments.vdjca output.clns","title":"Core assembler parameters"},{"location":"mixcr/reference/mixcr-assemble/#pre-clustering-parameters","text":"MiXCR can separate clones with equal clonal sequence and different V, J and C (e.g. do distinguish clones with different IG isotype) genes. Additionally, to make analysis more robust to sequencing errors there is an additional pre-clustering step to shrink artificial diversity generated by this separation mechanism (see maximalPreClusteringRatio option). -OmaximalPreClusteringRatio=1.0 more abundant clone ( clone1 ) absorbs smaller clone ( clone2 ) if clone2.count < clone1.count * maximalPreClusteringRatio ( cloneX.count denotes number of reads in corresponding clone) and clone2 contain top V/J/C gene from clone1 in it\u2019s corresponding gene list. -OseparateByV=false if false clones with equal clonal sequence but different V gene will be merged into single clone. -OseparateByJ=false if false clones with equal clonal sequence but different J gene will be merged into single clone. -OseparateByC=false if false clones with equal clonal sequence but different C gene will be merged into single clone. Usage example: separate IG clones by isotypes: > mixcr assemble -OseparateByC = true alignments.vdjca output.clns","title":"Pre-clustering parameters"},{"location":"mixcr/reference/mixcr-assemble/#clustering-parameters","text":"Parameters that control clustering procedure and determines the rules for the frequency-based correction of PCR and sequencing errors: -OcloneClusteringParameters.searchDepth=2 Maximum number of cluster layers (not including head). -OcloneClusteringParameters.allowedMutationsInNRegions=1 Maximum allowed number of mutations in N regions (non-template nucleotides in VD, DJ or VJ junctions): if two fuzzy matched clonal sequences will contain more than allowedMutationsInNRegions mismatches in N-regions, they will not be clustered together (one cannot be a direct child of another). -OcloneClusteringParameters.searchParameters=twoMismatchesOrIndels Parameters that control fuzzy match criteria between clones in adjacent layers. Available predefined values: oneMismatch , oneIndel , oneMismatchOrIndel , twoMismatches , twoIndels , twoMismatchesOrIndels , ..., fourMismatchesOrIndels . By default, twoMismatchesOrIndels allows two mismatches or indels (not more than two errors of both types) between two adjacent clones (parent and direct child). -OcloneClusteringParameters.clusteringFilter.specificMutationProbability=1E-3 Probability of a single nucleotide mutation in clonal sequence which has non-hypermutation origin (i.e. PCR or sequencing error). This parameter controls relative counts between two clones in adjacent layers: a smaller clone can be attached to a larger one if its count smaller than count of parent multiplied by (clonalSequenceLength * specificMutationProbability) ^ numberOfMutations Usage example: change maximum allowed number of mutations: > mixcr assemble -OcloneClusteringParameters.searchParameters = oneMismatchOrIndel alignments.vdjca output.clns Turn clustering off: > mixcr assemble -OcloneClusteringParameters = null alignments.vdjca output.clns","title":"Clustering parameters"},{"location":"mixcr/reference/mixcr-assemble/#hardware-recommendations","text":"Assembly step is memory consuming. Reading and decompression of .vdjca file is handled in parallel and highly efficient way. MiXCR needs amount of RAM sufficient to store clonotype table in memory. In an exterme case of one million of full-length UMI-assembled clonotypes, it is recommended to supply at least 32GB of RAM. Speed almost does not scale with the increase of CPU.","title":"Hardware recommendations"},{"location":"mixcr/reference/mixcr-assembleContigs/","text":"mixcr assembleContigs Assembles longest possible TCR/Ig receptor contig sequences. This step may be used in the following cases: for non-enriched RNA-Seq (shotgun) data in order to reconstruct the longest possible VDJ contigs for single-cell fragmented libraries (like 10x Genomics) to assemble full V-D-J consensus sequences in each cell for poor quality targeted amplicon data with no UMI barcodes and with a high rates of sequencing and PCR errors in order to build full-length (or as long as possible) V-D-J contigs using consensus algorithms In the first two cases when the data is fragmented, reads do not have fixed position on the reference, so it's not possible to specify a fixed assemblingFeature . MiXCR uses alignment-guided assembly algorithms to build the full-length consensus V-D-J sequence. In the last case of poor quality targeted libraries, though the exact assembling feature may be known in advance, high mutation rate may lead to the situation when there are no any true (error-free) full-length V-D-J sequences in the data. Error correction algorithms used in clonotype assembly will not have any \"anchor\" sequence to determine true clone. In such case it might be beneficial to assemble clonotypes by CDR3 region and uses consenus algorithm to determine true clones and distinguish errors from hypermutations. The algorithm iterates through alignments that were used to build particular clonotype and aggregates information per each position in V-D-J reference. It takes into account cell barcodes (if present) to assembly full-length contigs inside cells. It also takes care about hypermutations and splits clonotypes into hypermutated variants (see -OsubCloningRegion option ). Note that since assembleContigs uses alignments constituting clonotypes, it takes .clna (clones & alignments) file as input, produced by assemble command with option --write-alignments . Command line options mixcr assembleContigs [-f] [-t <threads>] [--ignore-tags] [--report <reportFile>] [--json-report <jsonReport>] [-O <String=String>]... clonotypes.clna clonotypes.clns The command returns a highly-compressed, memory- and CPU-efficient binary .clns file that holds exhaustive information about consensus clonotype contigs. Clonotype table may be further extracted in human-readable form using exportClonesPretty or in tabular form usign exportClones or with the possibility to impute uncovered V-D-J contig parts from germline (marking such nucleotides lowercase). Additionally, MiXCR produces a comprehensive report . -f, --force-overwrite Force overwrite of output file(s). -t, --threads <threads> Processing threads --ignore-tags Ignore tags (UMIs, cell-barcodes) -r, --report <reportFile> Report file (human-readable version, see -j / --json-report for machine readable report) -j, --json-report <jsonReport> JSON formatted report file -O<String=String> Overrides default parameter values. Example Here is the typical workflow for full receptor assembly of e.g. mouse B-cells. Align raw sequences using kAligner2 specifically designed to work with highly mutated data: > mixcr align \\ --species mmu \\ -p kAligner2 \\ --report report.txt \\ input_R1.fq \\ input_R2.fq \\ alignments.vdjca Assemble default CDR3 clonotypes (note: --write-alignments is required for further contig assembly): > mixcr assemble \\ -OassemblingFeatures = CDR3 \\ --write-alignments \\ --report report.txt \\ alignments.vdjca \\ clones.clna Assembly full BCR receptor consensus sequences and clonotype into hypermutated variants: > mixcr assembleContigs \\ --report report.txt \\ -OsubCloningRegion = VDJRegion \\ clones.clna \\ contigs.clns Export full BCR receptors sequences and impute uncovered regions from germline (marked lowercase): mixcr exportClones \\ --chains IG \\ --preset fullImputed \\ contigs.clns \\ contigs.tsv Full sequence assembler parameters Full sequence assembler parameters that may be tuned: -OsubCloningRegion=null Region where clonotype variants are allowed (typically that are hypermutated variants); null stands for no variants allowed (one consensus per one clone) -(minimalContigLength=20 Minimal contiguous sequence length -OalignedRegionsOnly=false Assemble only parts of sequences covered by alignments -ObranchingMinimalQualityShare=0.1 Minimal quality fraction (variant may be marked significant if variantQuality > totalSumQuality * branchingMinimalQualityShare -ObranchingMinimalSumQuality=80 Minimal variant quality threshold (variant may be marked significant if variantQuality > branchingMinimalSumQuality -OdecisiveBranchingSumQualityThreshold=120 Variant quality that guaranties that variant will be marked significant (even if other criteria are not satisfied) -OoutputMinimalQualityShare=0.5 Positions having quality share less then this value, will not be represented in the output -OoutputMinimalSumQuality=50 Positions having sum quality less then this value, will not be represented in the output -OalignedSequenceEdgeDelta=3 Maximal number of not aligned nucleotides at the edge of sequence so that sequence is still considered aligned \u201cto the end\u201d -OalignmentEdgeRegionSize=7 Number of nucleotides at the edges of alignments (with almost fully aligned seq2) that are \u201cnot trusted\u201d -OminimalNonEdgePointsFraction=0.25 Minimal fraction of non-edge points in variant that must be reached to consider the variant significant","title":"assembleContigs"},{"location":"mixcr/reference/mixcr-assembleContigs/#mixcr-assemblecontigs","text":"Assembles longest possible TCR/Ig receptor contig sequences. This step may be used in the following cases: for non-enriched RNA-Seq (shotgun) data in order to reconstruct the longest possible VDJ contigs for single-cell fragmented libraries (like 10x Genomics) to assemble full V-D-J consensus sequences in each cell for poor quality targeted amplicon data with no UMI barcodes and with a high rates of sequencing and PCR errors in order to build full-length (or as long as possible) V-D-J contigs using consensus algorithms In the first two cases when the data is fragmented, reads do not have fixed position on the reference, so it's not possible to specify a fixed assemblingFeature . MiXCR uses alignment-guided assembly algorithms to build the full-length consensus V-D-J sequence. In the last case of poor quality targeted libraries, though the exact assembling feature may be known in advance, high mutation rate may lead to the situation when there are no any true (error-free) full-length V-D-J sequences in the data. Error correction algorithms used in clonotype assembly will not have any \"anchor\" sequence to determine true clone. In such case it might be beneficial to assemble clonotypes by CDR3 region and uses consenus algorithm to determine true clones and distinguish errors from hypermutations. The algorithm iterates through alignments that were used to build particular clonotype and aggregates information per each position in V-D-J reference. It takes into account cell barcodes (if present) to assembly full-length contigs inside cells. It also takes care about hypermutations and splits clonotypes into hypermutated variants (see -OsubCloningRegion option ). Note that since assembleContigs uses alignments constituting clonotypes, it takes .clna (clones & alignments) file as input, produced by assemble command with option --write-alignments .","title":"mixcr assembleContigs"},{"location":"mixcr/reference/mixcr-assembleContigs/#command-line-options","text":"mixcr assembleContigs [-f] [-t <threads>] [--ignore-tags] [--report <reportFile>] [--json-report <jsonReport>] [-O <String=String>]... clonotypes.clna clonotypes.clns The command returns a highly-compressed, memory- and CPU-efficient binary .clns file that holds exhaustive information about consensus clonotype contigs. Clonotype table may be further extracted in human-readable form using exportClonesPretty or in tabular form usign exportClones or with the possibility to impute uncovered V-D-J contig parts from germline (marking such nucleotides lowercase). Additionally, MiXCR produces a comprehensive report . -f, --force-overwrite Force overwrite of output file(s). -t, --threads <threads> Processing threads --ignore-tags Ignore tags (UMIs, cell-barcodes) -r, --report <reportFile> Report file (human-readable version, see -j / --json-report for machine readable report) -j, --json-report <jsonReport> JSON formatted report file -O<String=String> Overrides default parameter values.","title":"Command line options"},{"location":"mixcr/reference/mixcr-assembleContigs/#example","text":"Here is the typical workflow for full receptor assembly of e.g. mouse B-cells. Align raw sequences using kAligner2 specifically designed to work with highly mutated data: > mixcr align \\ --species mmu \\ -p kAligner2 \\ --report report.txt \\ input_R1.fq \\ input_R2.fq \\ alignments.vdjca Assemble default CDR3 clonotypes (note: --write-alignments is required for further contig assembly): > mixcr assemble \\ -OassemblingFeatures = CDR3 \\ --write-alignments \\ --report report.txt \\ alignments.vdjca \\ clones.clna Assembly full BCR receptor consensus sequences and clonotype into hypermutated variants: > mixcr assembleContigs \\ --report report.txt \\ -OsubCloningRegion = VDJRegion \\ clones.clna \\ contigs.clns Export full BCR receptors sequences and impute uncovered regions from germline (marked lowercase): mixcr exportClones \\ --chains IG \\ --preset fullImputed \\ contigs.clns \\ contigs.tsv","title":"Example"},{"location":"mixcr/reference/mixcr-assembleContigs/#full-sequence-assembler-parameters","text":"Full sequence assembler parameters that may be tuned: -OsubCloningRegion=null Region where clonotype variants are allowed (typically that are hypermutated variants); null stands for no variants allowed (one consensus per one clone) -(minimalContigLength=20 Minimal contiguous sequence length -OalignedRegionsOnly=false Assemble only parts of sequences covered by alignments -ObranchingMinimalQualityShare=0.1 Minimal quality fraction (variant may be marked significant if variantQuality > totalSumQuality * branchingMinimalQualityShare -ObranchingMinimalSumQuality=80 Minimal variant quality threshold (variant may be marked significant if variantQuality > branchingMinimalSumQuality -OdecisiveBranchingSumQualityThreshold=120 Variant quality that guaranties that variant will be marked significant (even if other criteria are not satisfied) -OoutputMinimalQualityShare=0.5 Positions having quality share less then this value, will not be represented in the output -OoutputMinimalSumQuality=50 Positions having sum quality less then this value, will not be represented in the output -OalignedSequenceEdgeDelta=3 Maximal number of not aligned nucleotides at the edge of sequence so that sequence is still considered aligned \u201cto the end\u201d -OalignmentEdgeRegionSize=7 Number of nucleotides at the edges of alignments (with almost fully aligned seq2) that are \u201cnot trusted\u201d -OminimalNonEdgePointsFraction=0.25 Minimal fraction of non-edge points in variant that must be reached to consider the variant significant","title":"Full sequence assembler parameters"},{"location":"mixcr/reference/mixcr-assemblePartial/","text":"mixcr assemblePartial Overlaps alignments coming from the same molecule which partially cover CDR3 regions: This step is used in two cases: non targeted RNA-Seq data where there is only a tiny fraction of TCR/BCR reads and this step allows to resque more informative data from the input fragmented TCR/BCR data from e.g. 10x VDJ protocols, where each read covers random part of VDJ region In order to efficiently extract repertoire from such data one have to reconstruct initial CDR3s from fragments scattered all over the initial sequencing dataset. Depending on whether the initial data have or not have UMI and cell-barcodes MiXCR uses either sufficient part of NDN region (which gives high enough entropy) or, in addition to NDN, UMI and cell barcodes to find pairs of alignments derived from the same molecule. Once determined such pairs MiXCR aggregates them in a single alignment fully covering CDR3 region. Default thresholds in this procedure were optimized to assemble as many contigs as possible while producing zero false overlaps. To use assemblePartial step one has to specify the following parameters for align : mixcr align \\ -OallowPartialAlignments=true \\ -OallowNoCDR3PartAlignments=true \\ [-p rna-seq] [-OvParameters.geneFeatureToAlign=VGeneWithP] \\ input_R1.fastq[.gz] [input_R2.fastq[.gz]] alignments.vdjca where -OallowPartialAlignments=true and -OallowNoCDR3PartAlignments=true required to prevent MiXCR from filtering out partial alignments, that don\u2019t fully cover CDR3 (the default behaviour) -p rna-seq must be used required if the data has non-enriched RNA-Seq origin -OvParameters.geneFeatureToAlign=VGeneWithP is required if data has a genomic origin Command line options mixcr assemblePartial [-f] [--cell-level] [--drop-partial] [--overlapped-only] [--report <reportFile>] [--json-report <jsonReport>] [-O <String=String>]... alignments.vdjca alignments_corrected.vdjca It takes a single .vdjca file containing initial alignments as input and writes new .vdjca file with corrected alignments. Sometimes it may be useful to inspect resulting alignments with exportAlignmentsPretty . Additionally, MiXCR produces a comprehensive report which provides a detailed summary of each stage of this partial assembly pipeline. -f, --force-overwrite Force overwrite of output file(s). --cell-level Overlap sequences on the cell level instead of UMIs for tagged data with molecular and cell barcodes -d, --drop-partial Drop partial sequences which were not assembled. Can be used to reduce output file size if no additional rounds of assemblePartial are required. -o, --overlapped-only Write only overlapped sequences (needed for testing). -r, --report <reportFile> Report file (human readable version, see -j / --json-report for machine readable report) -j, --json-report <jsonReport> JSON formatted report file -O <String=String> Overrides default partial assembler parameter values. Partial assembler parameters The following options are available for assemblePartial : -OkValue=12 Length of k-mer taken from VJ junction region and used for searching potentially overlapping sequences. -OkOffset=-7 Offset taken from VEndTrimmed / JBeginTrimmed -OminimalAssembleOverlap=12 Minimal length of the overlapped VJ region: two sequences can be potentially merged only if they have at least minimalAssembleOverlap -wide overlap in the VJJunction region. No mismatches are allowed in the overlapped region. -OminimalNOverlap=5 Minimal number of non-template nucleotides (N region) that overlap region must cover to accept the overlap. Example usage: > mixcr assemblePartial -OminimalAssembleOverlap = 10 alignments.vdjca alignmentsRescued.vdjca Multiple runs Partial assembly algorithm works in a pairwise manner, aggregating a pair of alignments at a time. Sometimes the efficiency is increased if you perform two consecutive rounds of assembplePartial . > mixcr assemblePartial alignments.vdjca alignments_rescued_1.vdjca > mixcr assemblePartial alignments_rescued_1.vdjca alignments_rescued_2.vdjca Very short reads In case of short reads input, even after assemblePartial some contigs/reads still only partially cover CDR3 . A substantial fraction of such contigs needs only several nucleotides on the 5\u2019 or the 3\u2019 end to fill up the sequence up to a complete CDR3 . These sequence parts can be taken from the germline, if corresponding V or J gene for the contig is uniquely determined (e.g. from second mate of a read pair). Such procedure is not safe for IGs, because of hypermutations, but for TCRs which have relatively conservative sequence near conserved Cys and Phe/Trp, it can reconstruct additional clonotypes with relatively small chance to introduce false ones. Described procedure is implemented in the mixcr extend action, by default it acts only on TCR sequences.","title":"assemblePartial"},{"location":"mixcr/reference/mixcr-assemblePartial/#mixcr-assemblepartial","text":"Overlaps alignments coming from the same molecule which partially cover CDR3 regions: This step is used in two cases: non targeted RNA-Seq data where there is only a tiny fraction of TCR/BCR reads and this step allows to resque more informative data from the input fragmented TCR/BCR data from e.g. 10x VDJ protocols, where each read covers random part of VDJ region In order to efficiently extract repertoire from such data one have to reconstruct initial CDR3s from fragments scattered all over the initial sequencing dataset. Depending on whether the initial data have or not have UMI and cell-barcodes MiXCR uses either sufficient part of NDN region (which gives high enough entropy) or, in addition to NDN, UMI and cell barcodes to find pairs of alignments derived from the same molecule. Once determined such pairs MiXCR aggregates them in a single alignment fully covering CDR3 region. Default thresholds in this procedure were optimized to assemble as many contigs as possible while producing zero false overlaps. To use assemblePartial step one has to specify the following parameters for align : mixcr align \\ -OallowPartialAlignments=true \\ -OallowNoCDR3PartAlignments=true \\ [-p rna-seq] [-OvParameters.geneFeatureToAlign=VGeneWithP] \\ input_R1.fastq[.gz] [input_R2.fastq[.gz]] alignments.vdjca where -OallowPartialAlignments=true and -OallowNoCDR3PartAlignments=true required to prevent MiXCR from filtering out partial alignments, that don\u2019t fully cover CDR3 (the default behaviour) -p rna-seq must be used required if the data has non-enriched RNA-Seq origin -OvParameters.geneFeatureToAlign=VGeneWithP is required if data has a genomic origin","title":"mixcr assemblePartial"},{"location":"mixcr/reference/mixcr-assemblePartial/#command-line-options","text":"mixcr assemblePartial [-f] [--cell-level] [--drop-partial] [--overlapped-only] [--report <reportFile>] [--json-report <jsonReport>] [-O <String=String>]... alignments.vdjca alignments_corrected.vdjca It takes a single .vdjca file containing initial alignments as input and writes new .vdjca file with corrected alignments. Sometimes it may be useful to inspect resulting alignments with exportAlignmentsPretty . Additionally, MiXCR produces a comprehensive report which provides a detailed summary of each stage of this partial assembly pipeline. -f, --force-overwrite Force overwrite of output file(s). --cell-level Overlap sequences on the cell level instead of UMIs for tagged data with molecular and cell barcodes -d, --drop-partial Drop partial sequences which were not assembled. Can be used to reduce output file size if no additional rounds of assemblePartial are required. -o, --overlapped-only Write only overlapped sequences (needed for testing). -r, --report <reportFile> Report file (human readable version, see -j / --json-report for machine readable report) -j, --json-report <jsonReport> JSON formatted report file -O <String=String> Overrides default partial assembler parameter values.","title":"Command line options"},{"location":"mixcr/reference/mixcr-assemblePartial/#partial-assembler-parameters","text":"The following options are available for assemblePartial : -OkValue=12 Length of k-mer taken from VJ junction region and used for searching potentially overlapping sequences. -OkOffset=-7 Offset taken from VEndTrimmed / JBeginTrimmed -OminimalAssembleOverlap=12 Minimal length of the overlapped VJ region: two sequences can be potentially merged only if they have at least minimalAssembleOverlap -wide overlap in the VJJunction region. No mismatches are allowed in the overlapped region. -OminimalNOverlap=5 Minimal number of non-template nucleotides (N region) that overlap region must cover to accept the overlap. Example usage: > mixcr assemblePartial -OminimalAssembleOverlap = 10 alignments.vdjca alignmentsRescued.vdjca","title":"Partial assembler parameters"},{"location":"mixcr/reference/mixcr-assemblePartial/#multiple-runs","text":"Partial assembly algorithm works in a pairwise manner, aggregating a pair of alignments at a time. Sometimes the efficiency is increased if you perform two consecutive rounds of assembplePartial . > mixcr assemblePartial alignments.vdjca alignments_rescued_1.vdjca > mixcr assemblePartial alignments_rescued_1.vdjca alignments_rescued_2.vdjca","title":"Multiple runs"},{"location":"mixcr/reference/mixcr-assemblePartial/#very-short-reads","text":"In case of short reads input, even after assemblePartial some contigs/reads still only partially cover CDR3 . A substantial fraction of such contigs needs only several nucleotides on the 5\u2019 or the 3\u2019 end to fill up the sequence up to a complete CDR3 . These sequence parts can be taken from the germline, if corresponding V or J gene for the contig is uniquely determined (e.g. from second mate of a read pair). Such procedure is not safe for IGs, because of hypermutations, but for TCRs which have relatively conservative sequence near conserved Cys and Phe/Trp, it can reconstruct additional clonotypes with relatively small chance to introduce false ones. Described procedure is implemented in the mixcr extend action, by default it acts only on TCR sequences.","title":"Very short reads"},{"location":"mixcr/reference/mixcr-correctAndSortTags/","text":"mixcr correctAndSortTags Corrects sequencing and PCR errors inside barcode sequences and sorts resulting file by tags. This step does extremely important job by correcting artificial diversity caused by errors in barcodes. Command line options > mixcr correctAndSortTags [-f] \\ [--dont-correct] \\ [--report <report>] \\ [--json-report <jsonReport>] \\ [--power <power>] \\ [--substitution-rate <backgroundSubstitutionRate>] \\ [--indel-rate <backgroundIndelRate>] \\ [--min-quality <minQuality>] \\ [--max-substitutions <maxSubstitutions>] \\ [--max-indels <maxIndels>] \\ [--use-system-temp] \\ [--memory-budget <memoryBudget>] \\ alignments.vdjca \\ alignments.corrected.vdjca Command takes input .vdjca file produced at align step and writes the resulting .vdjca file with corrected barcode sequences. Additionally, it provides a comprehensive report with the correction performance. -f, --force-overwrite Force overwrite of output file(s). --dont-correct Don't correct barcodes, only sort alignments by tags. -r, --report <reportFile> Report file (human readable version, see -j / --json-report for machine readable report) -j, --json-report <reportFile> JSON report. -p, --power <power> This parameter determines how thorough the procedure should eliminate variants looking like errors. Smaller value leave less erroneous variants at the cost of accidentally correcting true variants. This value approximates the fraction of erroneous variants the algorithm will miss (type II errors). Default is 1E-3 . -s, --substitution-rate <backgroundSubstitutionRate> Expected background non-sequencing-related substitution rate. Default is 1E-3 . -i, --indel-rate <backgroundIndelRate> Expected background non-sequencing-related indel rate. Default is 1E-5 . -q, --min-quality <minQuality> Minimal Phred33 quality score for the tag. Tags having positions with lower quality score will be discarded, if not corrected. Default is 12 . --max-substitutions <maxSubstitutions> Maximal number of substitutions to search for. Default is 2 . --max-indels <maxIndels> Maximal number of indels to search for. Default is 1 . --use-system-temp Use system temp folder for temporary files. --memory-budget <memoryBudget> Memory budget. Default is 4294967296 (4Gb). Hardware recommendations Barcode correction step is memory consuming. If barcode correction is enabled the amount of memory required for processing is proportional to the number of unique barcodes. In the extreme case of millions of unique barcodes MiXCR may require up to 32Gb of RAM. If the barcode correction is switched off (with --dont-correct option), there are no such memory requirements, since MiXCR offloads sorting to the disk if there is not enough RAM.","title":"correctAndSortTags"},{"location":"mixcr/reference/mixcr-correctAndSortTags/#mixcr-correctandsorttags","text":"Corrects sequencing and PCR errors inside barcode sequences and sorts resulting file by tags. This step does extremely important job by correcting artificial diversity caused by errors in barcodes.","title":"mixcr correctAndSortTags"},{"location":"mixcr/reference/mixcr-correctAndSortTags/#command-line-options","text":"> mixcr correctAndSortTags [-f] \\ [--dont-correct] \\ [--report <report>] \\ [--json-report <jsonReport>] \\ [--power <power>] \\ [--substitution-rate <backgroundSubstitutionRate>] \\ [--indel-rate <backgroundIndelRate>] \\ [--min-quality <minQuality>] \\ [--max-substitutions <maxSubstitutions>] \\ [--max-indels <maxIndels>] \\ [--use-system-temp] \\ [--memory-budget <memoryBudget>] \\ alignments.vdjca \\ alignments.corrected.vdjca Command takes input .vdjca file produced at align step and writes the resulting .vdjca file with corrected barcode sequences. Additionally, it provides a comprehensive report with the correction performance. -f, --force-overwrite Force overwrite of output file(s). --dont-correct Don't correct barcodes, only sort alignments by tags. -r, --report <reportFile> Report file (human readable version, see -j / --json-report for machine readable report) -j, --json-report <reportFile> JSON report. -p, --power <power> This parameter determines how thorough the procedure should eliminate variants looking like errors. Smaller value leave less erroneous variants at the cost of accidentally correcting true variants. This value approximates the fraction of erroneous variants the algorithm will miss (type II errors). Default is 1E-3 . -s, --substitution-rate <backgroundSubstitutionRate> Expected background non-sequencing-related substitution rate. Default is 1E-3 . -i, --indel-rate <backgroundIndelRate> Expected background non-sequencing-related indel rate. Default is 1E-5 . -q, --min-quality <minQuality> Minimal Phred33 quality score for the tag. Tags having positions with lower quality score will be discarded, if not corrected. Default is 12 . --max-substitutions <maxSubstitutions> Maximal number of substitutions to search for. Default is 2 . --max-indels <maxIndels> Maximal number of indels to search for. Default is 1 . --use-system-temp Use system temp folder for temporary files. --memory-budget <memoryBudget> Memory budget. Default is 4294967296 (4Gb).","title":"Command line options"},{"location":"mixcr/reference/mixcr-correctAndSortTags/#hardware-recommendations","text":"Barcode correction step is memory consuming. If barcode correction is enabled the amount of memory required for processing is proportional to the number of unique barcodes. In the extreme case of millions of unique barcodes MiXCR may require up to 32Gb of RAM. If the barcode correction is switched off (with --dont-correct option), there are no such memory requirements, since MiXCR offloads sorting to the disk if there is not enough RAM.","title":"Hardware recommendations"},{"location":"mixcr/reference/mixcr-export/","text":"Export MiXCR uses three highly efficient binary formats that hold exhaustive information on the clonotypes, alignments, barcodes and original sequencing reads: .vdjca produced by align and holds alignments .clns produced by assemble and assembleContigs holds clonotypes .clna produced by assemble and holds both clonotypes and alignments MiXCR provides functions for export alignments and clonotype tables in a tab-delimited way. For human-readable formatted output see pretty export . Clonotype tables mixcr exportClones [-fn] [--split-by-tag <tag>] [--chains <chains>] [--minimal-clone-count <count>] [--minimal-clone-fraction <fraction>] [--filter-out-of-frames] [--filter-stops] [--preset <preset>] [--preset-file <file>] [<exportField>]... input.(vdjca|clna) [output.tsv] Exports tab-delimited table of alignments from .vdjca and .clna files. Command line options: -n, --limit <limit> output first n clones --chains, -c <chains> filter only specified chains --split-by-tag <tag> split clonotype containing multiple values for specified tag into multiple rows (one row for one tag value). Typically, used for single cell analysis with --split-by-tag cell option to export clonotype that present in multiple cells in separate rows --minimal-clone-count, -m <count> export clonotypes with count greater than specified value --minimal-clone-fraction, -q <fraction> export clonotypes with clone abundance greater than specified value --filter-out-of-frames , -o do not export clonotypes with out-of-frame CDR3 sequences --filter-stops , -t do not export clonotypes with CDR3 sequences containing stop codons --preset, -p <preset> use specified preset of export fields . Possible values: min , full (default), minImputed , fullImputed --preset-file <file> file containing a list of export fields to be exported <exportField> a list of export fields Alignments mixcr exportAlignments [-fn] [--chains <chains>] [--preset <preset>] [--preset-file <file>] [<exportField>]... input.(vdjca|clna) [output.tsv] Exports tab-delimited alignments from .vdjca and .clna files. Command line options: -n, --limit <limit> output first n alignments --chains, -c <chains> filter only specified chains --preset, -p <preset> use specified preset of export fields . Possible values: min , full (default), minImputed , fullImputed --preset-file <file> file containing a list of export fields to be exported <exportField> a list of export fields Examples Default export > mixcr exportClones clones.clns clones.tsv The resulting tab-delimited text file will contain default set of columns ( --preset full ) which includes clonotype abundances, nucleotide and amino acid clonotype sequences, Phred qualities, all or just best hit for V, D, J and C genes, corresponding alignments, nucleotide and amino acid sequences of gene regions present in sequence, etc. Example output (for BCR full-length data): cloneId cloneCount cloneFraction allVHitsWithScore allDHitsWithScore allJHitsWithScore allCHitsWithScore allVAlignments allDAlignments allJAlignments allCAlignments nSeqFR1 minQualFR1 nSeqCDR1 minQualCDR1 nSeqFR2 minQualFR2 nSeqCDR2 minQualCDR2 nSeqFR3 minQualFR3 nSeqCDR3 minQualCDR3 nSeqFR4 minQualFR4 aaSeqFR1 aaSeqCDR1 aaSeqFR2 aaSeqCDR2 aaSeqFR3 aaSeqCDR3 aaSeqFR4 refPoints targetSequences targetQualities 1 157166.58695588264 0.10205277935802338 IGHV3-8*00(887.9) IGHJ4*00(175.5) IGHG2B_hinge(26.6) 0|293|316|43|336|SG0CSG11CST18AST20GSG28CSA37GSA68CSA77CSA81CSA87GSG88CSG91ASC92TSA94TST95CSC97GSC98GSG101ASG103CSA115TSG117CST144GST149CSA154CSA156CSG157CSG160ASG169CST192ASG214ASC230TSC234GST237GSA238CSG253CSC254ASA259GSA260TSG266AST278ASA290G|891.0 24|68|68|342|386|ST31CSC39TSG45T|178.0 CAGGTGCAGCTCGTGGAGACGGGGGGAGCCTTGGTGCGGCCTGGGGGGTCTCTGAGACTCTCCTGTGCCGCCTCT 58 GGCTTCCCCTTCGCTAATTTCGGG 58 ATAACCTGGGTCCGCCTGCCTCCAGGAAAGGGGCTCGAGTGGGTCGCAGAC 58 ATTACTCCTGATGGTGGTACCACA 58 TACTATGCAGACTCCGTGAAGGGCCGGTTCACCATCTCCAAAGACAACGCCAAGAATACGGTGGCTCTGCAAATGAACACACTGAGTCCTGAAGACACGGCCGTATATTAC 58 TGTGCGACCCCGATGTATGACCACTGG 13 GGTCAGGGTACCCAGGTCACCGTCTCCTCAG 58 QVQLVETGGALVRPGGSLRLSCAAS GFPFANFG ITWVRLPPGKGLEWVAD ITPDGGTT YYADSVKGRFTISKDNAKNTVALQMNTLSPEDTAVYY CATPMYDHW GQGTQVTVSS_ ::::43:118:142:193:217:328:-3:336:::::342:-4:355:386:: CCTCGCGGCCCAGCCGGCCATGGCCGGCCCGGGAGCGGCCGCTCAGGTGCAGCTCGTGGAGACGGGGGGAGCCTTGGTGCGGCCTGGGGGGTCTCTGAGACTCTCCTGTGCCGCCTCTGGCTTCCCCTTCGCTAATTTCGGGATAACCTGGGTCCGCCTGCCTCCAGGAAAGGGGCTCGAGTGGGTCGCAGACATTACTCCTGATGGTGGTACCACATACTATGCAGACTCCGTGAAGGGCCGGTTCACCATCTCCAAAGACAACGCCAAGAATACGGTGGCTCTGCAAATGAACACACTGAGTCCTGAAGACACGGCCGTATATTACTGTGCGACCCCGATGTATGACCACTGGGGTCAGGGTACCCAGGTCACCGTCTCCTCAGCGCACCACAGCGAAGACCCCTCGGCGCGCCAGGCCTGCACTAGTGGTGCGCCGGT +;33335:4 =678=8=9?98:=9?9@8C?9C@9:9:A9@9:9[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[...........................[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[9968\u0002amp\u0003#55;\u0002amp\u0003#54;\u0002amp\u0003#57;\u0002amp\u0003#52;\u0002amp\u0003#58;\u0002amp\u0003#56;\u0002amp\u0003#57;\u0002amp\u0003#49;\u0002amp\u0003#58;\u0002amp\u0003#58;\u0002amp\u0003#54;\u0002amp\u0003#57;\u0002amp\u0003#64;\u0002amp\u0003#57;\u0002amp\u0003#56;\u0002amp\u0003#56;\u0002amp\u0003#58;\u0002amp\u0003#58;\u0002amp\u0003#58;?:9: 8::::99<8:9:9::;997798<79 2 113072.80475962501 0.07342142002972953 IGHV3-8*00(887.9) IGHJ4*00(175.5) IGHG2B_hinge(26.6) 0|293|316|43|336|SG0CSG11CST18ASG28CSA37GSA68CSA77CSA81CSA87GSG88CSG91ASC92TSA94TST95CSC97GSC98GSG101ASG103CSA115TSG117CST144GST149CSA154CSA156CSG157CSG160ASG169CST192ASG214ASC230TSC234GST237GSA238CSG253CSC254ASA259GSA260TSG266AST278ASA290G|905.0 24|68|68|342|386|ST31CSC39TSG45T|178.0 CAGGTGCAGCTCGTGGAGACTGGGGGAGCCTTGGTGCGGCCTGGGGGGTCTCTGAGACTCTCCTGTGCCGCCTCT 58 GGCTTCCCCTTCGCTAATTTCGGG 58 ATAACCTGGGTCCGCCTGCCTCCAGGAAAGGGGCTCGAGTGGGTCGCAGAC 58 ATTACTCCTGATGGTGGTACCACA 58 TACTATGCAGACTCCGTGAAGGGCCGGTTCACCATCTCCAAAGACAACGCCAAGAATACGGTGGCTCTGCAAATGAACACACTGAGTCCTGAAGACACGGCCGTATATTAC 58 TGTGCGACCCCGATGTATGACCACTGG 13 GGTCAGGGTACCCAGGTCACCGTCTCCTCAG 58 QVQLVETGGALVRPGGSLRLSCAAS GFPFANFG ITWVRLPPGKGLEWVAD ITPDGGTT YYADSVKGRFTISKDNAKNTVALQMNTLSPEDTAVYY CATPMYDHW GQGTQVTVSS_ ::::43:118:142:193:217:328:-3:336:::::342:-4:355:386:: CCTCGCGGCCCAGCCGGCCATGGCCGGCCCGGGAGCGGCCGCTCAGGTGCAGCTCGTGGAGACTGGGGGAGCCTTGGTGCGGCCTGGGGGGTCTCTGAGACTCTCCTGTGCCGCCTCTGGCTTCCCCTTCGCTAATTTCGGGATAACCTGGGTCCGCCTGCCTCCAGGAAAGGGGCTCGAGTGGGTCGCAGACATTACTCCTGATGGTGGTACCACATACTATGCAGACTCCGTGAAGGGCCGGTTCACCATCTCCAAAGACAACGCCAAGAATACGGTGGCTCTGCAAATGAACACACTGAGTCCTGAAGACACGGCCGTATATTACTGTGCGACCCCGATGTATGACCACTGGGGTCAGGGTACCCAGGTCACCGTCTCCTCAGCGCACCACAGCGAAGACCCCTCGGCGCGCCAGGCCTGCACTAGTGGTGCGCCGGTNGT +<33345:5==789>9>:@:::=;A;@9E@;EA:;:;A;@:;:[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[...........................[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[9968 7694:891::69@988::: ?:9:>8::::99<8:9:9::;997798<79!., 3 17367.706440640646 0.011277350661302765 IGHV3-3*00(1386.3) IGHD4(35),IGHD2(30) IGHJ4*00(224.4) IGHG2C_hinge(40.5) 0|295|316|141|436|SG11CSA14GST18ASG35TSG144TSA175T|1391.0 26|33|57|453|460||35.0;54|60|102|451|457||30.0 22|68|68|471|517||230.0 CAGGTGCAGCTCGTGGAGACTGGGGGAGGATTGGTTCAGGCTGGGGGCTCTCTGAGACTCTCCTGTGCAGCCTCT 58 GGACGCACCTTCAGTAGCTATGCC 58 ATGGGCTGGTTCCGCCAGGCTCCAGGGAAGGAGCGTGAGTTTGTATCAGCT 58 ATTAGCTGGAGTGGTGGTAGCACA 58 TTCTATGCAGACTCCGTGAAGGGCCGATTCACCATCTCCAGAGACAACGCCAAGAACACGGTGTATCTGCAAATGAACAGCCTGAAACCTGAGGACACGGCCGTTTATTAC 58 TGTGCAGCAGCAACGCACCGACACGATGGGTTGGCGCTAATCGGGGAGTATGACTACTGG 9 GGCCAGGGGACCCAGGTCACCGTCTCCTCAG 58 QVQLVETGGGLVQAGGSLRLSCAAS GRTFSSYA MGWFRQAPGKEREFVSA ISWSGGST FYADSVKGRFTISRDNAKNTVYLQMNSLKPEDTAVYY CAAATHRHDGLALIGEYDYW GQGTQVTVSS_ ::::141:216:240:291:315:426:-2:436:453:-7:-5:460:471:-2:486:517:: CTCGCGGCCCAGCCGGCCATGGCCGGTTGGGCCGCGAGTAATAACAATCCAGCGGCTGCCGTAGGCAATAGGTATTTCATTTTAAATTCCTCCTGAANCCTCGCGGCCCAGCCGGCCATGGCCGGCCCGGGAGCGGCCGCTCAGGTGCAGCTCGTGGAGACTGGGGGAGGATTGGTTCAGGCTGGGGGCTCTCTGAGACTCTCCTGTGCAGCCTCTGGACGCACCTTCAGTAGCTATGCCATGGGCTGGTTCCGCCAGGCTCCAGGGAAGGAGCGTGAGTTTGTATCAGCTATTAGCTGGAGTGGTGGTAGCACATTCTATGCAGACTCCGTGAAGGGCCGATTCACCATCTCCAGAGACAACGCCAAGAACACGGTGTATCTGCAAATGAACAGCCTGAAACCTGAGGACACGGCCGTTTATTACTGTGCAGCAGCAACGCACCGACACGATGGGTTGGCGCTAATCGGGGAGTATGACTACTGGGGCCAGGGGACCCAGGTCACCGTCTCCTCAGAACCCAAGACACCAAAACCACAACCGGCGCGCCAGGCCTGCACTAGTGGTGCGCCGGTTGCGCCGGTCGGT CCCCCGGGGGGGGGGGGGGGGGGGGGGGGFGGGGGGCGGDDFGGGEGGGFGGGGGEEGGGGGGGGGGGGGGGGFFDFGGGGGGGGEGFA9EGFGGGG!);22335:5><89;>=<<@==>>?@B>=G@@B@>?@AC@I?F=[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[ * * * * * * * * *[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[++8+7+6+4++++6+1+9<+++++99+++?+++++++9+++7+8 778++*85 888[[30[26.1CCC8 4 14959.662854752114 0.009713738792425266 IGHV3-3*00(1386.3) IGHD4(35),IGHD2(30) IGHJ4*00(224.4) IGHG2C_hinge(40.5) 0|295|316|45|340|SG11CSA14GSG35TSG144T|1419.0 26|33|57|357|364||35.0;54|60|102|355|361||30.0 22|68|68|375|421|SA46T|216.0 CAGGTGCAGCTCGTGGAGTCTGGGGGAGGATTGGTTCAGGCTGGGGGCTCTCTGAGACTCTCCTGTGCAGCCTCT 58 GGACGCACCTTCAGTAGCTATGCC 58 ATGGGCTGGTTCCGCCAGGCTCCAGGGAAGGAGCGTGAGTTTGTATCAGCT 58 ATTAGCTGGAGTGGTGGTAGCACA 58 TACTATGCAGACTCCGTGAAGGGCCGATTCACCATCTCCAGAGACAACGCCAAGAACACGGTGTATCTGCAAATGAACAGCCTGAAACCTGAGGACACGGCCGTTTATTAC 58 TGTGCAGCAGCAACGCACCGACACGATGGGTTGGCGCTAATCGGGGAGTATGACTACTGG 9 GGCCAGGGGTCCCAGGTCACCGTCTCCTCAG 58 QVQLVESGGGLVQAGGSLRLSCAAS GRTFSSYA MGWFRQAPGKEREFVSA ISWSGGST YYADSVKGRFTISRDNAKNTVYLQMNSLKPEDTAVYY CAAATHRHDGLALIGEYDYW GQGSQVTVSS_ ::::45:120:144:195:219:330:-2:340:357:-7:-5:364:375:-2:390:421:: CTCCTCGCGGCCCAGCCGGCCATGGCCGGCCCGGGAGCGGCCGCTCAGGTGCAGCTCGTGGAGTCTGGGGGAGGATTGGTTCAGGCTGGGGGCTCTCTGAGACTCTCCTGTGCAGCCTCTGGACGCACCTTCAGTAGCTATGCCATGGGCTGGTTCCGCCAGGCTCCAGGGAAGGAGCGTGAGTTTGTATCAGCTATTAGCTGGAGTGGTGGTAGCACATACTATGCAGACTCCGTGAAGGGCCGATTCACCATCTCCAGAGACAACGCCAAGAACACGGTGTATCTGCAAATGAACAGCCTGAAACCTGAGGACACGGCCGTTTATTACTGTGCAGCAGCAACGCACCGACACGATGGGTTGGCGCTAATCGGGGAGTATGACTACTGGGGCCAGGGGTCCCAGGTCACCGTCTCCTCAGAACCCAAGACACCAAAACCACAACCGGCGCGCCAGGCCTGCACTAGTGGTGCGCCGGTTGCGCCGGTT AC+;33446<6>>:;=A?A>DA??>BCAC<DC@CG@C?BEBEAF=[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[ * * * * * * * * *** [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[++8+7+6+4++++6+1+9<+++++99+++?+++++++9+++7+8 778++48753;8:0----[-[-C 5 13653.505182577868 0.008865613097855052 IGHV3S61*00(1332.4) IGHD5(76) IGHJ7*00(210.9) IGHG2B_hinge(40) 0|297|316|63|360|SG0CSG39CSG103CST152ASA156CSG157AST174CSC185TSC221T|1359.0, 18|36|54|371|389|SA20G|76.0, 26|74|74|394|442|SG29CSA38T|212.0, , CAGGTGCAGCTCGTGGAGTCTGGGGGAGGCTTGGTGCAGCCTGGGGGGTCTCTGAGACTCTCCTGTGCAGCCTCT 58 GGATTCACTTTGGATTATTATGCC 58 ATAGCCTGGTTCCGCCAGGCCCCAGGGAAGGAGCGCGAGGGGGTCTCATGT 58 ATAAGTCATAGTGATGGTAGCACA 58 CACTATGCAGATTCCGTGAAGGGCCGATTCACCATCTCCAGAGACAATGCCAAGAACACGGTGTATCTGCAAATGAACAGCCTGAAACCTGAGGACACGGCCGTTTATTAC 58 TGTGCGACAGATGCGCTTTCGCAGTGCGGTAGTAGCTGGTACCAAGACGCCATGGACTTCTGG 9 GGCAAAGGGACCCTGGTCACCGTCTCCTCAG 58 QVQLVESGGGLVQPGGSLRLSCAAS GFTLDYYA IAWFRQAPGKEREGVSC ISHSDGST HYADSVKGRFTISRDNAKNTVYLQMNSLKPEDTAVYY CATDALSQCGSSWYQDAMDFW GKGTLVTVSS_ ::::63:138:162:213:237:348:1:360:371:0:0:389:394:-6:411:442::,::::::::::::::::::::: CTCGCGGCCCNNNCGGCCNNCCTCGCGGCCCAGCCGGCCATGGCCGGCCCGGGAGCGGCCGCTCAGGTGCAGCTCGTGGAGTCTGGGGGAGGCTTGGTGCAGCCTGGGGGGTCTCTGAGACTCTCCTGTGCAGCCTCTGGATTCACTTTGGATTATTATGCCATAGCCTGGTTCCGCCAGGCCCCAGGGAAGGAGCGCGAGGGGGTCTCATGTATAAGTCATAGTGATGGTAGCACACACTATGCAGATTCCGTGAAGGGCCGATTCACCATCTCCAGAGACAATGCCAAGAACACGGTGTATCTGCAAATGAACAGCCTGAAACCTGAGGACACGGCCGTTTATTACTGTGCGACAGATGCGCTTTCGCAGTGCGGTAGTAGCTGGTACCAAGACGCCATGGACTTCTGGGGCAAAGGGACCCTGGTCACCGTCTCCTCAGAACCCAAGACACCAAA,ACTAGTGGTGCGCCGGTTNGTCTTCGCTGTGGTGCGCCGGT CCCCCGGGG[!!![[[[[!!,:22235:5=<78:>;;;>;:<::@<:8;@:<:89;=>=@9:9[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[ * * * * * * * * * [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[''='<':(7'''';'1,;(='<9>'''88(':7;'!GEEFCGFCGGFGGGGGGCCCCC One can customize the list of fields that will be exported. For example, in order to export just clone count, best hits for V and J genes with corresponding alignments and CDR3 amino acid sequence, one can do: > mixcr exportClones \\ -count \\ -vHit -jHit \\ -vAlignment -jAlignment \\ -aaFeature CDR3 \\ clones.clns \\ clones.tsv The columns in the resulting file will be exported in exactly the same order as parameters on the command line. For convenience, MiXCR provides two predefined sets of fields for exporting: min (will export minimal required information about clones or alignments) and full (used by default); one can use these sets by specifying the --preset option: > mixcr exportClones --preset min clones.clns clones.txt One can add additional columns to the preset in the following way: > mixcr exportClones --preset min -qFeature CDR2 clones.clns clones.tsv One can also put all specify export fields in a separate file > cat myFields.txt -vHits -dHits -feature CDR3 > mixcr exportClones --preset-file myFields.txt clones.clns clones.tsv UMI libraries > mixcr exportClones \\ -uniqueTagCount umi \\ -p full \\ clones.clns \\ clones.tsv There are several options to export columns related to tagged analysis. In the above example we pass -uniqueTagCount option to add a column with UMI count. We also specify option to use full preset of other columns. It is also possible to export full list of UMIs with their read counts that were used to build a clonotype: > mixcr exportClones \\ -uniqueTagCount umi \\ -tagCounts \\ -p full \\ clones.clns \\ clones.tsv cloneId uniqueTagCountUMI tagCounts cloneCount ... 1 901 {AGGATCTAGCTC=47.0,GATTCAGGCAAA=12.0,GTTTGTATATAG=119.0 ... 157166.58695588264 ... 2 123 {AGGGTACACCAG=12.0,GTTTAAAAATAA=42.0,ATTACAGCCTAA=19.0 ... 113072.80475962501 ... 3 110 {GCAAGCGCTGGC=40.0,TCGAAAAAAACA=42.0,AGCACAGGTGAT=113.0 ... 17367.706440640646 ... 4 98 {CGATCGAAGGAT=47.0,ACCCGCATCAGA=112.0,TCAGTTTGTAAA=1.0 ... 14959.662854752114 ... 5 82 {CTGTGGATAGTA=117.0,ATCCAGAAGCGT=12.0,ATCGGTGATCAC=93.0 ... 13653.505182577868 ... ... ... ... ... ... Single cell libraries Export paired TCR-alpha/beta or BCR-heavy/light clonotype pairs from single cell data: > mixcr exportClones \\ --split-by-tag cell \\ -tag cell \\ -cellGroup \\ -uniqueTagCount UMI \\ -count \\ -vFamily -jFamily \\ -aaFeature CDR3 \\ -nFeatureImputed VDJRegion \\ clones.clns \\ clones.tsv Here we use --split-by-tag option to export cells that contain the same clonotype on separate rows, -tag to export cell barcode for each clonotype and -cellGroup which is cell identifier. tagValueCELL cellGroup uniqueTagCountUMI cloneCount bestVFamily bestJFamily nSeqCDR3 aaSeqVDJRegionImputed CTAGGCTAGC 11 198 10716.64 IGLV1 IGLJ3 TGCGGAACATGGGATAGCAGCCTGAGTGCTTGGGTGTTC QVQLVESGGALVRPGGSLRLSCAASGFPFANFGITWVRLPPGKGLEWVADITPDGGTTYYADSVKGRFTISKDNAKNTVALQMNTLSPEDTAVYYCATPMYDHWGQGTQVTVSS_ CTAGGCTAGC 11 93 11372.5962501 IGKV1 IGKJ1 TGTCAACAGTCTGAAAATCTCCCTCCGACGTTC QVQLVETGGGLVQAGGSLRLSCAASGRTFSSYAMGWFRQAPGKEREFVSAISWSGGSTFYADSVKGRFTISRDNAKNTVYLQMNSLKPEDTAVYYCAAATHRHDGLALIGEYDYWGQGTQVTVSS_ CTAGGCTAGC 11 80 17467.0640646 IGHV2 IGHJ5 TGTGCACGGATACGGAGGTATAGCAGTGGCTGGTACTCAACGAACTGGTTCGACCCCTGG QVQLVETGGGLVQAGGSLRLSCAASGFTFDDYVIGWFRQAPGKEREGVSCINSSDGSTYYADSVKGRFTISSDNAKNTVYLQMNSLKPEDTAVYYCAAELIDRLIAIMGASCPLEYDYWGQGTQVTVSS_ TGCTGAATCG 187 98 12959.5475211 IGKV3 IGKJ2 TGTCAACTCGATTGCATTGCACCTCCGACGTTC QVQLVETGGRLGAGWGVSETLLCLLWIQFP*I*YRVVPPGPREGA*GSWMY*FQRW*YIPSRLREGPIHHLPRQFEECGISAHEQLET*RHGRLLLCKRSGRMCCVYRGLLPRHGLLGQRDPGHRLL_ TGCTGAATCG 187 82 11653.182577868 IGHV1 IGHJ2 TGTGCACTACGTAGCAAGGTATAGCAGCTAGGCTGCTGGTGCAACTAGGCTAGCTTCGACCCCTGG QLQLVESGGGLVQAGGSLRLSCAASGRTDSRYTMGWFRQAPGKEREIVAQISPFGGNQYYADSVKGRFTISRDNAKNTVYLQMNSLKAEDTAVYYCYAEGPGRWVAGTWTRDYWGQGTQVTISS_ ... ... ... ... ... ... ... ... In the above example we specified particular columns to export. To export all columns one can use simply: > mixcr exportClones \\ --split-by-tag cell \\ -tag cell \\ -cellGroup \\ -uniqueTagCount UMI \\ -p full \\ clones.clns \\ clones.tsv Export contigs with imputation When V-D-J contigs assembled with assembleContigs does not cover all gene features, it still might be useful to impute non covered parts from germline (for example for the purposes of synthesis). Typically, there may be uncovered parts in VDJRegion for example due to long CDR3 region and non-overlapping R1 or R2, or in case of fragmented data (RNA-Seq or 10x single cell). > mixcr exportClones \\ -aaFeatureImputed VDJRegion \\ -nFeatureImputed VDJRegion \\ -p min \\ clones.clns clones.tsv MiXCR allows to export gene features with imputation using -nFeatureImputed and -aaFeatureImputed export fields. The resulting sequences will have imputed letters in lower case: cloneId aaSeqImputedVDJRegion nSeqImputedVDJRegion cloneCount cloneFraction allVHitsWithScore ... 1550 evqlvesggglvqpggslrlscaasgftfssyamswvrqapgkgpEXXAAITSGGIXXXXXX RAXHHLQRQCQR E GVSANEQPET GHGRLLLRSGRI*ARLLGPGDPGHCLL_ gaggtgcagctggtggagtctgggggaggcttggtgcagcctggggggtctctgagactctcctgtgcagcctctggattcaccttcagtagctatgccatgagctgggtccgccaggctccaggaaaggggcccgAGTNGGNCGCAGCTATTACTAGTGGTGGTATCNNAANATGNNANNCNNCNTGAAGGGCNNTTCACCATCTCCAGAGACAATGTCAACGCTAAGAATAGGGTGTATCTGCAAATGAACAGCCTGAAACCTGAGGACACGGCCGTCTATTACTGCGAAGCGGTAGGATATGAGCTCGACTACTGGGGCCAGGGGACCCAGGTCACTGTCTCCTCAG 14959.662854752114 0.009713738792425266 IGHV3-3*00(1386.3) ... 2739 QVQLVETGGALVHPGGSLRLSCVVSGFT IIMP PGSARSRGRSVRGSXVLvvvmvahtmqtp radspspettprtrcick ta*nlrtrpfiTAQQPTSGRAMKVVSTRNSMITGARGPRSPSLQ CAGGTGCAGCTCGTGGAGACGGGTGGAGCGTTGGTGCACCCTGGGGGGTCGCTGAGACTCTCCTGTGTCGTCTCTGGATTCACTTGAATTATTATGCCATAGCCTGGTTCCGCCAGGTCCCGGGGAAGGAGCGTGAGGGGATCTCANGTATTAGtagtagtgatggtagcacatactatgcagactccgtgaagggccgattcaccatctccagagacaacgccaagaacacggtgtatctgcaaatgaacagcctgaaacctgaggacacggccgtttattacTGCGCAGCAGCCCACTTCGGGGCGTGCTATGAAGGTAGTTTCGACGCGAAACTCTATGATCACTGGGGCCAGGGGACCCAGGTCACCGTCTCTTCAG 17367.706440640646 0.011277350661302765 IGHV3-3*00(1386.3) ... 2940 QVQLVEXGGGLXQXGGSLKLSCAASGLTFDDYAIGWFRQVPGKXREGIXCVGSRGXxyyadsvXXXXXXXIXXXXXTXSLDLNSLIPEDTATYQCAAVTSDLGCTHYMLQNDIEYDYWGRGTQVTVST_ CAGGTGCAGCTCGTGGAGNCNGGGGGAGGNTTGGNGCAGNCTGGGGGGTCTCTGAAACTCTCCTGTGCAGCCTCTGGACTCACTTTCGACGATTATGCCATCGGCTGGTTCCGNCAGGTTCCAGGGAAGNAGCGCGAGGGGATCTGNTGTGTCGGTAGTCGAGGNNNCNCatactatgcagactccgtgaANNNNNGATTNNNCATNNCCATTGNCANCGNCAANNACACGNAGTCTCTGGATTTGAACAGCCTGATCCCTGAGGACACGGCCACATATCAATGTGCGGCAGTCACCTCGGACCTGGGATGTACGCACTATATGTTGCAGAATGATATCGAGTATGACTACTGGGGCCGGGGGACCCAGGTCACCGTCTCGACAG 157166.58695588264 0.10205277935802338 IGHV3-8*00(887.9) ... 3283 qvqlvesggglvqaggslrlscaasgrtfssyamgwfrqapgkerefvaaiswXGSTXXYADSAKDRFVISRDNGKNMAYLXLTSLKPDDTGIYLCAADIQCQTDPRHLPFGSWGWGQGTQVTVSS_ caggtgcagctggtagagtctgggggaggattggtgcaggctgggggctctctgagactctcctgtgcagcctctggacgcaccttcagtagctatgccatgggctggttccgccaggctccagggaaggagcgtgagtttgtagcagctattagctggANAGGTTCAACCANGNACTATGCCGACTCCGCGAAGGACCGATTCGTCATTTCCAGAGACAACGGCAAGAACATGGCGTACTTGTANTTAACCAGCCTGAAGCCTGACGACACTGGCATTTATCTCTGTGCGGCGGACATCCAGTGTCAGACTGACCCCCGTCATCTCCCTTTTGGTTCCTGGGGTTGGGGCCAGGGGACGCAAGTCACCGTCTCCTCGG 113072.80475962501 0.07342142002972953 IGHV3-8*00(887.9) ... One can also use default presets with imputation (all gene features will use imputation option): > mixcr exportClones \\ -aaFeatureImputed VDJRegion \\ -nFeatureImputed VDJRegion \\ -p fullImputed \\ clones.clns clones.tsv Export fields Common fields These fields available for both exportAlignments and exportClones : -targets Number of targets -vHit Best V hit -dHit Best D hit -jHit Best J hit -cHit Best C hit -vGene Best V hit gene name (e.g. TRBV12-3 for TRBV12-3*00) -dGene Best D hit gene name (e.g. TRBV12-3 for TRBV12-3*00) -jGene Best J hit gene name (e.g. TRBV12-3 for TRBV12-3*00) -cGene Best C hit gene name (e.g. TRBV12-3 for TRBV12-3*00) -vFamily Best V hit family name (e.g. TRBV12 for TRBV12-3*00) -dFamily Best D hit family name (e.g. TRBV12 for TRBV12-3*00) -jFamily Best J hit family name (e.g. TRBV12 for TRBV12-3*00) -cFamily Best C hit family name (e.g. TRBV12 for TRBV12-3*00) -vHitScore Score for best V hit -dHitScore Score for best D hit -jHitScore Score for best J hit -cHitScore Score for best C hit -vHitsWithScore All V hits with score -dHitsWithScore All D hits with score -jHitsWithScore All J hits with score -cHitsWithScore All C hits with score -vHits All V hits -dHits All D hits -jHits All J hits -cHits All C hits -vGenes All V gene names (e.g. TRBV12-3 for TRBV12-3*00) -dGenes All D gene names (e.g. TRBV12-3 for TRBV12-3*00) -jGenes All J gene names (e.g. TRBV12-3 for TRBV12-3*00) -cGenes All C gene names (e.g. TRBV12-3 for TRBV12-3*00) -vFamilies All V gene family anmes (e.g. TRBV12 for TRBV12-3*00) -dFamilies All D gene family anmes (e.g. TRBV12 for TRBV12-3*00) -jFamilies All J gene family anmes (e.g. TRBV12 for TRBV12-3*00) -cFamilies All C gene family anmes (e.g. TRBV12 for TRBV12-3*00) -vAlignment Best V alignment -dAlignment Best D alignment -jAlignment Best J alignment -cAlignment Best C alignment -vAlignments All V alignments -dAlignments All D alignments -jAlignments All J alignments -cAlignments All C alignments -nFeature <gene_feature> Nucleotide sequence of specified gene feature -qFeature <gene_feature> Quality string of specified gene feature -aaFeature <gene_feature> Amino acid sequence of specified gene feature -nFeatureImputed <gene_feature> Nucleotide sequence of specified gene feature using letters from germline (marked lowercase) for uncovered regions -aaFeatureImputed <gene_feature> Amino acid sequence of specified gene feature using letters from germline (marked lowercase) for uncovered regions -minFeatureQuality <gene_feature> Minimal quality of specified gene feature -avrgFeatureQuality <gene_feature> Average quality of specified gene feature -lengthOf <gene_feature> Length of specified gene feature. -nMutations <gene_feature> Extract nucleotide mutations for specific gene feature; relative to germline sequence. -nMutationsRelative <gene_feature> <relative_to_gene_feature> Extract nucleotide mutations for specific gene feature relative to another feature. -aaMutations <gene_feature> Extract amino acid mutations for specific gene feature -aaMutationsRelative <gene_feature> <relative_to_gene_feature> Extract amino acid mutations for specific gene feature relative to another feature. -mutationsDetailed <gene_feature> Detailed list of nucleotide and corresponding amino acid mutations. Format <nt_mutation>:<aa_mutation_individual>:<aa_mutation_cumulative> , where <aa_mutation_individual> is an expected amino acid mutation given no other mutations have occurred, and <aa_mutation_cumulative> amino acid mutation is the observed amino acid mutation combining effect from all others. -mutationsDetailedRelative <gene_feature> <relative_to_gene_feature> Detailed list of nucleotide and corresponding amino acid mutations written, positions relative to specified gene feature. Format : : , where is an expected amino acid mutation given no other mutations have occurred, and amino acid mutation is the observed amino acid mutation combining effect from all other. WARNING: format may change in following versions. -positionInReferenceOf <reference_point> Position of specified reference point inside reference sequences (clonal sequence / read sequence). -positionOf <reference_point> Position of specified reference point inside target sequences (clonal sequence / read sequence). -defaultAnchorPoints Outputs a list of default reference points (like CDR2Begin, FR4End, etc. see documentation bellow for the full list and formatting) -targetSequences Aligned sequences (targets), separated with comma -targetQualities Aligned sequence (target) qualities, separated with comma -vIdentityPercents V alignment identity percents -dIdentityPercents D alignment identity percents -jIdentityPercents J alignment identity percents -cIdentityPercents C alignment identity percents -vBestIdentityPercent V best alignment identity percent -dBestIdentityPercent D best alignment identity percent -jBestIdentityPercent J best alignment identity percent -cBestIdentityPercent C best alignment identity percent -chains Chains -topChains Top chains -tagCounts All tags with counts -tag <tag> Tag value (i.e. cell barcode or UMI sequence) -uniqueTagCount <tag> Unique tag count Alignment-specific fields The following fields are only available for exportAlignments : -readIds Id(s) of read(s) corresponding to alignment -descrsR1 Description lines from initial .fasta or .fastq file for R1 reads (only available if -OsaveOriginalReads= true was used in align command) -descrsR2 Description lines from initial .fastq file for R2 reads (only available if -OsaveOriginalReads=true was used in alig n command) -readHistory Read history -cloneId To which clone alignment was attached (make sure using .clna file as input for exportAlignments ) -cloneIdWithMappingType To which clone alignment was attached with additional info on mapping type (make sure using .clna file as input for exportAlignments ) Clonotype-specific fields The following fields are only available for exportClones : -cloneId Unique clone identifier -count Clone count -fraction Clone fraction -tagFractions All tags with fractions -cellGroup Cell group (for single cell analysis) Default anchor point positions Positions of anchor points produced by the -defaultAnchorPoints option are outputted as a colon separated list. If an anchor point is not covered by the target sequence nothing is printed for it, but flanking colon symbols are preserved to maintain positions in array. See example: :::::::::108:117:125:152:186:213:243:244: If there are several target sequences (e.g. paired-end reads or multi-part clonal sequnce), an array is outputted for each target sequence. In this case arrays are separated by a comma: 2 :61:107:107:118:::::::::::::,:::::::::103:112:120:147:181:208:238:239: Even if there are no anchor points in one of the parts: :::::::::::::::::,:::::::::108:117:125:152:186:213:243:244: The following table shows the correspondence between anchor points and positions in the default anchor point array: Anchors point Zero-based position One-based position V5UTRBeginTrimmed 0 1 V5UTREnd / L1Begin 1 2 L1End / VIntronBegin 2 3 VIntronEnd / L2Begin 3 4 L2End / FR1Begin 4 5 FR1End / CDR1Begin 5 6 CDR1End / FR2Begin 6 7 FR2End / CDR2Begin 7 8 CDR2End / FR3Begin 8 9 FR3End / CDR3Begin 9 10 Number of 3\u2019 V deletions (negative value), or length of 3\u2019 V P-segment (positive value) 10 11 VEndTrimmed, next position after last aligned nucleotide of V gene 11 12 DBeginTrimmed, position of first aligned nucleotide of D gene 12 13 Number of 5\u2019 D deletions (negative value), or length of 5\u2019 D P-segment (positive value) 13 14 Number of 3\u2019 D deletions (negative value), or length of 3\u2019 D P-segment (positive value) 14 15 DEndTrimmed, next position after last aligned nucleotide of D gene 15 16 JBeginTrimmed, position of first aligned nucleotide of J gene 16 17 Number of 3\u2019 J deletions (negative value), or length of 3\u2019 J P-segment (positive value) 17 18 CDR3End / FR4Begin 18 19 FR4End 19 20 CBegin 20 21 CExon1End 21 22","title":"export"},{"location":"mixcr/reference/mixcr-export/#export","text":"MiXCR uses three highly efficient binary formats that hold exhaustive information on the clonotypes, alignments, barcodes and original sequencing reads: .vdjca produced by align and holds alignments .clns produced by assemble and assembleContigs holds clonotypes .clna produced by assemble and holds both clonotypes and alignments MiXCR provides functions for export alignments and clonotype tables in a tab-delimited way. For human-readable formatted output see pretty export .","title":"Export"},{"location":"mixcr/reference/mixcr-export/#clonotype-tables","text":"mixcr exportClones [-fn] [--split-by-tag <tag>] [--chains <chains>] [--minimal-clone-count <count>] [--minimal-clone-fraction <fraction>] [--filter-out-of-frames] [--filter-stops] [--preset <preset>] [--preset-file <file>] [<exportField>]... input.(vdjca|clna) [output.tsv] Exports tab-delimited table of alignments from .vdjca and .clna files. Command line options: -n, --limit <limit> output first n clones --chains, -c <chains> filter only specified chains --split-by-tag <tag> split clonotype containing multiple values for specified tag into multiple rows (one row for one tag value). Typically, used for single cell analysis with --split-by-tag cell option to export clonotype that present in multiple cells in separate rows --minimal-clone-count, -m <count> export clonotypes with count greater than specified value --minimal-clone-fraction, -q <fraction> export clonotypes with clone abundance greater than specified value --filter-out-of-frames , -o do not export clonotypes with out-of-frame CDR3 sequences --filter-stops , -t do not export clonotypes with CDR3 sequences containing stop codons --preset, -p <preset> use specified preset of export fields . Possible values: min , full (default), minImputed , fullImputed --preset-file <file> file containing a list of export fields to be exported <exportField> a list of export fields","title":"Clonotype tables"},{"location":"mixcr/reference/mixcr-export/#alignments","text":"mixcr exportAlignments [-fn] [--chains <chains>] [--preset <preset>] [--preset-file <file>] [<exportField>]... input.(vdjca|clna) [output.tsv] Exports tab-delimited alignments from .vdjca and .clna files. Command line options: -n, --limit <limit> output first n alignments --chains, -c <chains> filter only specified chains --preset, -p <preset> use specified preset of export fields . Possible values: min , full (default), minImputed , fullImputed --preset-file <file> file containing a list of export fields to be exported <exportField> a list of export fields","title":"Alignments"},{"location":"mixcr/reference/mixcr-export/#examples","text":"","title":"Examples"},{"location":"mixcr/reference/mixcr-export/#default-export","text":"> mixcr exportClones clones.clns clones.tsv The resulting tab-delimited text file will contain default set of columns ( --preset full ) which includes clonotype abundances, nucleotide and amino acid clonotype sequences, Phred qualities, all or just best hit for V, D, J and C genes, corresponding alignments, nucleotide and amino acid sequences of gene regions present in sequence, etc. Example output (for BCR full-length data): cloneId cloneCount cloneFraction allVHitsWithScore allDHitsWithScore allJHitsWithScore allCHitsWithScore allVAlignments allDAlignments allJAlignments allCAlignments nSeqFR1 minQualFR1 nSeqCDR1 minQualCDR1 nSeqFR2 minQualFR2 nSeqCDR2 minQualCDR2 nSeqFR3 minQualFR3 nSeqCDR3 minQualCDR3 nSeqFR4 minQualFR4 aaSeqFR1 aaSeqCDR1 aaSeqFR2 aaSeqCDR2 aaSeqFR3 aaSeqCDR3 aaSeqFR4 refPoints targetSequences targetQualities 1 157166.58695588264 0.10205277935802338 IGHV3-8*00(887.9) IGHJ4*00(175.5) IGHG2B_hinge(26.6) 0|293|316|43|336|SG0CSG11CST18AST20GSG28CSA37GSA68CSA77CSA81CSA87GSG88CSG91ASC92TSA94TST95CSC97GSC98GSG101ASG103CSA115TSG117CST144GST149CSA154CSA156CSG157CSG160ASG169CST192ASG214ASC230TSC234GST237GSA238CSG253CSC254ASA259GSA260TSG266AST278ASA290G|891.0 24|68|68|342|386|ST31CSC39TSG45T|178.0 CAGGTGCAGCTCGTGGAGACGGGGGGAGCCTTGGTGCGGCCTGGGGGGTCTCTGAGACTCTCCTGTGCCGCCTCT 58 GGCTTCCCCTTCGCTAATTTCGGG 58 ATAACCTGGGTCCGCCTGCCTCCAGGAAAGGGGCTCGAGTGGGTCGCAGAC 58 ATTACTCCTGATGGTGGTACCACA 58 TACTATGCAGACTCCGTGAAGGGCCGGTTCACCATCTCCAAAGACAACGCCAAGAATACGGTGGCTCTGCAAATGAACACACTGAGTCCTGAAGACACGGCCGTATATTAC 58 TGTGCGACCCCGATGTATGACCACTGG 13 GGTCAGGGTACCCAGGTCACCGTCTCCTCAG 58 QVQLVETGGALVRPGGSLRLSCAAS GFPFANFG ITWVRLPPGKGLEWVAD ITPDGGTT YYADSVKGRFTISKDNAKNTVALQMNTLSPEDTAVYY CATPMYDHW GQGTQVTVSS_ ::::43:118:142:193:217:328:-3:336:::::342:-4:355:386:: CCTCGCGGCCCAGCCGGCCATGGCCGGCCCGGGAGCGGCCGCTCAGGTGCAGCTCGTGGAGACGGGGGGAGCCTTGGTGCGGCCTGGGGGGTCTCTGAGACTCTCCTGTGCCGCCTCTGGCTTCCCCTTCGCTAATTTCGGGATAACCTGGGTCCGCCTGCCTCCAGGAAAGGGGCTCGAGTGGGTCGCAGACATTACTCCTGATGGTGGTACCACATACTATGCAGACTCCGTGAAGGGCCGGTTCACCATCTCCAAAGACAACGCCAAGAATACGGTGGCTCTGCAAATGAACACACTGAGTCCTGAAGACACGGCCGTATATTACTGTGCGACCCCGATGTATGACCACTGGGGTCAGGGTACCCAGGTCACCGTCTCCTCAGCGCACCACAGCGAAGACCCCTCGGCGCGCCAGGCCTGCACTAGTGGTGCGCCGGT +;33335:4 =678=8=9?98:=9?9@8C?9C@9:9:A9@9:9[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[...........................[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[9968\u0002amp\u0003#55;\u0002amp\u0003#54;\u0002amp\u0003#57;\u0002amp\u0003#52;\u0002amp\u0003#58;\u0002amp\u0003#56;\u0002amp\u0003#57;\u0002amp\u0003#49;\u0002amp\u0003#58;\u0002amp\u0003#58;\u0002amp\u0003#54;\u0002amp\u0003#57;\u0002amp\u0003#64;\u0002amp\u0003#57;\u0002amp\u0003#56;\u0002amp\u0003#56;\u0002amp\u0003#58;\u0002amp\u0003#58;\u0002amp\u0003#58;?:9: 8::::99<8:9:9::;997798<79 2 113072.80475962501 0.07342142002972953 IGHV3-8*00(887.9) IGHJ4*00(175.5) IGHG2B_hinge(26.6) 0|293|316|43|336|SG0CSG11CST18ASG28CSA37GSA68CSA77CSA81CSA87GSG88CSG91ASC92TSA94TST95CSC97GSC98GSG101ASG103CSA115TSG117CST144GST149CSA154CSA156CSG157CSG160ASG169CST192ASG214ASC230TSC234GST237GSA238CSG253CSC254ASA259GSA260TSG266AST278ASA290G|905.0 24|68|68|342|386|ST31CSC39TSG45T|178.0 CAGGTGCAGCTCGTGGAGACTGGGGGAGCCTTGGTGCGGCCTGGGGGGTCTCTGAGACTCTCCTGTGCCGCCTCT 58 GGCTTCCCCTTCGCTAATTTCGGG 58 ATAACCTGGGTCCGCCTGCCTCCAGGAAAGGGGCTCGAGTGGGTCGCAGAC 58 ATTACTCCTGATGGTGGTACCACA 58 TACTATGCAGACTCCGTGAAGGGCCGGTTCACCATCTCCAAAGACAACGCCAAGAATACGGTGGCTCTGCAAATGAACACACTGAGTCCTGAAGACACGGCCGTATATTAC 58 TGTGCGACCCCGATGTATGACCACTGG 13 GGTCAGGGTACCCAGGTCACCGTCTCCTCAG 58 QVQLVETGGALVRPGGSLRLSCAAS GFPFANFG ITWVRLPPGKGLEWVAD ITPDGGTT YYADSVKGRFTISKDNAKNTVALQMNTLSPEDTAVYY CATPMYDHW GQGTQVTVSS_ ::::43:118:142:193:217:328:-3:336:::::342:-4:355:386:: CCTCGCGGCCCAGCCGGCCATGGCCGGCCCGGGAGCGGCCGCTCAGGTGCAGCTCGTGGAGACTGGGGGAGCCTTGGTGCGGCCTGGGGGGTCTCTGAGACTCTCCTGTGCCGCCTCTGGCTTCCCCTTCGCTAATTTCGGGATAACCTGGGTCCGCCTGCCTCCAGGAAAGGGGCTCGAGTGGGTCGCAGACATTACTCCTGATGGTGGTACCACATACTATGCAGACTCCGTGAAGGGCCGGTTCACCATCTCCAAAGACAACGCCAAGAATACGGTGGCTCTGCAAATGAACACACTGAGTCCTGAAGACACGGCCGTATATTACTGTGCGACCCCGATGTATGACCACTGGGGTCAGGGTACCCAGGTCACCGTCTCCTCAGCGCACCACAGCGAAGACCCCTCGGCGCGCCAGGCCTGCACTAGTGGTGCGCCGGTNGT +<33345:5==789>9>:@:::=;A;@9E@;EA:;:;A;@:;:[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[...........................[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[9968 7694:891::69@988::: ?:9:>8::::99<8:9:9::;997798<79!., 3 17367.706440640646 0.011277350661302765 IGHV3-3*00(1386.3) IGHD4(35),IGHD2(30) IGHJ4*00(224.4) IGHG2C_hinge(40.5) 0|295|316|141|436|SG11CSA14GST18ASG35TSG144TSA175T|1391.0 26|33|57|453|460||35.0;54|60|102|451|457||30.0 22|68|68|471|517||230.0 CAGGTGCAGCTCGTGGAGACTGGGGGAGGATTGGTTCAGGCTGGGGGCTCTCTGAGACTCTCCTGTGCAGCCTCT 58 GGACGCACCTTCAGTAGCTATGCC 58 ATGGGCTGGTTCCGCCAGGCTCCAGGGAAGGAGCGTGAGTTTGTATCAGCT 58 ATTAGCTGGAGTGGTGGTAGCACA 58 TTCTATGCAGACTCCGTGAAGGGCCGATTCACCATCTCCAGAGACAACGCCAAGAACACGGTGTATCTGCAAATGAACAGCCTGAAACCTGAGGACACGGCCGTTTATTAC 58 TGTGCAGCAGCAACGCACCGACACGATGGGTTGGCGCTAATCGGGGAGTATGACTACTGG 9 GGCCAGGGGACCCAGGTCACCGTCTCCTCAG 58 QVQLVETGGGLVQAGGSLRLSCAAS GRTFSSYA MGWFRQAPGKEREFVSA ISWSGGST FYADSVKGRFTISRDNAKNTVYLQMNSLKPEDTAVYY CAAATHRHDGLALIGEYDYW GQGTQVTVSS_ ::::141:216:240:291:315:426:-2:436:453:-7:-5:460:471:-2:486:517:: CTCGCGGCCCAGCCGGCCATGGCCGGTTGGGCCGCGAGTAATAACAATCCAGCGGCTGCCGTAGGCAATAGGTATTTCATTTTAAATTCCTCCTGAANCCTCGCGGCCCAGCCGGCCATGGCCGGCCCGGGAGCGGCCGCTCAGGTGCAGCTCGTGGAGACTGGGGGAGGATTGGTTCAGGCTGGGGGCTCTCTGAGACTCTCCTGTGCAGCCTCTGGACGCACCTTCAGTAGCTATGCCATGGGCTGGTTCCGCCAGGCTCCAGGGAAGGAGCGTGAGTTTGTATCAGCTATTAGCTGGAGTGGTGGTAGCACATTCTATGCAGACTCCGTGAAGGGCCGATTCACCATCTCCAGAGACAACGCCAAGAACACGGTGTATCTGCAAATGAACAGCCTGAAACCTGAGGACACGGCCGTTTATTACTGTGCAGCAGCAACGCACCGACACGATGGGTTGGCGCTAATCGGGGAGTATGACTACTGGGGCCAGGGGACCCAGGTCACCGTCTCCTCAGAACCCAAGACACCAAAACCACAACCGGCGCGCCAGGCCTGCACTAGTGGTGCGCCGGTTGCGCCGGTCGGT CCCCCGGGGGGGGGGGGGGGGGGGGGGGGFGGGGGGCGGDDFGGGEGGGFGGGGGEEGGGGGGGGGGGGGGGGFFDFGGGGGGGGEGFA9EGFGGGG!);22335:5><89;>=<<@==>>?@B>=G@@B@>?@AC@I?F=[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[ * * * * * * * * *[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[++8+7+6+4++++6+1+9<+++++99+++?+++++++9+++7+8 778++*85 888[[30[26.1CCC8 4 14959.662854752114 0.009713738792425266 IGHV3-3*00(1386.3) IGHD4(35),IGHD2(30) IGHJ4*00(224.4) IGHG2C_hinge(40.5) 0|295|316|45|340|SG11CSA14GSG35TSG144T|1419.0 26|33|57|357|364||35.0;54|60|102|355|361||30.0 22|68|68|375|421|SA46T|216.0 CAGGTGCAGCTCGTGGAGTCTGGGGGAGGATTGGTTCAGGCTGGGGGCTCTCTGAGACTCTCCTGTGCAGCCTCT 58 GGACGCACCTTCAGTAGCTATGCC 58 ATGGGCTGGTTCCGCCAGGCTCCAGGGAAGGAGCGTGAGTTTGTATCAGCT 58 ATTAGCTGGAGTGGTGGTAGCACA 58 TACTATGCAGACTCCGTGAAGGGCCGATTCACCATCTCCAGAGACAACGCCAAGAACACGGTGTATCTGCAAATGAACAGCCTGAAACCTGAGGACACGGCCGTTTATTAC 58 TGTGCAGCAGCAACGCACCGACACGATGGGTTGGCGCTAATCGGGGAGTATGACTACTGG 9 GGCCAGGGGTCCCAGGTCACCGTCTCCTCAG 58 QVQLVESGGGLVQAGGSLRLSCAAS GRTFSSYA MGWFRQAPGKEREFVSA ISWSGGST YYADSVKGRFTISRDNAKNTVYLQMNSLKPEDTAVYY CAAATHRHDGLALIGEYDYW GQGSQVTVSS_ ::::45:120:144:195:219:330:-2:340:357:-7:-5:364:375:-2:390:421:: CTCCTCGCGGCCCAGCCGGCCATGGCCGGCCCGGGAGCGGCCGCTCAGGTGCAGCTCGTGGAGTCTGGGGGAGGATTGGTTCAGGCTGGGGGCTCTCTGAGACTCTCCTGTGCAGCCTCTGGACGCACCTTCAGTAGCTATGCCATGGGCTGGTTCCGCCAGGCTCCAGGGAAGGAGCGTGAGTTTGTATCAGCTATTAGCTGGAGTGGTGGTAGCACATACTATGCAGACTCCGTGAAGGGCCGATTCACCATCTCCAGAGACAACGCCAAGAACACGGTGTATCTGCAAATGAACAGCCTGAAACCTGAGGACACGGCCGTTTATTACTGTGCAGCAGCAACGCACCGACACGATGGGTTGGCGCTAATCGGGGAGTATGACTACTGGGGCCAGGGGTCCCAGGTCACCGTCTCCTCAGAACCCAAGACACCAAAACCACAACCGGCGCGCCAGGCCTGCACTAGTGGTGCGCCGGTTGCGCCGGTT AC+;33446<6>>:;=A?A>DA??>BCAC<DC@CG@C?BEBEAF=[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[ * * * * * * * * *** [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[++8+7+6+4++++6+1+9<+++++99+++?+++++++9+++7+8 778++48753;8:0----[-[-C 5 13653.505182577868 0.008865613097855052 IGHV3S61*00(1332.4) IGHD5(76) IGHJ7*00(210.9) IGHG2B_hinge(40) 0|297|316|63|360|SG0CSG39CSG103CST152ASA156CSG157AST174CSC185TSC221T|1359.0, 18|36|54|371|389|SA20G|76.0, 26|74|74|394|442|SG29CSA38T|212.0, , CAGGTGCAGCTCGTGGAGTCTGGGGGAGGCTTGGTGCAGCCTGGGGGGTCTCTGAGACTCTCCTGTGCAGCCTCT 58 GGATTCACTTTGGATTATTATGCC 58 ATAGCCTGGTTCCGCCAGGCCCCAGGGAAGGAGCGCGAGGGGGTCTCATGT 58 ATAAGTCATAGTGATGGTAGCACA 58 CACTATGCAGATTCCGTGAAGGGCCGATTCACCATCTCCAGAGACAATGCCAAGAACACGGTGTATCTGCAAATGAACAGCCTGAAACCTGAGGACACGGCCGTTTATTAC 58 TGTGCGACAGATGCGCTTTCGCAGTGCGGTAGTAGCTGGTACCAAGACGCCATGGACTTCTGG 9 GGCAAAGGGACCCTGGTCACCGTCTCCTCAG 58 QVQLVESGGGLVQPGGSLRLSCAAS GFTLDYYA IAWFRQAPGKEREGVSC ISHSDGST HYADSVKGRFTISRDNAKNTVYLQMNSLKPEDTAVYY CATDALSQCGSSWYQDAMDFW GKGTLVTVSS_ ::::63:138:162:213:237:348:1:360:371:0:0:389:394:-6:411:442::,::::::::::::::::::::: CTCGCGGCCCNNNCGGCCNNCCTCGCGGCCCAGCCGGCCATGGCCGGCCCGGGAGCGGCCGCTCAGGTGCAGCTCGTGGAGTCTGGGGGAGGCTTGGTGCAGCCTGGGGGGTCTCTGAGACTCTCCTGTGCAGCCTCTGGATTCACTTTGGATTATTATGCCATAGCCTGGTTCCGCCAGGCCCCAGGGAAGGAGCGCGAGGGGGTCTCATGTATAAGTCATAGTGATGGTAGCACACACTATGCAGATTCCGTGAAGGGCCGATTCACCATCTCCAGAGACAATGCCAAGAACACGGTGTATCTGCAAATGAACAGCCTGAAACCTGAGGACACGGCCGTTTATTACTGTGCGACAGATGCGCTTTCGCAGTGCGGTAGTAGCTGGTACCAAGACGCCATGGACTTCTGGGGCAAAGGGACCCTGGTCACCGTCTCCTCAGAACCCAAGACACCAAA,ACTAGTGGTGCGCCGGTTNGTCTTCGCTGTGGTGCGCCGGT CCCCCGGGG[!!![[[[[!!,:22235:5=<78:>;;;>;:<::@<:8;@:<:89;=>=@9:9[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[ * * * * * * * * * [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[''='<':(7'''';'1,;(='<9>'''88(':7;'!GEEFCGFCGGFGGGGGGCCCCC One can customize the list of fields that will be exported. For example, in order to export just clone count, best hits for V and J genes with corresponding alignments and CDR3 amino acid sequence, one can do: > mixcr exportClones \\ -count \\ -vHit -jHit \\ -vAlignment -jAlignment \\ -aaFeature CDR3 \\ clones.clns \\ clones.tsv The columns in the resulting file will be exported in exactly the same order as parameters on the command line. For convenience, MiXCR provides two predefined sets of fields for exporting: min (will export minimal required information about clones or alignments) and full (used by default); one can use these sets by specifying the --preset option: > mixcr exportClones --preset min clones.clns clones.txt One can add additional columns to the preset in the following way: > mixcr exportClones --preset min -qFeature CDR2 clones.clns clones.tsv One can also put all specify export fields in a separate file > cat myFields.txt -vHits -dHits -feature CDR3 > mixcr exportClones --preset-file myFields.txt clones.clns clones.tsv","title":"Default export"},{"location":"mixcr/reference/mixcr-export/#umi-libraries","text":"> mixcr exportClones \\ -uniqueTagCount umi \\ -p full \\ clones.clns \\ clones.tsv There are several options to export columns related to tagged analysis. In the above example we pass -uniqueTagCount option to add a column with UMI count. We also specify option to use full preset of other columns. It is also possible to export full list of UMIs with their read counts that were used to build a clonotype: > mixcr exportClones \\ -uniqueTagCount umi \\ -tagCounts \\ -p full \\ clones.clns \\ clones.tsv cloneId uniqueTagCountUMI tagCounts cloneCount ... 1 901 {AGGATCTAGCTC=47.0,GATTCAGGCAAA=12.0,GTTTGTATATAG=119.0 ... 157166.58695588264 ... 2 123 {AGGGTACACCAG=12.0,GTTTAAAAATAA=42.0,ATTACAGCCTAA=19.0 ... 113072.80475962501 ... 3 110 {GCAAGCGCTGGC=40.0,TCGAAAAAAACA=42.0,AGCACAGGTGAT=113.0 ... 17367.706440640646 ... 4 98 {CGATCGAAGGAT=47.0,ACCCGCATCAGA=112.0,TCAGTTTGTAAA=1.0 ... 14959.662854752114 ... 5 82 {CTGTGGATAGTA=117.0,ATCCAGAAGCGT=12.0,ATCGGTGATCAC=93.0 ... 13653.505182577868 ... ... ... ... ... ...","title":"UMI libraries"},{"location":"mixcr/reference/mixcr-export/#single-cell-libraries","text":"Export paired TCR-alpha/beta or BCR-heavy/light clonotype pairs from single cell data: > mixcr exportClones \\ --split-by-tag cell \\ -tag cell \\ -cellGroup \\ -uniqueTagCount UMI \\ -count \\ -vFamily -jFamily \\ -aaFeature CDR3 \\ -nFeatureImputed VDJRegion \\ clones.clns \\ clones.tsv Here we use --split-by-tag option to export cells that contain the same clonotype on separate rows, -tag to export cell barcode for each clonotype and -cellGroup which is cell identifier. tagValueCELL cellGroup uniqueTagCountUMI cloneCount bestVFamily bestJFamily nSeqCDR3 aaSeqVDJRegionImputed CTAGGCTAGC 11 198 10716.64 IGLV1 IGLJ3 TGCGGAACATGGGATAGCAGCCTGAGTGCTTGGGTGTTC QVQLVESGGALVRPGGSLRLSCAASGFPFANFGITWVRLPPGKGLEWVADITPDGGTTYYADSVKGRFTISKDNAKNTVALQMNTLSPEDTAVYYCATPMYDHWGQGTQVTVSS_ CTAGGCTAGC 11 93 11372.5962501 IGKV1 IGKJ1 TGTCAACAGTCTGAAAATCTCCCTCCGACGTTC QVQLVETGGGLVQAGGSLRLSCAASGRTFSSYAMGWFRQAPGKEREFVSAISWSGGSTFYADSVKGRFTISRDNAKNTVYLQMNSLKPEDTAVYYCAAATHRHDGLALIGEYDYWGQGTQVTVSS_ CTAGGCTAGC 11 80 17467.0640646 IGHV2 IGHJ5 TGTGCACGGATACGGAGGTATAGCAGTGGCTGGTACTCAACGAACTGGTTCGACCCCTGG QVQLVETGGGLVQAGGSLRLSCAASGFTFDDYVIGWFRQAPGKEREGVSCINSSDGSTYYADSVKGRFTISSDNAKNTVYLQMNSLKPEDTAVYYCAAELIDRLIAIMGASCPLEYDYWGQGTQVTVSS_ TGCTGAATCG 187 98 12959.5475211 IGKV3 IGKJ2 TGTCAACTCGATTGCATTGCACCTCCGACGTTC QVQLVETGGRLGAGWGVSETLLCLLWIQFP*I*YRVVPPGPREGA*GSWMY*FQRW*YIPSRLREGPIHHLPRQFEECGISAHEQLET*RHGRLLLCKRSGRMCCVYRGLLPRHGLLGQRDPGHRLL_ TGCTGAATCG 187 82 11653.182577868 IGHV1 IGHJ2 TGTGCACTACGTAGCAAGGTATAGCAGCTAGGCTGCTGGTGCAACTAGGCTAGCTTCGACCCCTGG QLQLVESGGGLVQAGGSLRLSCAASGRTDSRYTMGWFRQAPGKEREIVAQISPFGGNQYYADSVKGRFTISRDNAKNTVYLQMNSLKAEDTAVYYCYAEGPGRWVAGTWTRDYWGQGTQVTISS_ ... ... ... ... ... ... ... ... In the above example we specified particular columns to export. To export all columns one can use simply: > mixcr exportClones \\ --split-by-tag cell \\ -tag cell \\ -cellGroup \\ -uniqueTagCount UMI \\ -p full \\ clones.clns \\ clones.tsv","title":"Single cell libraries"},{"location":"mixcr/reference/mixcr-export/#export-contigs-with-imputation","text":"When V-D-J contigs assembled with assembleContigs does not cover all gene features, it still might be useful to impute non covered parts from germline (for example for the purposes of synthesis). Typically, there may be uncovered parts in VDJRegion for example due to long CDR3 region and non-overlapping R1 or R2, or in case of fragmented data (RNA-Seq or 10x single cell). > mixcr exportClones \\ -aaFeatureImputed VDJRegion \\ -nFeatureImputed VDJRegion \\ -p min \\ clones.clns clones.tsv MiXCR allows to export gene features with imputation using -nFeatureImputed and -aaFeatureImputed export fields. The resulting sequences will have imputed letters in lower case: cloneId aaSeqImputedVDJRegion nSeqImputedVDJRegion cloneCount cloneFraction allVHitsWithScore ... 1550 evqlvesggglvqpggslrlscaasgftfssyamswvrqapgkgpEXXAAITSGGIXXXXXX RAXHHLQRQCQR E GVSANEQPET GHGRLLLRSGRI*ARLLGPGDPGHCLL_ gaggtgcagctggtggagtctgggggaggcttggtgcagcctggggggtctctgagactctcctgtgcagcctctggattcaccttcagtagctatgccatgagctgggtccgccaggctccaggaaaggggcccgAGTNGGNCGCAGCTATTACTAGTGGTGGTATCNNAANATGNNANNCNNCNTGAAGGGCNNTTCACCATCTCCAGAGACAATGTCAACGCTAAGAATAGGGTGTATCTGCAAATGAACAGCCTGAAACCTGAGGACACGGCCGTCTATTACTGCGAAGCGGTAGGATATGAGCTCGACTACTGGGGCCAGGGGACCCAGGTCACTGTCTCCTCAG 14959.662854752114 0.009713738792425266 IGHV3-3*00(1386.3) ... 2739 QVQLVETGGALVHPGGSLRLSCVVSGFT IIMP PGSARSRGRSVRGSXVLvvvmvahtmqtp radspspettprtrcick ta*nlrtrpfiTAQQPTSGRAMKVVSTRNSMITGARGPRSPSLQ CAGGTGCAGCTCGTGGAGACGGGTGGAGCGTTGGTGCACCCTGGGGGGTCGCTGAGACTCTCCTGTGTCGTCTCTGGATTCACTTGAATTATTATGCCATAGCCTGGTTCCGCCAGGTCCCGGGGAAGGAGCGTGAGGGGATCTCANGTATTAGtagtagtgatggtagcacatactatgcagactccgtgaagggccgattcaccatctccagagacaacgccaagaacacggtgtatctgcaaatgaacagcctgaaacctgaggacacggccgtttattacTGCGCAGCAGCCCACTTCGGGGCGTGCTATGAAGGTAGTTTCGACGCGAAACTCTATGATCACTGGGGCCAGGGGACCCAGGTCACCGTCTCTTCAG 17367.706440640646 0.011277350661302765 IGHV3-3*00(1386.3) ... 2940 QVQLVEXGGGLXQXGGSLKLSCAASGLTFDDYAIGWFRQVPGKXREGIXCVGSRGXxyyadsvXXXXXXXIXXXXXTXSLDLNSLIPEDTATYQCAAVTSDLGCTHYMLQNDIEYDYWGRGTQVTVST_ CAGGTGCAGCTCGTGGAGNCNGGGGGAGGNTTGGNGCAGNCTGGGGGGTCTCTGAAACTCTCCTGTGCAGCCTCTGGACTCACTTTCGACGATTATGCCATCGGCTGGTTCCGNCAGGTTCCAGGGAAGNAGCGCGAGGGGATCTGNTGTGTCGGTAGTCGAGGNNNCNCatactatgcagactccgtgaANNNNNGATTNNNCATNNCCATTGNCANCGNCAANNACACGNAGTCTCTGGATTTGAACAGCCTGATCCCTGAGGACACGGCCACATATCAATGTGCGGCAGTCACCTCGGACCTGGGATGTACGCACTATATGTTGCAGAATGATATCGAGTATGACTACTGGGGCCGGGGGACCCAGGTCACCGTCTCGACAG 157166.58695588264 0.10205277935802338 IGHV3-8*00(887.9) ... 3283 qvqlvesggglvqaggslrlscaasgrtfssyamgwfrqapgkerefvaaiswXGSTXXYADSAKDRFVISRDNGKNMAYLXLTSLKPDDTGIYLCAADIQCQTDPRHLPFGSWGWGQGTQVTVSS_ caggtgcagctggtagagtctgggggaggattggtgcaggctgggggctctctgagactctcctgtgcagcctctggacgcaccttcagtagctatgccatgggctggttccgccaggctccagggaaggagcgtgagtttgtagcagctattagctggANAGGTTCAACCANGNACTATGCCGACTCCGCGAAGGACCGATTCGTCATTTCCAGAGACAACGGCAAGAACATGGCGTACTTGTANTTAACCAGCCTGAAGCCTGACGACACTGGCATTTATCTCTGTGCGGCGGACATCCAGTGTCAGACTGACCCCCGTCATCTCCCTTTTGGTTCCTGGGGTTGGGGCCAGGGGACGCAAGTCACCGTCTCCTCGG 113072.80475962501 0.07342142002972953 IGHV3-8*00(887.9) ... One can also use default presets with imputation (all gene features will use imputation option): > mixcr exportClones \\ -aaFeatureImputed VDJRegion \\ -nFeatureImputed VDJRegion \\ -p fullImputed \\ clones.clns clones.tsv","title":"Export contigs with imputation"},{"location":"mixcr/reference/mixcr-export/#export-fields","text":"","title":"Export fields"},{"location":"mixcr/reference/mixcr-export/#common-fields","text":"These fields available for both exportAlignments and exportClones : -targets Number of targets -vHit Best V hit -dHit Best D hit -jHit Best J hit -cHit Best C hit -vGene Best V hit gene name (e.g. TRBV12-3 for TRBV12-3*00) -dGene Best D hit gene name (e.g. TRBV12-3 for TRBV12-3*00) -jGene Best J hit gene name (e.g. TRBV12-3 for TRBV12-3*00) -cGene Best C hit gene name (e.g. TRBV12-3 for TRBV12-3*00) -vFamily Best V hit family name (e.g. TRBV12 for TRBV12-3*00) -dFamily Best D hit family name (e.g. TRBV12 for TRBV12-3*00) -jFamily Best J hit family name (e.g. TRBV12 for TRBV12-3*00) -cFamily Best C hit family name (e.g. TRBV12 for TRBV12-3*00) -vHitScore Score for best V hit -dHitScore Score for best D hit -jHitScore Score for best J hit -cHitScore Score for best C hit -vHitsWithScore All V hits with score -dHitsWithScore All D hits with score -jHitsWithScore All J hits with score -cHitsWithScore All C hits with score -vHits All V hits -dHits All D hits -jHits All J hits -cHits All C hits -vGenes All V gene names (e.g. TRBV12-3 for TRBV12-3*00) -dGenes All D gene names (e.g. TRBV12-3 for TRBV12-3*00) -jGenes All J gene names (e.g. TRBV12-3 for TRBV12-3*00) -cGenes All C gene names (e.g. TRBV12-3 for TRBV12-3*00) -vFamilies All V gene family anmes (e.g. TRBV12 for TRBV12-3*00) -dFamilies All D gene family anmes (e.g. TRBV12 for TRBV12-3*00) -jFamilies All J gene family anmes (e.g. TRBV12 for TRBV12-3*00) -cFamilies All C gene family anmes (e.g. TRBV12 for TRBV12-3*00) -vAlignment Best V alignment -dAlignment Best D alignment -jAlignment Best J alignment -cAlignment Best C alignment -vAlignments All V alignments -dAlignments All D alignments -jAlignments All J alignments -cAlignments All C alignments -nFeature <gene_feature> Nucleotide sequence of specified gene feature -qFeature <gene_feature> Quality string of specified gene feature -aaFeature <gene_feature> Amino acid sequence of specified gene feature -nFeatureImputed <gene_feature> Nucleotide sequence of specified gene feature using letters from germline (marked lowercase) for uncovered regions -aaFeatureImputed <gene_feature> Amino acid sequence of specified gene feature using letters from germline (marked lowercase) for uncovered regions -minFeatureQuality <gene_feature> Minimal quality of specified gene feature -avrgFeatureQuality <gene_feature> Average quality of specified gene feature -lengthOf <gene_feature> Length of specified gene feature. -nMutations <gene_feature> Extract nucleotide mutations for specific gene feature; relative to germline sequence. -nMutationsRelative <gene_feature> <relative_to_gene_feature> Extract nucleotide mutations for specific gene feature relative to another feature. -aaMutations <gene_feature> Extract amino acid mutations for specific gene feature -aaMutationsRelative <gene_feature> <relative_to_gene_feature> Extract amino acid mutations for specific gene feature relative to another feature. -mutationsDetailed <gene_feature> Detailed list of nucleotide and corresponding amino acid mutations. Format <nt_mutation>:<aa_mutation_individual>:<aa_mutation_cumulative> , where <aa_mutation_individual> is an expected amino acid mutation given no other mutations have occurred, and <aa_mutation_cumulative> amino acid mutation is the observed amino acid mutation combining effect from all others. -mutationsDetailedRelative <gene_feature> <relative_to_gene_feature> Detailed list of nucleotide and corresponding amino acid mutations written, positions relative to specified gene feature. Format : : , where is an expected amino acid mutation given no other mutations have occurred, and amino acid mutation is the observed amino acid mutation combining effect from all other. WARNING: format may change in following versions. -positionInReferenceOf <reference_point> Position of specified reference point inside reference sequences (clonal sequence / read sequence). -positionOf <reference_point> Position of specified reference point inside target sequences (clonal sequence / read sequence). -defaultAnchorPoints Outputs a list of default reference points (like CDR2Begin, FR4End, etc. see documentation bellow for the full list and formatting) -targetSequences Aligned sequences (targets), separated with comma -targetQualities Aligned sequence (target) qualities, separated with comma -vIdentityPercents V alignment identity percents -dIdentityPercents D alignment identity percents -jIdentityPercents J alignment identity percents -cIdentityPercents C alignment identity percents -vBestIdentityPercent V best alignment identity percent -dBestIdentityPercent D best alignment identity percent -jBestIdentityPercent J best alignment identity percent -cBestIdentityPercent C best alignment identity percent -chains Chains -topChains Top chains -tagCounts All tags with counts -tag <tag> Tag value (i.e. cell barcode or UMI sequence) -uniqueTagCount <tag> Unique tag count","title":"Common fields"},{"location":"mixcr/reference/mixcr-export/#alignment-specific-fields","text":"The following fields are only available for exportAlignments : -readIds Id(s) of read(s) corresponding to alignment -descrsR1 Description lines from initial .fasta or .fastq file for R1 reads (only available if -OsaveOriginalReads= true was used in align command) -descrsR2 Description lines from initial .fastq file for R2 reads (only available if -OsaveOriginalReads=true was used in alig n command) -readHistory Read history -cloneId To which clone alignment was attached (make sure using .clna file as input for exportAlignments ) -cloneIdWithMappingType To which clone alignment was attached with additional info on mapping type (make sure using .clna file as input for exportAlignments )","title":"Alignment-specific fields"},{"location":"mixcr/reference/mixcr-export/#clonotype-specific-fields","text":"The following fields are only available for exportClones : -cloneId Unique clone identifier -count Clone count -fraction Clone fraction -tagFractions All tags with fractions -cellGroup Cell group (for single cell analysis)","title":"Clonotype-specific fields"},{"location":"mixcr/reference/mixcr-export/#default-anchor-point-positions","text":"Positions of anchor points produced by the -defaultAnchorPoints option are outputted as a colon separated list. If an anchor point is not covered by the target sequence nothing is printed for it, but flanking colon symbols are preserved to maintain positions in array. See example: :::::::::108:117:125:152:186:213:243:244: If there are several target sequences (e.g. paired-end reads or multi-part clonal sequnce), an array is outputted for each target sequence. In this case arrays are separated by a comma: 2 :61:107:107:118:::::::::::::,:::::::::103:112:120:147:181:208:238:239: Even if there are no anchor points in one of the parts: :::::::::::::::::,:::::::::108:117:125:152:186:213:243:244: The following table shows the correspondence between anchor points and positions in the default anchor point array: Anchors point Zero-based position One-based position V5UTRBeginTrimmed 0 1 V5UTREnd / L1Begin 1 2 L1End / VIntronBegin 2 3 VIntronEnd / L2Begin 3 4 L2End / FR1Begin 4 5 FR1End / CDR1Begin 5 6 CDR1End / FR2Begin 6 7 FR2End / CDR2Begin 7 8 CDR2End / FR3Begin 8 9 FR3End / CDR3Begin 9 10 Number of 3\u2019 V deletions (negative value), or length of 3\u2019 V P-segment (positive value) 10 11 VEndTrimmed, next position after last aligned nucleotide of V gene 11 12 DBeginTrimmed, position of first aligned nucleotide of D gene 12 13 Number of 5\u2019 D deletions (negative value), or length of 5\u2019 D P-segment (positive value) 13 14 Number of 3\u2019 D deletions (negative value), or length of 3\u2019 D P-segment (positive value) 14 15 DEndTrimmed, next position after last aligned nucleotide of D gene 15 16 JBeginTrimmed, position of first aligned nucleotide of J gene 16 17 Number of 3\u2019 J deletions (negative value), or length of 3\u2019 J P-segment (positive value) 17 18 CDR3End / FR4Begin 18 19 FR4End 19 20 CBegin 20 21 CExon1End 21 22","title":"Default anchor point positions"},{"location":"mixcr/reference/mixcr-exportAirr/","text":"mixcr exportAirr Exports alignments from .vdjca file or clonotypes from .clns / .clna files in AIRR format . mixcr exportAirr [-f] [-n] [--from-alignment] [--imgt-gaps] [--target] input.(vdjca|clns|clna) output.tsv Command line options: -n , --limit limit number of filtered alignments; no more than N alignments will be outputted --from-alignment , -a get fields like fwr1, cdr2, etc.. from alignment --imgt-gaps , -g if this option is specified, alignment fields will be padded with IMGT-style gaps.` --target <targetId> , -t <targetId> target id (use -1 to export from the target containing CDR3) For some downstream analysis tools one also should prepare gapped reference using --imgt option for repseqio : # from built-in MiXCR reference > repseqio fasta --imgt \\ --species hs \\ -g 'VRegion' \\ default \\ vregion_gapped.fasta # from IMGT reference > repseqio fasta --imgt \\ --species hs \\ -g 'VRegion' \\ imgt.202209-1.sv7.json.gz \\ vregion_gapped.fasta","title":"exportAirr"},{"location":"mixcr/reference/mixcr-exportAirr/#mixcr-exportairr","text":"Exports alignments from .vdjca file or clonotypes from .clns / .clna files in AIRR format . mixcr exportAirr [-f] [-n] [--from-alignment] [--imgt-gaps] [--target] input.(vdjca|clns|clna) output.tsv Command line options: -n , --limit limit number of filtered alignments; no more than N alignments will be outputted --from-alignment , -a get fields like fwr1, cdr2, etc.. from alignment --imgt-gaps , -g if this option is specified, alignment fields will be padded with IMGT-style gaps.` --target <targetId> , -t <targetId> target id (use -1 to export from the target containing CDR3) For some downstream analysis tools one also should prepare gapped reference using --imgt option for repseqio : # from built-in MiXCR reference > repseqio fasta --imgt \\ --species hs \\ -g 'VRegion' \\ default \\ vregion_gapped.fasta # from IMGT reference > repseqio fasta --imgt \\ --species hs \\ -g 'VRegion' \\ imgt.202209-1.sv7.json.gz \\ vregion_gapped.fasta","title":"mixcr exportAirr"},{"location":"mixcr/reference/mixcr-exportClonesOverlap/","text":"mixcr exportClonesOverlap Exports overlap table for a given list of clonesets. mixcr exportClonesOverlap [-p] [--chains <chains>]... [--criteria <overlapCriteria>] [--only-productive] [<exportField>]... sample1.clnx sample2.clnx [sampleN.clnx]... overlap.tsv The resulting tab-delimited .tsv table contains: \"overlap\" columns corresponding to the criteria used for overlap and common for all samples other export columns that are not used in the overlap for each of the sample individually Since the resulting .tsv table may be rather large, MiXCR by default exports only overlap columns and clonotype counts and fractions in each of the samples. One can specify additional columns to export per cloneset using standard MiXCR notation used in exportClones command. Other command line options are: --chains <chains> output overlap for specified chains only; if multiple chains are specified, results per each chains will be exported in separate files --criteria <overlapCriteria> overlap criteria. It allows to specify gene feature for overlap (nucleotide or amino acid), and optionally use V and J hits. Examples: CDR3|AA|V|J (overlap by a.a. CDR3 and V and J), VDJRegion|AA (overlap by a.a. VDJRegion ), CDR3|NT|V (overlap by nt CDR3 and V). --only-productive drop clonotypes with out-of-frame CDR3 sequence or CDR3 containing stop codon Example Build and export overlap for TRA/TRD chain: > mixcr exportClonesOverlap \\ --chains TRAD \\ --only-productive \\ --criteria \"CDR3|AA|V|J\" \\ clonesets/*.clns overlapTable.tsv The resulting table: aaSeqCDR3 vGene jGene nSamples sample1_countAggregated sample2_countAggregated ... CAVRDSNYQLIW TRAV1-2*00 TRAJ33*00 23 12387 0 ... CAVKDSNYQLIW TRAV1-2*00 TRAJ33*00 19 12 234 ... ... ... ... ... ... ... ... Here column nSamples is number of samples containing the clonotype and columns samplei_countAggregated \u2014 sum of the counts of all clonotypes in samplei with this amino acid sequence, V- and J-gene assignments.","title":"exportClonesOverlap"},{"location":"mixcr/reference/mixcr-exportClonesOverlap/#mixcr-exportclonesoverlap","text":"Exports overlap table for a given list of clonesets. mixcr exportClonesOverlap [-p] [--chains <chains>]... [--criteria <overlapCriteria>] [--only-productive] [<exportField>]... sample1.clnx sample2.clnx [sampleN.clnx]... overlap.tsv The resulting tab-delimited .tsv table contains: \"overlap\" columns corresponding to the criteria used for overlap and common for all samples other export columns that are not used in the overlap for each of the sample individually Since the resulting .tsv table may be rather large, MiXCR by default exports only overlap columns and clonotype counts and fractions in each of the samples. One can specify additional columns to export per cloneset using standard MiXCR notation used in exportClones command. Other command line options are: --chains <chains> output overlap for specified chains only; if multiple chains are specified, results per each chains will be exported in separate files --criteria <overlapCriteria> overlap criteria. It allows to specify gene feature for overlap (nucleotide or amino acid), and optionally use V and J hits. Examples: CDR3|AA|V|J (overlap by a.a. CDR3 and V and J), VDJRegion|AA (overlap by a.a. VDJRegion ), CDR3|NT|V (overlap by nt CDR3 and V). --only-productive drop clonotypes with out-of-frame CDR3 sequence or CDR3 containing stop codon","title":"mixcr exportClonesOverlap"},{"location":"mixcr/reference/mixcr-exportClonesOverlap/#example","text":"Build and export overlap for TRA/TRD chain: > mixcr exportClonesOverlap \\ --chains TRAD \\ --only-productive \\ --criteria \"CDR3|AA|V|J\" \\ clonesets/*.clns overlapTable.tsv The resulting table: aaSeqCDR3 vGene jGene nSamples sample1_countAggregated sample2_countAggregated ... CAVRDSNYQLIW TRAV1-2*00 TRAJ33*00 23 12387 0 ... CAVKDSNYQLIW TRAV1-2*00 TRAJ33*00 19 12 234 ... ... ... ... ... ... ... ... Here column nSamples is number of samples containing the clonotype and columns samplei_countAggregated \u2014 sum of the counts of all clonotypes in samplei with this amino acid sequence, V- and J-gene assignments.","title":"Example"},{"location":"mixcr/reference/mixcr-exportPlots/","text":"mixcr exportPlots A set of routines for graphical export of postanalysis results. MiXCR supports graphical export in PDF, SVG, EPS, PNG and JPEG formats. Diversity and CDR3 metrics mixcr exportPlots (diversity|cdr3metrics) [-f] [--chains <chains>]... [--metadata <file>] [--metric <metric>]... [--filter <meta(|>|>=|=|<=|<)value>]... [--primary-group <meta>] [--primary-group-values <value>[,<value>...]]... [--secondary-group <meta>] [--secondary-group-values <value>[,<value>...]]... [--facet-by <facetBy>] [--plot-type <plotType>] [--hide-overall-p-value] [--ref-group <refGroup>] [--pairwise-comparisons] [--hide-non-significant] [--show-significance] [--method <method>] [--p-adjust-method <method>] [--width <width>] [--height <height>] individual.pa.json.gz plot.(pdf|svg|eps|png|jpg) Exports diversity or CDR3 metrics visualization plots from the individual postanalysis results. When exporting in PDF format the resulting file will contain multiple pages: one page per metric. For exaporint in other formats one need to specify --metrics <metric> option to export one particular metric. --chains <chains> export only for specified immunological chains --metadata <file> supply additional metadata .tsv or .csv table --metric <metric>... output only specified list of metrics: for cdr3metrics possible values are: cdr3lenNT , cdr3lenAA , ndnLenNT , addedNNT , strength , hydrophobicity , surface , volume , charge for diversity : observed , shannonWiener , chao1 , normalizedShannonWienerIndex , inverseSimpsonIndex , giniIndex , d50 , efronThisted --filter <meta(|>|>=|=|<=|<)value>... filter samples to put on a plot by their metadata values. Filter allows equality ( species=cat ) or arithmetic comparison ( age>=10 ) etc. --primary-group <meta> specify metadata column used to group datasets --primary-group-values <value>[,<value>...]... set particular order of primary group values --secondary-group <meta> specify metadata column used to apply secondary grouping of datasets (if primary grouping is already applied) --secondary-group-values <value>[,<value>...]... set particular order of secondary group values --facet-by <meta> specify metadata column to use for plotting facets --plot-type <plotType> possible values: boxplot , boxplot-bindot , boxplot-jitter , lineplot , lineplot-bindot , lineplot-jitter , violin , violin-bindot , barplot , barplot-stacked , scatter --hide-overall-p-value do not show overall p-value on the plot --ref-group <refGroup> specify reference group for compare means statistics --pairwise-comparisons show all pairwise p-values --hide-non-significant do not show non-significant p-values --show-significance show significance levels instead of p-values ( ns for p-value >= 0.05, *** for p-value < 0.0001, ** for p-value < 0.001, * in other case) --method <method> statistical test method. Available methods: Wilcoxon (default), ANOVA , TTest , KruskalWallis , KolmogorovSmirnov --p-adjust-method <method> p-value correction method. Available methods: Holm (default), BenjaminiHochberg , BenjaminiYekutieli , Bonferroni , Hochberg , Hommel , none --width <width> width of a plot --height <height> height of a plot Examples Use primary grouping and facets: > mixcr exportPlots diversity -f \\ --plot-type libeplot-bindot \\ --primary-group Time \\ --primary-group-values T0,M1,M2 \\ --facet-by Marker \\ pa/i.json.gz \\ plots/diversity_facets.pdf Use secondary grouping: > mixcr exportPlots diversity -f \\ --primary-group Marker \\ --secondary-group Time \\ --secondary-group-values T0,M1,M2 \\ pa/i.json.gz \\ plots/pdf [TODO more examples] Gene segment usage mixcr exportPlots (vUsage|jUsage|isotypeUsage|vjUsage) [-f] [--chains <chains>]... [--metadata <metadata>] [--filter <filterByMetadata>]... [--color-key <colorKey>]... [--no-genes-dendro] [--no-samples-dendro] [--palette <palette>] [--h-labels-size <hLabelsSize>] [--v-labels-size <vLabelsSize>] [--width <width>] [--height <height>] individual.pa.json.gz plot.(pdf|svg|eps|png|jpg) Exports gene segment usage heatmap plots from the individual postanalysis results. --chains <chains> export only for specified immunological chains --metadata <file> supply additional metadata .tsv or .csv table --filter <meta(|>|>=|=|<=|<)value>... filter samples to put on a plot by their metadata values. Filter allows equality ( species=cat ) or arithmetic comparison ( age>=10 ) etc. --color-key <meta> add color key layer to the heatmap --no-genes-dendro do not plot genes dendrogram --no-samples-dendro do not plot samples dendrogram palette <palette> specify color palette to be used: density (default), diverging , viridis2magma , lime2rose , blue2red , teal2red , softSpectral , sequential , viridis , magma , sunset , rainbow , salinity --h-labels-size size of horizontal labels in tile units --v-labels-size size of vertical labels in tile units --width <width> width of a plot --height <height> height of a plot Examples Export Variable gene segment usage plot and add color key: mixcr exportPlots vUsage -f \\ --color-key Patient \\ pa/i.json.gz \\ plots/vUsage.svg Export Joining gene segment usage plot and specify another palette: mixcr exportPlots jUsage -f \\ --palette magma \\ --color-key Marker \\ pa/i.json.gz \\ plots/jUsage.svg Overlap mixcr exportPlots overlap [-f] [--chains <chains>]... [--metadata <metadata>] [--filter <filterByMetadata>]... [--color-key <colorKey>]... [--no-dendro] [--fill-diagonal] [--palette <palette>] [--h-labels-size <hLabelsSize>] [--v-labels-size <vLabelsSize>] [--width <width>] [--height <height>] individual.pa.json.gz plot.(pdf|svg|eps|png|jpg) Exports pairwise distance metrics heatmap plots from the overlap postanalysis results. --chains <chains> export only for specified immunological chains --metadata <file> supply additional metadata .tsv or .csv table --filter <meta(|>|>=|=|<=|<)value>... filter samples to put on a plot by their metadata values. Filter allows equality ( species=cat ) or arithmetic comparison ( age>=10 ) etc. --color-key <meta> add color key layer to the heatmap. One may write --color-key x_meta to draw color key horizontally (default) or --color-key y_meta to draw vertically. --metric <metric> The following values are supported : sharedClonotypes, f1Index, f2Index, jaccardIndex, pearson, pearsonAll --no-dendro do not plot dendrogram --fill-diagonal fill diagonal values palette <palette> specify color palette to be used: density (default), diverging , viridis2magma , lime2rose , blue2red , teal2red , softSpectral , sequential , viridis , magma , sunset , rainbow , salinity --h-labels-size size of horizontal labels in tile units --v-labels-size size of vertical labels in tile units --width <width> width of a plot --height <height> height of a plot Examples Export overlap with color key: > mixcr exportPlots overlap \\ --metric pearsonAll \\ --color-key Patient \\ pa/o.json.gz \\ plots/overlap.pdf","title":"exportPlots"},{"location":"mixcr/reference/mixcr-exportPlots/#mixcr-exportplots","text":"A set of routines for graphical export of postanalysis results. MiXCR supports graphical export in PDF, SVG, EPS, PNG and JPEG formats.","title":"mixcr exportPlots"},{"location":"mixcr/reference/mixcr-exportPlots/#diversity-and-cdr3-metrics","text":"mixcr exportPlots (diversity|cdr3metrics) [-f] [--chains <chains>]... [--metadata <file>] [--metric <metric>]... [--filter <meta(|>|>=|=|<=|<)value>]... [--primary-group <meta>] [--primary-group-values <value>[,<value>...]]... [--secondary-group <meta>] [--secondary-group-values <value>[,<value>...]]... [--facet-by <facetBy>] [--plot-type <plotType>] [--hide-overall-p-value] [--ref-group <refGroup>] [--pairwise-comparisons] [--hide-non-significant] [--show-significance] [--method <method>] [--p-adjust-method <method>] [--width <width>] [--height <height>] individual.pa.json.gz plot.(pdf|svg|eps|png|jpg) Exports diversity or CDR3 metrics visualization plots from the individual postanalysis results. When exporting in PDF format the resulting file will contain multiple pages: one page per metric. For exaporint in other formats one need to specify --metrics <metric> option to export one particular metric. --chains <chains> export only for specified immunological chains --metadata <file> supply additional metadata .tsv or .csv table --metric <metric>... output only specified list of metrics: for cdr3metrics possible values are: cdr3lenNT , cdr3lenAA , ndnLenNT , addedNNT , strength , hydrophobicity , surface , volume , charge for diversity : observed , shannonWiener , chao1 , normalizedShannonWienerIndex , inverseSimpsonIndex , giniIndex , d50 , efronThisted --filter <meta(|>|>=|=|<=|<)value>... filter samples to put on a plot by their metadata values. Filter allows equality ( species=cat ) or arithmetic comparison ( age>=10 ) etc. --primary-group <meta> specify metadata column used to group datasets --primary-group-values <value>[,<value>...]... set particular order of primary group values --secondary-group <meta> specify metadata column used to apply secondary grouping of datasets (if primary grouping is already applied) --secondary-group-values <value>[,<value>...]... set particular order of secondary group values --facet-by <meta> specify metadata column to use for plotting facets --plot-type <plotType> possible values: boxplot , boxplot-bindot , boxplot-jitter , lineplot , lineplot-bindot , lineplot-jitter , violin , violin-bindot , barplot , barplot-stacked , scatter --hide-overall-p-value do not show overall p-value on the plot --ref-group <refGroup> specify reference group for compare means statistics --pairwise-comparisons show all pairwise p-values --hide-non-significant do not show non-significant p-values --show-significance show significance levels instead of p-values ( ns for p-value >= 0.05, *** for p-value < 0.0001, ** for p-value < 0.001, * in other case) --method <method> statistical test method. Available methods: Wilcoxon (default), ANOVA , TTest , KruskalWallis , KolmogorovSmirnov --p-adjust-method <method> p-value correction method. Available methods: Holm (default), BenjaminiHochberg , BenjaminiYekutieli , Bonferroni , Hochberg , Hommel , none --width <width> width of a plot --height <height> height of a plot","title":"Diversity and CDR3 metrics"},{"location":"mixcr/reference/mixcr-exportPlots/#examples","text":"Use primary grouping and facets: > mixcr exportPlots diversity -f \\ --plot-type libeplot-bindot \\ --primary-group Time \\ --primary-group-values T0,M1,M2 \\ --facet-by Marker \\ pa/i.json.gz \\ plots/diversity_facets.pdf Use secondary grouping: > mixcr exportPlots diversity -f \\ --primary-group Marker \\ --secondary-group Time \\ --secondary-group-values T0,M1,M2 \\ pa/i.json.gz \\ plots/pdf [TODO more examples]","title":"Examples"},{"location":"mixcr/reference/mixcr-exportPlots/#gene-segment-usage","text":"mixcr exportPlots (vUsage|jUsage|isotypeUsage|vjUsage) [-f] [--chains <chains>]... [--metadata <metadata>] [--filter <filterByMetadata>]... [--color-key <colorKey>]... [--no-genes-dendro] [--no-samples-dendro] [--palette <palette>] [--h-labels-size <hLabelsSize>] [--v-labels-size <vLabelsSize>] [--width <width>] [--height <height>] individual.pa.json.gz plot.(pdf|svg|eps|png|jpg) Exports gene segment usage heatmap plots from the individual postanalysis results. --chains <chains> export only for specified immunological chains --metadata <file> supply additional metadata .tsv or .csv table --filter <meta(|>|>=|=|<=|<)value>... filter samples to put on a plot by their metadata values. Filter allows equality ( species=cat ) or arithmetic comparison ( age>=10 ) etc. --color-key <meta> add color key layer to the heatmap --no-genes-dendro do not plot genes dendrogram --no-samples-dendro do not plot samples dendrogram palette <palette> specify color palette to be used: density (default), diverging , viridis2magma , lime2rose , blue2red , teal2red , softSpectral , sequential , viridis , magma , sunset , rainbow , salinity --h-labels-size size of horizontal labels in tile units --v-labels-size size of vertical labels in tile units --width <width> width of a plot --height <height> height of a plot","title":"Gene segment usage"},{"location":"mixcr/reference/mixcr-exportPlots/#examples_1","text":"Export Variable gene segment usage plot and add color key: mixcr exportPlots vUsage -f \\ --color-key Patient \\ pa/i.json.gz \\ plots/vUsage.svg Export Joining gene segment usage plot and specify another palette: mixcr exportPlots jUsage -f \\ --palette magma \\ --color-key Marker \\ pa/i.json.gz \\ plots/jUsage.svg","title":"Examples"},{"location":"mixcr/reference/mixcr-exportPlots/#overlap","text":"mixcr exportPlots overlap [-f] [--chains <chains>]... [--metadata <metadata>] [--filter <filterByMetadata>]... [--color-key <colorKey>]... [--no-dendro] [--fill-diagonal] [--palette <palette>] [--h-labels-size <hLabelsSize>] [--v-labels-size <vLabelsSize>] [--width <width>] [--height <height>] individual.pa.json.gz plot.(pdf|svg|eps|png|jpg) Exports pairwise distance metrics heatmap plots from the overlap postanalysis results. --chains <chains> export only for specified immunological chains --metadata <file> supply additional metadata .tsv or .csv table --filter <meta(|>|>=|=|<=|<)value>... filter samples to put on a plot by their metadata values. Filter allows equality ( species=cat ) or arithmetic comparison ( age>=10 ) etc. --color-key <meta> add color key layer to the heatmap. One may write --color-key x_meta to draw color key horizontally (default) or --color-key y_meta to draw vertically. --metric <metric> The following values are supported : sharedClonotypes, f1Index, f2Index, jaccardIndex, pearson, pearsonAll --no-dendro do not plot dendrogram --fill-diagonal fill diagonal values palette <palette> specify color palette to be used: density (default), diverging , viridis2magma , lime2rose , blue2red , teal2red , softSpectral , sequential , viridis , magma , sunset , rainbow , salinity --h-labels-size size of horizontal labels in tile units --v-labels-size size of vertical labels in tile units --width <width> width of a plot --height <height> height of a plot","title":"Overlap"},{"location":"mixcr/reference/mixcr-exportPlots/#examples_2","text":"Export overlap with color key: > mixcr exportPlots overlap \\ --metric pearsonAll \\ --color-key Patient \\ pa/o.json.gz \\ plots/overlap.pdf","title":"Examples"},{"location":"mixcr/reference/mixcr-exportPreprocTables/","text":"mixcr exportPreprocTables Export postanalysis preprocessing summary tables in a tabular form. mixcr exportPreprocTables [-f] [--chains <chains>]... pa.json.gz dir/pa.preproc.(tsv|csv) Allows to export in tab-delimited ( .tsv ) or coma-separated ( .csv ) formats. Option --chains may be used to export results only for a specified chains. The output name is actually a pattern that is used to export different chains into separate files. For example exporting overlap metrics with the following command: > mixcr exportPreprocTables pa/o.pa.json pa/o.preproc.tsv will produce the following files in the output: > ls preproc/* o.preproc.IGH.tsv o.preproc.IGKL.tsv o.preproc.TRAD.tsv o.preproc.TRB.tsv o.preproc.TRG.tsv","title":"exportPreprocTables"},{"location":"mixcr/reference/mixcr-exportPreprocTables/#mixcr-exportpreproctables","text":"Export postanalysis preprocessing summary tables in a tabular form. mixcr exportPreprocTables [-f] [--chains <chains>]... pa.json.gz dir/pa.preproc.(tsv|csv) Allows to export in tab-delimited ( .tsv ) or coma-separated ( .csv ) formats. Option --chains may be used to export results only for a specified chains. The output name is actually a pattern that is used to export different chains into separate files. For example exporting overlap metrics with the following command: > mixcr exportPreprocTables pa/o.pa.json pa/o.preproc.tsv will produce the following files in the output: > ls preproc/* o.preproc.IGH.tsv o.preproc.IGKL.tsv o.preproc.TRAD.tsv o.preproc.TRB.tsv o.preproc.TRG.tsv","title":"mixcr exportPreprocTables"},{"location":"mixcr/reference/mixcr-exportPretty/","text":"Exporting formatted alignments and clonotypes MiXCR is able to export alignments and clonotypes as pretty formatted human-readable text for manual analysis. This is useful both to inspect alignments and to facilitate optimization of analysis parameters and library preparation protocol. Raw alignments mixcr exportAlignmentsPretty [-dft] [-n <limitAfter>] [-s <skipAfter>] [-b <limitBefore>] [-e <cdr3Equals>] [-c <chain>] [-g <feature>] [-r <readContains>] [--alignment-idx <alignmentIdx>]... [--clone-ids <cloneIds>]... [-i <readIds>]... [--verbose] input.vdjca [output.txt] Exports pretty formatted alignments from .vdjca file. -n , --limit <limitAfter> limit number of filtered alignments; no more than N alignments will be outputted -s , --skip <skipAfter> number of output alignments to skip -b , --limit-before <limitBefore> Limit number of alignments before filtering -e , --cdr3-equals <cdr3Equals> output only alignments where CDR3 exactly equals to given sequence -c , --chains <chain> filter export to a specific immunological chain -g , --feature <feature> output only alignments which contain a corresponding gene feature -r , --read-contains <readContains> output only alignments where target read contains a given substring --clone-ids <cloneIds> list of clone ids to export -i , --read-ids <readIds> list of read ids to export --alignment-idx <alignmentIdx> alignment index -t , --top output only top hits -d , --descriptions print read descriptions --verbose use a more verbose format for alignments Example: > mixcr exportAlignmentsPretty --skip 1000 --limit 10 input.vdjca this will export 10 results after skipping the first 1000 records. Skipping earlier records is often useful because the first sequences in a fastq file may have lower than average read quality. Pretty alignments have the following structure: >>> Read id: 1 5'UTR><L1 Quality 88888888888888888888888887888888888888888888888888888888888888888888888887888878 Target0 0 AAGGCCTTTCCACTTGGTGATCAGCACTGAGCACAGAGGACTCACCATGGAGTTGGGGCTGAGCTGGGTTTTCCTTGTTG 79 IGHV3-7*00 54 aaggcctttccacttggtgatcagcactgagcacagaggactcaccatggaAttggggctgagctgggttttccttgttg 133 L1><L2 L2><FR1 Quality 88888888887888888888888888888889989989989889999997999999989999999999999999999899 Target0 80 CTATTTTAGAAGGTGTCCAGTGTGAGGTGAAGTTGGTGGAGTCTGGGGGAGGCCTGGTCCAGCCTGGGGGGTCCCTGAGA 159 IGHV3-7*00 134 ctattttagaaggtgtccagtgtgaggtgCagCtggtggagtctgggggaggcTtggtccagcctggggggtccctgaga 213 FR1><CDR1 CDR1><FR2 Quality 999999999999999999999999999999999999999999999 9999999999999999999999999999999999 Target0 160 CTCTCCTGTGAAGCCTCCGGATTCACCTTTAGTAGTTATTGGATG-GCATGGGTCCGCCAGGGTCCAGGGCAGGGGCTGG 238 IGHV3-7*00 214 ctctcctgtgCagcctcTggattcacctttagtagCtattggatgAgc-tgggtccgccaggCtccagggAaggggctgg 292 FR2><CDR2 CDR2><FR3 Quality 99999999999999999999999999999999999799999999999999999999999999998999899898999999 Target0 239 AATGGGTGGGCAACATAAGGCCGGATGGAAGTGAGAGTTGGTACTTGGAGTCTGTGATGGGGCGATTCATGATATCTAGA 318 IGHV3-7*00 293 aGtgggtggCcaacataaAgcAAgatggaagtgagaAAtACtaTGtggaCtctgtgaAgggCcgattcaCCatCtcCaga 372 FR3><CDR3 Quality 99899899999999988989999889979988888888878878788888888878888888778788888888878888 Target0 319 GACAACGCCAAGAAGTCACTTTATCTGCAAATGGACAGCCTGAGAGTCGAGGACACGGCCGTCTATTATTGTGCGACTTC 398 IGHV3-7*00 373 gacaacgccaagaaCtcactGtatctgcaaatgAacagcctgagagCcgaggacacggcTgtGtattaCtgtgcga 448 IGHD3-10*00 12 ttc 14 CDR3><FR4 Quality 88888788888888888888888787788777887787777877777877787787877878788788777767778788 Target0 399 GGAGGAGCCGGAGGACTACTGGGGCCAGGGAGCCCTGGTCACCGTCTCCTCGGCTTCCACCAAGGGCCCATCGGTCTTCC 478 IGHD3-10*00 15 gg-ggag 20 IGHJ4*00 8 gactactggggccagggaAccctggtcaccgtctcctc 45 IGHG4*00 0 cttccaccaagggcccatcggtcttcc 26 IGHG3*00 0 cttccaccaagggcccatcggtcttcc 26 IGHG2*00 0 cCtccaccaagggcccatcggtcttcc 26 IGHG1*00 0 cCtccaccaagggcccatcggtcttcc 26 IGHGP*00 194 AgcCtccaccaagggcccatcggtcttcc 222 Quality 87370 Target0 479 CCTTG 483 IGHG4*00 27 ccCtg 31 IGHG3*00 27 ccCtg 31 IGHG2*00 27 ccCtg 31 IGHG1*00 27 ccCtg 31 IGHGP*00 223 ccCtg 227 Usage of the --verbose option will produce alignments in a slightly different format: >>> Read id: 12343 <--- Index of analysed read in input file >>> Target sequences (input sequences): Sequence0: <--- Read 1 from paired-end read Contains features: CDR1, VRegionTrimmed, L2, L, Intron, VLIntronL, FR1, Exon1, <--- Gene features VExon2Trimmed found in read 1 0 TCTTGGGGGATTCGGTGATCAGCACTGAACACAGAGGACTCACCATGGAGTTTGGGCTGAACTGGGTTTTCCTCGTTGCT 79 <--- Sequyence & quality FGGEGGGGGDG8F78CFC6CEFF<,CFG9EED,6,CFCC<EEGFG,CE:CCAFFGGC87CEF?A?FBC@FGGFG>B,FC9 of read 1 80 CTATTAAGAGGTGTCCAGTGTCAGGTGCAGCTGGTGGAGTCTGGGGGTGGCGTGTTCCAGCCTGGGGGGTCCGTGAGACT 159 F9,A,95AFE,B?,E,C,9AC<FGA<EE5??,A,A<:=:E,=B8C7+++8,++@+,885=D7:@8E+:5*1**11**++< 160 CTCCTGTGCAGCGTCGGGATGCACATCATGGAGCTATGGCCAGCCCTGGGTACGCCAGGCTACAGGCCACGGGCTGGAGG 239 <++*++0++2A:ECE5EC5**2@C+:++++++22*2:+29+*2***25/79*0299))*/)*0*0*.75)7:)1)1/))) 240 GGGTGCGTGGTAGATGGGAA 259 )9:.)))*1)12***-/).) Sequence1: <--- Read 2 from paired-end read Contains features: JCDR3Part, DCDR3Part, DJJunction, CDR2, JRegionTrimmed, CDR3, VDJunction, VJJunction, VCDR3Part, ShortCDR3, FR4, FR3 0 CGAGGCAAGAGGCTGGTGTGGGTGGCGGTTATATGGTATGGTGGAAGTAATAAACACTATGCAGACCCCGTGAAGGGCCG 79 **0*0**)2**/**5D7<15*9<5:1+*0:GF:=C>6A52++*:2+++FF>>3<++++++302**:**/<+**;:/**2+ 80 ATTCACCATCGCCAGAGACAATTCCAAGAACACGCTGTATCTGCAAATGAAGAGCCTGAGAGCCGAGGACACGGCTTTGT 159 +++<0***C:2+9GGFB?,5,4,+,2F<>FC=*,,C:>,=,@,,;3<@=,3,,<3,CF?=**<>@,?3,<<:3,CC,E,@ 160 ATTACTGTGCGAGAGGTCAACAGGGTGACTATGTCTACGGTAGGGACGTCGGGGGCCAAGGGACCACGGTCACCGTCTCC 239 ,@;FCF@+F@FGGF9FD,F>>+B:=,,=><GFCGGCFEGFF?+=B+7EF>+FFA,8F<E:,5+GDFFE,@F?,,7GGDFE 240 TCAGGGAGTGCATCCGCCCCAACCCTTTTCCCCCTCTCTGCGTTGATACCACTGGCAGCTC 300 C,FGGGEFCCGEEGGCFCC:8FGEGGGE@DFB-GFGGGGF@GFGFE<,GFCCFCAGC@CCC >>> Gene features that can be extracted from this (paired-)read: <--- For paired-end reads JCDR3Part, CDR1, VRegionTrimmed, L2, DCDR3Part, VDJTranscriptWithout5UTR, Exon2, L, some gene features DJJunction, Intron, FR2, CDR2, VDJRegion, JRegionTrimmed, CDR3, VDJunction, VJJunction, can be extracted by VLIntronL, FR1, VCDR3Part, ShortCDR3, Exon1, FR4, VExon2Trimmed, FR3 merging sequence information >>> Alignments with V gene: IGHV3-33*00 (total score = 1638.0) <--- Alignment of both reads with IGHV3-33 Alignment of Sequence0 (score = 899.0): <--- Alignment of IGHV3-33 with read 1 from paired-end read 65 ATTCGGTGATCAGCACTGAACACAGAGGACTCACCATGGAGTTTGGGCTGAGCTGGGTTTTCCTCGTTGCTCTTTTAAGA 144 <--- Germline ||||||||||||||||||||||||||||||||||||||||||||||||||| ||||||||||||||||||||| |||||| 9 ATTCGGTGATCAGCACTGAACACAGAGGACTCACCATGGAGTTTGGGCTGAACTGGGTTTTCCTCGTTGCTCTATTAAGA 88 <--- Read DG8F78CFC6CEFF<,CFG9EED,6,CFCC<EEGFG,CE:CCAFFGGC87CEF?A?FBC@FGGFG>B,FC9F9,A,95AF <--- Quality score 145 GGTGTCCAGTGTCAGGTGCAGCTGGTGGAGTCTGGGGGAGGCGTGGTCCAGCCTGGGAGGTCCCTGAGACTCTCCTGTGC 224 |||||||||||||||||||||||||||||||||||||| |||||| ||||||||||| ||||| |||||||||||||||| 89 GGTGTCCAGTGTCAGGTGCAGCTGGTGGAGTCTGGGGGTGGCGTGTTCCAGCCTGGGGGGTCCGTGAGACTCTCCTGTGC 168 E,B?,E,C,9AC<FGA<EE5??,A,A<:=:E,=B8C7+++8,++@+,885=D7:@8E+:5*1**11**++<<++*++0++ 225 AGCGTCTGGATTCACCTTCA-GTAGCTATGGCATGCACTGGGTCCGCCAGGCTCCAGGCAAGGGGCTGGAGTGGGTG 300 |||||| |||| || | ||| | ||||||||| || |||||| ||||||||| ||||| | ||||||||| ||||| 169 AGCGTCGGGATGCA-CATCATGGAGCTATGGCCAGCCCTGGGTACGCCAGGCTACAGGCCACGGGCTGGAGGGGGTG 244 2A:ECE5EC5**2@ C+:++++++22*2:+29+*2***25/79*0299))*/)*0*0*.75)7:)1)1/))))9:.) Alignment of Sequence1 (score = 739.0): <--- Alignment of IGHV3-33 with read 2 from paired-end read 279 AGGCAAGGGGCTGGAGTGGGTGGCAGTTATATGGTATGATGGAAGTAATAAATACTATGCAGACTCCGTGAAGGGCCGAT 358 ||||||| |||||| ||||||||| ||||||||||||| ||||||||||||| ||||||||||| ||||||||||||||| 2 AGGCAAGAGGCTGGTGTGGGTGGCGGTTATATGGTATGGTGGAAGTAATAAACACTATGCAGACCCCGTGAAGGGCCGAT 81 0*0**)2**/**5D7<15*9<5:1+*0:GF:=C>6A52++*:2+++FF>>3<++++++302**:**/<+**;:/**2+++ 359 TCACCATCTCCAGAGACAATTCCAAGAACACGCTGTATCTGCAAATGAACAGCCTGAGAGCCGAGGACACGGCTGTGTAT 438 |||||||| |||||||||||||||||||||||||||||||||||||||| |||||||||||||||||||||||| ||||| 82 TCACCATCGCCAGAGACAATTCCAAGAACACGCTGTATCTGCAAATGAAGAGCCTGAGAGCCGAGGACACGGCTTTGTAT 161 +<0***C:2+9GGFB?,5,4,+,2F<>FC=*,,C:>,=,@,,;3<@=,3,,<3,CF?=**<>@,?3,<<:3,CC,E,@,@ 439 TACTGTGCGAGAG 451 ||||||||||||| 162 TACTGTGCGAGAG 174 ;FCF@+F@FGGF9 IGHV3-30*00 (total score = 1582.0) <--- Alternative hit for V gene Alignment of Sequence0 (score = 885.0): 65 ATTCGGTGATCAGCACTGAACACAGAGGACTCACCATGGAGTTTGGGCTGAGCTGGGTTTTCCTCGTTGCTCTTTTAAGA 144 ||||||||||||||||||||||||||||||||||||||||||||||||||| ||||||||||||||||||||| |||||| 9 ATTCGGTGATCAGCACTGAACACAGAGGACTCACCATGGAGTTTGGGCTGAACTGGGTTTTCCTCGTTGCTCTATTAAGA 88 DG8F78CFC6CEFF<,CFG9EED,6,CFCC<EEGFG,CE:CCAFFGGC87CEF?A?FBC@FGGFG>B,FC9F9,A,95AF 145 GGTGTCCAGTGTCAGGTGCAGCTGGTGGAGTCTGGGGGAGGCGTGGTCCAGCCTGGGAGGTCCCTGAGACTCTCCTGTGC 224 |||||||||||||||||||||||||||||||||||||| |||||| ||||||||||| ||||| |||||||||||||||| 89 GGTGTCCAGTGTCAGGTGCAGCTGGTGGAGTCTGGGGGTGGCGTGTTCCAGCCTGGGGGGTCCGTGAGACTCTCCTGTGC 168 E,B?,E,C,9AC<FGA<EE5??,A,A<:=:E,=B8C7+++8,++@+,885=D7:@8E+:5*1**11**++<<++*++0++ 225 AGCCTCTGGATTCACCTTCA-GTAGCTATGGCATGCACTGGGTCCGCCAGGCTCCAGGCAAGGGGCTGGAGTGGGTG 300 ||| || |||| || | ||| | ||||||||| || |||||| ||||||||| ||||| | ||||||||| ||||| 169 AGCGTCGGGATGCA-CATCATGGAGCTATGGCCAGCCCTGGGTACGCCAGGCTACAGGCCACGGGCTGGAGGGGGTG 244 2A:ECE5EC5**2@ C+:++++++22*2:+29+*2***25/79*0299))*/)*0*0*.75)7:)1)1/))))9:.) Alignment of Sequence1 (score = 697.0): 279 AGGCAAGGGGCTGGAGTGGGTGGCAGTTATATCATATGATGGAAGTAATAAATACTATGCAGACTCCGTGAAGGGCCGAT 358 ||||||| |||||| ||||||||| ||||||| |||| ||||||||||||| ||||||||||| ||||||||||||||| 2 AGGCAAGAGGCTGGTGTGGGTGGCGGTTATATGGTATGGTGGAAGTAATAAACACTATGCAGACCCCGTGAAGGGCCGAT 81 0*0**)2**/**5D7<15*9<5:1+*0:GF:=C>6A52++*:2+++FF>>3<++++++302**:**/<+**;:/**2+++ 359 TCACCATCTCCAGAGACAATTCCAAGAACACGCTGTATCTGCAAATGAACAGCCTGAGAGCTGAGGACACGGCTGTGTAT 438 |||||||| |||||||||||||||||||||||||||||||||||||||| ||||||||||| |||||||||||| ||||| 82 TCACCATCGCCAGAGACAATTCCAAGAACACGCTGTATCTGCAAATGAAGAGCCTGAGAGCCGAGGACACGGCTTTGTAT 161 +<0***C:2+9GGFB?,5,4,+,2F<>FC=*,,C:>,=,@,,;3<@=,3,,<3,CF?=**<>@,?3,<<:3,CC,E,@,@ 439 TACTGTGCGAGAG 451 ||||||||||||| 162 TACTGTGCGAGAG 174 ;FCF@+F@FGGF9 >>> Alignments with D gene: IGHD4-17*00 (total score = 40.0) Alignment of Sequence1 (score = 40.0): 7 GGTGACTA 14 |||||||| 183 GGTGACTA 190 :=,,=><G IGHD4-23*00 (total score = 36.0) Alignment of Sequence1 (score = 36.0): 0 TGACTACGGT 9 || ||||||| 191 TGTCTACGGT 200 FCGGCFEGFF IGHD2-21*00 (total score = 35.0) Alignment of Sequence1 (score = 35.0): 13 GGTGACT 19 ||||||| 183 GGTGACT 189 :=,,=>< >>> Alignments with J gene: IGHJ6*00 (total score = 172.0) Alignment of Sequence1 (score = 172.0): 22 GGACGTCTGGGGCAAAGGGACCACGGTCACCGTCTCCTCA 61 ||||||| ||||| |||||||||||||||||||||||||| 203 GGACGTCGGGGGCCAAGGGACCACGGTCACCGTCTCCTCA 242 =B+7EF>+FFA,8F<E:,5+GDFFE,@F?,,7GGDFEC,F >>> Alignments with C gene: No hits. Clonotypes mixcr exportClonesPretty [-f] [-n <limitAfter>] [-s <skipAfter>] [-b <limitBefore>] [-e <cdr3Equals>] [-c <chain>] [-g <feature>] [-r <readContains>] [--alignment-idx <alignmentIdx>]... [--clone-ids <cloneIds>]... [-i <readIds>]... [--verbose] input.vdjca [output.txt] Exports pretty formatted clonotypes from .clnx files. Especially useful after assembleContigs to manually check how contig clonotypes are covered. -n , --limit <limitAfter> limit number of filtered alignments; no more than N alignments will be outputted -s , --skip <skipAfter> number of output alignments to skip -b , --limit-before <limitBefore> Limit number of alignments before filtering -e , --cdr3-equals <cdr3Equals> output only alignments where CDR3 exactly equals to given sequence -c , --chains <chain> filter export to a specific immunological chain -r , --clonal-sequence-contains <csContain> filter export to clones which contain specified nucleotide sequence -i , `--clone-ids list of clone ids to export","title":"exportPretty"},{"location":"mixcr/reference/mixcr-exportPretty/#exporting-formatted-alignments-and-clonotypes","text":"MiXCR is able to export alignments and clonotypes as pretty formatted human-readable text for manual analysis. This is useful both to inspect alignments and to facilitate optimization of analysis parameters and library preparation protocol.","title":"Exporting formatted alignments and clonotypes"},{"location":"mixcr/reference/mixcr-exportPretty/#raw-alignments","text":"mixcr exportAlignmentsPretty [-dft] [-n <limitAfter>] [-s <skipAfter>] [-b <limitBefore>] [-e <cdr3Equals>] [-c <chain>] [-g <feature>] [-r <readContains>] [--alignment-idx <alignmentIdx>]... [--clone-ids <cloneIds>]... [-i <readIds>]... [--verbose] input.vdjca [output.txt] Exports pretty formatted alignments from .vdjca file. -n , --limit <limitAfter> limit number of filtered alignments; no more than N alignments will be outputted -s , --skip <skipAfter> number of output alignments to skip -b , --limit-before <limitBefore> Limit number of alignments before filtering -e , --cdr3-equals <cdr3Equals> output only alignments where CDR3 exactly equals to given sequence -c , --chains <chain> filter export to a specific immunological chain -g , --feature <feature> output only alignments which contain a corresponding gene feature -r , --read-contains <readContains> output only alignments where target read contains a given substring --clone-ids <cloneIds> list of clone ids to export -i , --read-ids <readIds> list of read ids to export --alignment-idx <alignmentIdx> alignment index -t , --top output only top hits -d , --descriptions print read descriptions --verbose use a more verbose format for alignments Example: > mixcr exportAlignmentsPretty --skip 1000 --limit 10 input.vdjca this will export 10 results after skipping the first 1000 records. Skipping earlier records is often useful because the first sequences in a fastq file may have lower than average read quality. Pretty alignments have the following structure: >>> Read id: 1 5'UTR><L1 Quality 88888888888888888888888887888888888888888888888888888888888888888888888887888878 Target0 0 AAGGCCTTTCCACTTGGTGATCAGCACTGAGCACAGAGGACTCACCATGGAGTTGGGGCTGAGCTGGGTTTTCCTTGTTG 79 IGHV3-7*00 54 aaggcctttccacttggtgatcagcactgagcacagaggactcaccatggaAttggggctgagctgggttttccttgttg 133 L1><L2 L2><FR1 Quality 88888888887888888888888888888889989989989889999997999999989999999999999999999899 Target0 80 CTATTTTAGAAGGTGTCCAGTGTGAGGTGAAGTTGGTGGAGTCTGGGGGAGGCCTGGTCCAGCCTGGGGGGTCCCTGAGA 159 IGHV3-7*00 134 ctattttagaaggtgtccagtgtgaggtgCagCtggtggagtctgggggaggcTtggtccagcctggggggtccctgaga 213 FR1><CDR1 CDR1><FR2 Quality 999999999999999999999999999999999999999999999 9999999999999999999999999999999999 Target0 160 CTCTCCTGTGAAGCCTCCGGATTCACCTTTAGTAGTTATTGGATG-GCATGGGTCCGCCAGGGTCCAGGGCAGGGGCTGG 238 IGHV3-7*00 214 ctctcctgtgCagcctcTggattcacctttagtagCtattggatgAgc-tgggtccgccaggCtccagggAaggggctgg 292 FR2><CDR2 CDR2><FR3 Quality 99999999999999999999999999999999999799999999999999999999999999998999899898999999 Target0 239 AATGGGTGGGCAACATAAGGCCGGATGGAAGTGAGAGTTGGTACTTGGAGTCTGTGATGGGGCGATTCATGATATCTAGA 318 IGHV3-7*00 293 aGtgggtggCcaacataaAgcAAgatggaagtgagaAAtACtaTGtggaCtctgtgaAgggCcgattcaCCatCtcCaga 372 FR3><CDR3 Quality 99899899999999988989999889979988888888878878788888888878888888778788888888878888 Target0 319 GACAACGCCAAGAAGTCACTTTATCTGCAAATGGACAGCCTGAGAGTCGAGGACACGGCCGTCTATTATTGTGCGACTTC 398 IGHV3-7*00 373 gacaacgccaagaaCtcactGtatctgcaaatgAacagcctgagagCcgaggacacggcTgtGtattaCtgtgcga 448 IGHD3-10*00 12 ttc 14 CDR3><FR4 Quality 88888788888888888888888787788777887787777877777877787787877878788788777767778788 Target0 399 GGAGGAGCCGGAGGACTACTGGGGCCAGGGAGCCCTGGTCACCGTCTCCTCGGCTTCCACCAAGGGCCCATCGGTCTTCC 478 IGHD3-10*00 15 gg-ggag 20 IGHJ4*00 8 gactactggggccagggaAccctggtcaccgtctcctc 45 IGHG4*00 0 cttccaccaagggcccatcggtcttcc 26 IGHG3*00 0 cttccaccaagggcccatcggtcttcc 26 IGHG2*00 0 cCtccaccaagggcccatcggtcttcc 26 IGHG1*00 0 cCtccaccaagggcccatcggtcttcc 26 IGHGP*00 194 AgcCtccaccaagggcccatcggtcttcc 222 Quality 87370 Target0 479 CCTTG 483 IGHG4*00 27 ccCtg 31 IGHG3*00 27 ccCtg 31 IGHG2*00 27 ccCtg 31 IGHG1*00 27 ccCtg 31 IGHGP*00 223 ccCtg 227 Usage of the --verbose option will produce alignments in a slightly different format: >>> Read id: 12343 <--- Index of analysed read in input file >>> Target sequences (input sequences): Sequence0: <--- Read 1 from paired-end read Contains features: CDR1, VRegionTrimmed, L2, L, Intron, VLIntronL, FR1, Exon1, <--- Gene features VExon2Trimmed found in read 1 0 TCTTGGGGGATTCGGTGATCAGCACTGAACACAGAGGACTCACCATGGAGTTTGGGCTGAACTGGGTTTTCCTCGTTGCT 79 <--- Sequyence & quality FGGEGGGGGDG8F78CFC6CEFF<,CFG9EED,6,CFCC<EEGFG,CE:CCAFFGGC87CEF?A?FBC@FGGFG>B,FC9 of read 1 80 CTATTAAGAGGTGTCCAGTGTCAGGTGCAGCTGGTGGAGTCTGGGGGTGGCGTGTTCCAGCCTGGGGGGTCCGTGAGACT 159 F9,A,95AFE,B?,E,C,9AC<FGA<EE5??,A,A<:=:E,=B8C7+++8,++@+,885=D7:@8E+:5*1**11**++< 160 CTCCTGTGCAGCGTCGGGATGCACATCATGGAGCTATGGCCAGCCCTGGGTACGCCAGGCTACAGGCCACGGGCTGGAGG 239 <++*++0++2A:ECE5EC5**2@C+:++++++22*2:+29+*2***25/79*0299))*/)*0*0*.75)7:)1)1/))) 240 GGGTGCGTGGTAGATGGGAA 259 )9:.)))*1)12***-/).) Sequence1: <--- Read 2 from paired-end read Contains features: JCDR3Part, DCDR3Part, DJJunction, CDR2, JRegionTrimmed, CDR3, VDJunction, VJJunction, VCDR3Part, ShortCDR3, FR4, FR3 0 CGAGGCAAGAGGCTGGTGTGGGTGGCGGTTATATGGTATGGTGGAAGTAATAAACACTATGCAGACCCCGTGAAGGGCCG 79 **0*0**)2**/**5D7<15*9<5:1+*0:GF:=C>6A52++*:2+++FF>>3<++++++302**:**/<+**;:/**2+ 80 ATTCACCATCGCCAGAGACAATTCCAAGAACACGCTGTATCTGCAAATGAAGAGCCTGAGAGCCGAGGACACGGCTTTGT 159 +++<0***C:2+9GGFB?,5,4,+,2F<>FC=*,,C:>,=,@,,;3<@=,3,,<3,CF?=**<>@,?3,<<:3,CC,E,@ 160 ATTACTGTGCGAGAGGTCAACAGGGTGACTATGTCTACGGTAGGGACGTCGGGGGCCAAGGGACCACGGTCACCGTCTCC 239 ,@;FCF@+F@FGGF9FD,F>>+B:=,,=><GFCGGCFEGFF?+=B+7EF>+FFA,8F<E:,5+GDFFE,@F?,,7GGDFE 240 TCAGGGAGTGCATCCGCCCCAACCCTTTTCCCCCTCTCTGCGTTGATACCACTGGCAGCTC 300 C,FGGGEFCCGEEGGCFCC:8FGEGGGE@DFB-GFGGGGF@GFGFE<,GFCCFCAGC@CCC >>> Gene features that can be extracted from this (paired-)read: <--- For paired-end reads JCDR3Part, CDR1, VRegionTrimmed, L2, DCDR3Part, VDJTranscriptWithout5UTR, Exon2, L, some gene features DJJunction, Intron, FR2, CDR2, VDJRegion, JRegionTrimmed, CDR3, VDJunction, VJJunction, can be extracted by VLIntronL, FR1, VCDR3Part, ShortCDR3, Exon1, FR4, VExon2Trimmed, FR3 merging sequence information >>> Alignments with V gene: IGHV3-33*00 (total score = 1638.0) <--- Alignment of both reads with IGHV3-33 Alignment of Sequence0 (score = 899.0): <--- Alignment of IGHV3-33 with read 1 from paired-end read 65 ATTCGGTGATCAGCACTGAACACAGAGGACTCACCATGGAGTTTGGGCTGAGCTGGGTTTTCCTCGTTGCTCTTTTAAGA 144 <--- Germline ||||||||||||||||||||||||||||||||||||||||||||||||||| ||||||||||||||||||||| |||||| 9 ATTCGGTGATCAGCACTGAACACAGAGGACTCACCATGGAGTTTGGGCTGAACTGGGTTTTCCTCGTTGCTCTATTAAGA 88 <--- Read DG8F78CFC6CEFF<,CFG9EED,6,CFCC<EEGFG,CE:CCAFFGGC87CEF?A?FBC@FGGFG>B,FC9F9,A,95AF <--- Quality score 145 GGTGTCCAGTGTCAGGTGCAGCTGGTGGAGTCTGGGGGAGGCGTGGTCCAGCCTGGGAGGTCCCTGAGACTCTCCTGTGC 224 |||||||||||||||||||||||||||||||||||||| |||||| ||||||||||| ||||| |||||||||||||||| 89 GGTGTCCAGTGTCAGGTGCAGCTGGTGGAGTCTGGGGGTGGCGTGTTCCAGCCTGGGGGGTCCGTGAGACTCTCCTGTGC 168 E,B?,E,C,9AC<FGA<EE5??,A,A<:=:E,=B8C7+++8,++@+,885=D7:@8E+:5*1**11**++<<++*++0++ 225 AGCGTCTGGATTCACCTTCA-GTAGCTATGGCATGCACTGGGTCCGCCAGGCTCCAGGCAAGGGGCTGGAGTGGGTG 300 |||||| |||| || | ||| | ||||||||| || |||||| ||||||||| ||||| | ||||||||| ||||| 169 AGCGTCGGGATGCA-CATCATGGAGCTATGGCCAGCCCTGGGTACGCCAGGCTACAGGCCACGGGCTGGAGGGGGTG 244 2A:ECE5EC5**2@ C+:++++++22*2:+29+*2***25/79*0299))*/)*0*0*.75)7:)1)1/))))9:.) Alignment of Sequence1 (score = 739.0): <--- Alignment of IGHV3-33 with read 2 from paired-end read 279 AGGCAAGGGGCTGGAGTGGGTGGCAGTTATATGGTATGATGGAAGTAATAAATACTATGCAGACTCCGTGAAGGGCCGAT 358 ||||||| |||||| ||||||||| ||||||||||||| ||||||||||||| ||||||||||| ||||||||||||||| 2 AGGCAAGAGGCTGGTGTGGGTGGCGGTTATATGGTATGGTGGAAGTAATAAACACTATGCAGACCCCGTGAAGGGCCGAT 81 0*0**)2**/**5D7<15*9<5:1+*0:GF:=C>6A52++*:2+++FF>>3<++++++302**:**/<+**;:/**2+++ 359 TCACCATCTCCAGAGACAATTCCAAGAACACGCTGTATCTGCAAATGAACAGCCTGAGAGCCGAGGACACGGCTGTGTAT 438 |||||||| |||||||||||||||||||||||||||||||||||||||| |||||||||||||||||||||||| ||||| 82 TCACCATCGCCAGAGACAATTCCAAGAACACGCTGTATCTGCAAATGAAGAGCCTGAGAGCCGAGGACACGGCTTTGTAT 161 +<0***C:2+9GGFB?,5,4,+,2F<>FC=*,,C:>,=,@,,;3<@=,3,,<3,CF?=**<>@,?3,<<:3,CC,E,@,@ 439 TACTGTGCGAGAG 451 ||||||||||||| 162 TACTGTGCGAGAG 174 ;FCF@+F@FGGF9 IGHV3-30*00 (total score = 1582.0) <--- Alternative hit for V gene Alignment of Sequence0 (score = 885.0): 65 ATTCGGTGATCAGCACTGAACACAGAGGACTCACCATGGAGTTTGGGCTGAGCTGGGTTTTCCTCGTTGCTCTTTTAAGA 144 ||||||||||||||||||||||||||||||||||||||||||||||||||| ||||||||||||||||||||| |||||| 9 ATTCGGTGATCAGCACTGAACACAGAGGACTCACCATGGAGTTTGGGCTGAACTGGGTTTTCCTCGTTGCTCTATTAAGA 88 DG8F78CFC6CEFF<,CFG9EED,6,CFCC<EEGFG,CE:CCAFFGGC87CEF?A?FBC@FGGFG>B,FC9F9,A,95AF 145 GGTGTCCAGTGTCAGGTGCAGCTGGTGGAGTCTGGGGGAGGCGTGGTCCAGCCTGGGAGGTCCCTGAGACTCTCCTGTGC 224 |||||||||||||||||||||||||||||||||||||| |||||| ||||||||||| ||||| |||||||||||||||| 89 GGTGTCCAGTGTCAGGTGCAGCTGGTGGAGTCTGGGGGTGGCGTGTTCCAGCCTGGGGGGTCCGTGAGACTCTCCTGTGC 168 E,B?,E,C,9AC<FGA<EE5??,A,A<:=:E,=B8C7+++8,++@+,885=D7:@8E+:5*1**11**++<<++*++0++ 225 AGCCTCTGGATTCACCTTCA-GTAGCTATGGCATGCACTGGGTCCGCCAGGCTCCAGGCAAGGGGCTGGAGTGGGTG 300 ||| || |||| || | ||| | ||||||||| || |||||| ||||||||| ||||| | ||||||||| ||||| 169 AGCGTCGGGATGCA-CATCATGGAGCTATGGCCAGCCCTGGGTACGCCAGGCTACAGGCCACGGGCTGGAGGGGGTG 244 2A:ECE5EC5**2@ C+:++++++22*2:+29+*2***25/79*0299))*/)*0*0*.75)7:)1)1/))))9:.) Alignment of Sequence1 (score = 697.0): 279 AGGCAAGGGGCTGGAGTGGGTGGCAGTTATATCATATGATGGAAGTAATAAATACTATGCAGACTCCGTGAAGGGCCGAT 358 ||||||| |||||| ||||||||| ||||||| |||| ||||||||||||| ||||||||||| ||||||||||||||| 2 AGGCAAGAGGCTGGTGTGGGTGGCGGTTATATGGTATGGTGGAAGTAATAAACACTATGCAGACCCCGTGAAGGGCCGAT 81 0*0**)2**/**5D7<15*9<5:1+*0:GF:=C>6A52++*:2+++FF>>3<++++++302**:**/<+**;:/**2+++ 359 TCACCATCTCCAGAGACAATTCCAAGAACACGCTGTATCTGCAAATGAACAGCCTGAGAGCTGAGGACACGGCTGTGTAT 438 |||||||| |||||||||||||||||||||||||||||||||||||||| ||||||||||| |||||||||||| ||||| 82 TCACCATCGCCAGAGACAATTCCAAGAACACGCTGTATCTGCAAATGAAGAGCCTGAGAGCCGAGGACACGGCTTTGTAT 161 +<0***C:2+9GGFB?,5,4,+,2F<>FC=*,,C:>,=,@,,;3<@=,3,,<3,CF?=**<>@,?3,<<:3,CC,E,@,@ 439 TACTGTGCGAGAG 451 ||||||||||||| 162 TACTGTGCGAGAG 174 ;FCF@+F@FGGF9 >>> Alignments with D gene: IGHD4-17*00 (total score = 40.0) Alignment of Sequence1 (score = 40.0): 7 GGTGACTA 14 |||||||| 183 GGTGACTA 190 :=,,=><G IGHD4-23*00 (total score = 36.0) Alignment of Sequence1 (score = 36.0): 0 TGACTACGGT 9 || ||||||| 191 TGTCTACGGT 200 FCGGCFEGFF IGHD2-21*00 (total score = 35.0) Alignment of Sequence1 (score = 35.0): 13 GGTGACT 19 ||||||| 183 GGTGACT 189 :=,,=>< >>> Alignments with J gene: IGHJ6*00 (total score = 172.0) Alignment of Sequence1 (score = 172.0): 22 GGACGTCTGGGGCAAAGGGACCACGGTCACCGTCTCCTCA 61 ||||||| ||||| |||||||||||||||||||||||||| 203 GGACGTCGGGGGCCAAGGGACCACGGTCACCGTCTCCTCA 242 =B+7EF>+FFA,8F<E:,5+GDFFE,@F?,,7GGDFEC,F >>> Alignments with C gene: No hits.","title":"Raw alignments"},{"location":"mixcr/reference/mixcr-exportPretty/#clonotypes","text":"mixcr exportClonesPretty [-f] [-n <limitAfter>] [-s <skipAfter>] [-b <limitBefore>] [-e <cdr3Equals>] [-c <chain>] [-g <feature>] [-r <readContains>] [--alignment-idx <alignmentIdx>]... [--clone-ids <cloneIds>]... [-i <readIds>]... [--verbose] input.vdjca [output.txt] Exports pretty formatted clonotypes from .clnx files. Especially useful after assembleContigs to manually check how contig clonotypes are covered. -n , --limit <limitAfter> limit number of filtered alignments; no more than N alignments will be outputted -s , --skip <skipAfter> number of output alignments to skip -b , --limit-before <limitBefore> Limit number of alignments before filtering -e , --cdr3-equals <cdr3Equals> output only alignments where CDR3 exactly equals to given sequence -c , --chains <chain> filter export to a specific immunological chain -r , --clonal-sequence-contains <csContain> filter export to clones which contain specified nucleotide sequence -i , `--clone-ids list of clone ids to export","title":"Clonotypes"},{"location":"mixcr/reference/mixcr-exportQc/","text":"mixcr exportQc Exports various quality control metrics in a graphical form. Supported file formats: PDF, EPS, SVG, PNG and JPEG. Alignment reports mixcr exportQc align \\ [--absolute-values] \\ sample1.(vdjca|clns|clna)... \\ aligQc.(pdf|eps|svg|png|jpg) Exports alignment reports . Example: mixcr exportQc align *.vdjca alignQc.pdf Reads coverage mixcr exportQc coverage \\ [--show-boundaries] \\ alignments.vdjca \\ coverage.(pdf|eps|svg|png|jpg) Exports anchor points coverage by the library. It separately plots coverage for R1, R2 and overlapping reads. Example: mixcr exportQc coverage SRR18293077.vdjca coverage.pdf R1 R2 Overlap Chain usage mixcr exportQc chainUsage \\ [--absolute-values] \\ [--chains <chains>]... \\ [--hide-non-functional] \\ sample1.(vdjca|clns|clna)... \\ chainUsage.(pdf|eps|svg|png|jpg) Exports chain usage summary in either alignments ( .vdjca ) or clonotypes ( .clns ). Command line options are: --absolute-values show absolute values instead of percentage --chains <chains> specify which chains to export. Possible values: TRAD, TRB, TRG, IGH, IGK, IGL. --hide-non-functional hide fractions of non-functional CDR3s (out-of-frames and containing stops) Example: > mixcr exportQc chainUsage --hide-non-functional results/*.clns chainUsage.pdf","title":"exportQc"},{"location":"mixcr/reference/mixcr-exportQc/#mixcr-exportqc","text":"Exports various quality control metrics in a graphical form. Supported file formats: PDF, EPS, SVG, PNG and JPEG.","title":"mixcr exportQc"},{"location":"mixcr/reference/mixcr-exportQc/#alignment-reports","text":"mixcr exportQc align \\ [--absolute-values] \\ sample1.(vdjca|clns|clna)... \\ aligQc.(pdf|eps|svg|png|jpg) Exports alignment reports . Example: mixcr exportQc align *.vdjca alignQc.pdf","title":"Alignment reports"},{"location":"mixcr/reference/mixcr-exportQc/#reads-coverage","text":"mixcr exportQc coverage \\ [--show-boundaries] \\ alignments.vdjca \\ coverage.(pdf|eps|svg|png|jpg) Exports anchor points coverage by the library. It separately plots coverage for R1, R2 and overlapping reads. Example: mixcr exportQc coverage SRR18293077.vdjca coverage.pdf R1 R2 Overlap","title":"Reads coverage"},{"location":"mixcr/reference/mixcr-exportQc/#chain-usage","text":"mixcr exportQc chainUsage \\ [--absolute-values] \\ [--chains <chains>]... \\ [--hide-non-functional] \\ sample1.(vdjca|clns|clna)... \\ chainUsage.(pdf|eps|svg|png|jpg) Exports chain usage summary in either alignments ( .vdjca ) or clonotypes ( .clns ). Command line options are: --absolute-values show absolute values instead of percentage --chains <chains> specify which chains to export. Possible values: TRAD, TRB, TRG, IGH, IGK, IGL. --hide-non-functional hide fractions of non-functional CDR3s (out-of-frames and containing stops) Example: > mixcr exportQc chainUsage --hide-non-functional results/*.clns chainUsage.pdf","title":"Chain usage"},{"location":"mixcr/reference/mixcr-exportReadsForClones/","text":"mixcr exportReadsForClones Exports raw sequencing reads that were used to build clonotypes from .clna file. Note that such export is possible only from .clna files, produced by MiXCR assemble command with option --write-alignments . mixcr exportReadsForClones [-fs] --id [<ids>...] clones.clna output.fastq.gz Output file name will be transformed into _R1 / _R2 pair in case of paired end reads. --id [<ids>...] list of clonotype ids to export; use -1 to export reads that were not used in clonotypes -s , --separate create separate files for each clone. File or pair of _R1 / _R2 files, with _clnN suffix, where N is clone index, will be created for each clone index Extract reads in for specified clonotypes into separate files: > mixcr exportReadsForClones \\ -s --id 2 12 45 \\ clones.clna \\ reads.fastq.gz Extract into a single file: > mixcr exportReadsForClones \\ --id 2 12 45 \\ clones.clna \\ reads.fastq.gz","title":"exportReadsForClones"},{"location":"mixcr/reference/mixcr-exportReadsForClones/#mixcr-exportreadsforclones","text":"Exports raw sequencing reads that were used to build clonotypes from .clna file. Note that such export is possible only from .clna files, produced by MiXCR assemble command with option --write-alignments . mixcr exportReadsForClones [-fs] --id [<ids>...] clones.clna output.fastq.gz Output file name will be transformed into _R1 / _R2 pair in case of paired end reads. --id [<ids>...] list of clonotype ids to export; use -1 to export reads that were not used in clonotypes -s , --separate create separate files for each clone. File or pair of _R1 / _R2 files, with _clnN suffix, where N is clone index, will be created for each clone index Extract reads in for specified clonotypes into separate files: > mixcr exportReadsForClones \\ -s --id 2 12 45 \\ clones.clna \\ reads.fastq.gz Extract into a single file: > mixcr exportReadsForClones \\ --id 2 12 45 \\ clones.clna \\ reads.fastq.gz","title":"mixcr exportReadsForClones"},{"location":"mixcr/reference/mixcr-exportReports/","text":"mixcr exportReports Export all reports from any MiXCR binary file ( .vdjca , .clns , .clna and .shmt ). mixcr exportReports [-f] [--json] input.(vdjca|clns|clna|shmt) [output.(json|txt)] If the output file is not specified then MiXCR will print to a standard output. Example: > mixcr exportReports SRR18293077.clns ============== Align Report ============== Analysis time: 0ns Total sequencing reads: 2822242 Successfully aligned reads: 2268488 (80.38%) Paired-end alignment conflicts eliminated: 347051 (12.3%) Alignment failed, no hits (not TCR/IG?): 157004 (5.56%) Alignment failed because of absence of V hits: 664 (0.02%) Alignment failed because of absence of J hits: 249090 (8.83%) No target with both V and J alignments: 146985 (5.21%) Alignment failed because of low total score: 11 (0%) Overlapped: 1925221 (68.22%) Overlapped and aligned: 1707873 (60.51%) Alignment-aided overlaps: 34224 (2%) Overlapped and not aligned: 217348 (7.7%) No CDR3 parts alignments, percent of successfully aligned: 1980 (0.09%) Partial aligned reads, percent of successfully aligned: 83299 (3.67%) V gene chimeras: 28914 (1.02%) J gene chimeras: 2 (0%) IGH chains: 2268488 (100%) Realigned with forced non-floating bound: 1862490 (65.99%) Realigned with forced non-floating right bound in left read: 223659 (7.92%) Realigned with forced non-floating left bound in right read: 223659 (7.92%) ============== Assemble Report ============== Analysis time: 0ns Final clonotype count: 2267 Average number of reads per clonotype: 679.8 Reads used in clonotypes, percent of total: 1541099 (54.61%) Reads used in clonotypes before clustering, percent of total: 1721089 (60.98%) Number of reads used as a core, percent of used: 1616095 (93.9%) Mapped low quality reads, percent of used: 104994 (6.1%) Reads clustered in PCR error correction, percent of used: 179990 (10.46%) Reads pre-clustered due to the similar VJC-lists, percent of used: 0 (0%) Reads dropped due to the lack of a clone sequence, percent of total: 1 (0%) Reads dropped due to low quality, percent of total: 0 (0%) Reads dropped due to failed mapping, percent of total: 191224 (6.78%) Reads dropped with low quality clones, percent of total: 0 (0%) Clonotypes eliminated by PCR error correction: 5373 Clonotypes dropped as low quality: 0 Clonotypes pre-clustered due to the similar VJC-lists: 0 Clonotypes dropped in fine filtering: 0 Partially aligned reads attached to clones by tags: 0 (0%) Partially aligned reads with ambiguous clone attachments by tags: 0 (0%) Partially aligned reads failed to attach to clones by tags: 0 (0%) IGH chains: 2267 (100%) ============== AssembleContigs Report ============== Analysis time: 0ns Initial clonotype count: 2267 Final clonotype count: 3946 (174.06%) Canceled assemblies: 0 (0%) Number of premature termination assembly events, percent of number of initial clonotypes: 3.0 (0.13%) Longest contig length: 657 Clustered variants: 258 (6.14%) Reads in clustered variants: 62599.800854822184 (4.06%) Reads in divided (newly created) clones: 980085.3968117408 (63.6%) Clones with ambiguous letters in splitting region: 482 (12.21%) Reads in clones with ambiguous letters in splitting region: 132203.66869592396 (8.58%) Average number of ambiguous letters per clone with ambiguous letters in splitting region: 5.304979253112033","title":"exportReports"},{"location":"mixcr/reference/mixcr-exportReports/#mixcr-exportreports","text":"Export all reports from any MiXCR binary file ( .vdjca , .clns , .clna and .shmt ). mixcr exportReports [-f] [--json] input.(vdjca|clns|clna|shmt) [output.(json|txt)] If the output file is not specified then MiXCR will print to a standard output. Example: > mixcr exportReports SRR18293077.clns ============== Align Report ============== Analysis time: 0ns Total sequencing reads: 2822242 Successfully aligned reads: 2268488 (80.38%) Paired-end alignment conflicts eliminated: 347051 (12.3%) Alignment failed, no hits (not TCR/IG?): 157004 (5.56%) Alignment failed because of absence of V hits: 664 (0.02%) Alignment failed because of absence of J hits: 249090 (8.83%) No target with both V and J alignments: 146985 (5.21%) Alignment failed because of low total score: 11 (0%) Overlapped: 1925221 (68.22%) Overlapped and aligned: 1707873 (60.51%) Alignment-aided overlaps: 34224 (2%) Overlapped and not aligned: 217348 (7.7%) No CDR3 parts alignments, percent of successfully aligned: 1980 (0.09%) Partial aligned reads, percent of successfully aligned: 83299 (3.67%) V gene chimeras: 28914 (1.02%) J gene chimeras: 2 (0%) IGH chains: 2268488 (100%) Realigned with forced non-floating bound: 1862490 (65.99%) Realigned with forced non-floating right bound in left read: 223659 (7.92%) Realigned with forced non-floating left bound in right read: 223659 (7.92%) ============== Assemble Report ============== Analysis time: 0ns Final clonotype count: 2267 Average number of reads per clonotype: 679.8 Reads used in clonotypes, percent of total: 1541099 (54.61%) Reads used in clonotypes before clustering, percent of total: 1721089 (60.98%) Number of reads used as a core, percent of used: 1616095 (93.9%) Mapped low quality reads, percent of used: 104994 (6.1%) Reads clustered in PCR error correction, percent of used: 179990 (10.46%) Reads pre-clustered due to the similar VJC-lists, percent of used: 0 (0%) Reads dropped due to the lack of a clone sequence, percent of total: 1 (0%) Reads dropped due to low quality, percent of total: 0 (0%) Reads dropped due to failed mapping, percent of total: 191224 (6.78%) Reads dropped with low quality clones, percent of total: 0 (0%) Clonotypes eliminated by PCR error correction: 5373 Clonotypes dropped as low quality: 0 Clonotypes pre-clustered due to the similar VJC-lists: 0 Clonotypes dropped in fine filtering: 0 Partially aligned reads attached to clones by tags: 0 (0%) Partially aligned reads with ambiguous clone attachments by tags: 0 (0%) Partially aligned reads failed to attach to clones by tags: 0 (0%) IGH chains: 2267 (100%) ============== AssembleContigs Report ============== Analysis time: 0ns Initial clonotype count: 2267 Final clonotype count: 3946 (174.06%) Canceled assemblies: 0 (0%) Number of premature termination assembly events, percent of number of initial clonotypes: 3.0 (0.13%) Longest contig length: 657 Clustered variants: 258 (6.14%) Reads in clustered variants: 62599.800854822184 (4.06%) Reads in divided (newly created) clones: 980085.3968117408 (63.6%) Clones with ambiguous letters in splitting region: 482 (12.21%) Reads in clones with ambiguous letters in splitting region: 132203.66869592396 (8.58%) Average number of ambiguous letters per clone with ambiguous letters in splitting region: 5.304979253112033","title":"mixcr exportReports"},{"location":"mixcr/reference/mixcr-exportTables/","text":"mixcr exportTables Export postanalysis results in a tabular form. mixcr exportTables [-f] [--chains <chains>]... pa.json.gz dir/pa.(tsv|csv) Allows to export in tab-delimited ( .tsv ) or coma-separated ( .csv ) formats. Option --chains may be used to export results only for a specified chains. The output name is actually a pattern that is used to export different metrics into separate files. For example exporting overlap metrics with the following command: > mixcr exportTables pa/o.json.gz pa/o.tsv will produce the following files in the output: > ls pa/* o.F1Index.TRAD.tsv o.F1Index.TRB.tsv o.F1Index.TRG.tsv o.F2Index.TRAD.tsv o.F2Index.TRB.tsv o.F2Index.TRG.tsv ...","title":"exportTables"},{"location":"mixcr/reference/mixcr-exportTables/#mixcr-exporttables","text":"Export postanalysis results in a tabular form. mixcr exportTables [-f] [--chains <chains>]... pa.json.gz dir/pa.(tsv|csv) Allows to export in tab-delimited ( .tsv ) or coma-separated ( .csv ) formats. Option --chains may be used to export results only for a specified chains. The output name is actually a pattern that is used to export different metrics into separate files. For example exporting overlap metrics with the following command: > mixcr exportTables pa/o.json.gz pa/o.tsv will produce the following files in the output: > ls pa/* o.F1Index.TRAD.tsv o.F1Index.TRB.tsv o.F1Index.TRG.tsv o.F2Index.TRAD.tsv o.F2Index.TRB.tsv o.F2Index.TRG.tsv ...","title":"mixcr exportTables"},{"location":"mixcr/reference/mixcr-extend/","text":"mixcr extend Imputes germline sequences to the uncovered edges of CDR3, if corresponding V or J gene for is uniquely determined (e.g. from the second mate of a read pair). This procedure is typically used as a part of non-targeted RNA-Seq analysis pipeline for T-cells, to recover some of useful TCRs. It is not safe to use it for IGs, because of hypermutations. Tor TCRs which have relatively conservative sequence near conserved Cys and Phe/Trp, it can reconstruct additional clonotypes with relatively small chance to introduce false ones. Default parameters are specifically optimized to show zero false-positive rate . By default mixcr extend acts only on TCR sequences. Command line options mixcr extend [-f] [-t <threads>] [--chains <chains>] [--report <reportFile>] [--json-report <jsonReport>] [--v-anchor <vAnchorPoint>] [--j-anchor <jAnchorPoint>] [--quality <extensionQuality>] [--min-j-score <minimalJScore>] [--min-v-score <minimalVScore>] input.(vdjca|clns|clna) extended.(vdjca|clns|clna) The command takes alignments ( .vdjca ) or clones ( .clnx ) file as input and produces the same format as output. Additionally, it produces a comprehensive report . -f, --force-overwrite Force overwrite of output file(s). -t, --threads <threads> Processing threads -c, --chains <chains> Apply procedure only to alignments with specific immunological receptor chains ( TCR by default). -r, --report <reportFile> Report file (human readable version, see -j / --json-report for machine readable report) -j, --json-report <jsonReport> JSON formatted report file --v-anchor V extension anchor point (default: CDR3Begin ). --j-anchor J extension anchor point (default: CDR3End ). -q, --quality Quality score of extended sequence (default: 30 ). --min-v-score Minimal V hit score to perform left extension (default: 100 ). --min-j-score Minimal J hit score alignment to perform right extension (default: 70 ).","title":"extend"},{"location":"mixcr/reference/mixcr-extend/#mixcr-extend","text":"Imputes germline sequences to the uncovered edges of CDR3, if corresponding V or J gene for is uniquely determined (e.g. from the second mate of a read pair). This procedure is typically used as a part of non-targeted RNA-Seq analysis pipeline for T-cells, to recover some of useful TCRs. It is not safe to use it for IGs, because of hypermutations. Tor TCRs which have relatively conservative sequence near conserved Cys and Phe/Trp, it can reconstruct additional clonotypes with relatively small chance to introduce false ones. Default parameters are specifically optimized to show zero false-positive rate . By default mixcr extend acts only on TCR sequences.","title":"mixcr extend"},{"location":"mixcr/reference/mixcr-extend/#command-line-options","text":"mixcr extend [-f] [-t <threads>] [--chains <chains>] [--report <reportFile>] [--json-report <jsonReport>] [--v-anchor <vAnchorPoint>] [--j-anchor <jAnchorPoint>] [--quality <extensionQuality>] [--min-j-score <minimalJScore>] [--min-v-score <minimalVScore>] input.(vdjca|clns|clna) extended.(vdjca|clns|clna) The command takes alignments ( .vdjca ) or clones ( .clnx ) file as input and produces the same format as output. Additionally, it produces a comprehensive report . -f, --force-overwrite Force overwrite of output file(s). -t, --threads <threads> Processing threads -c, --chains <chains> Apply procedure only to alignments with specific immunological receptor chains ( TCR by default). -r, --report <reportFile> Report file (human readable version, see -j / --json-report for machine readable report) -j, --json-report <jsonReport> JSON formatted report file --v-anchor V extension anchor point (default: CDR3Begin ). --j-anchor J extension anchor point (default: CDR3End ). -q, --quality Quality score of extended sequence (default: 30 ). --min-v-score Minimal V hit score to perform left extension (default: 100 ). --min-j-score Minimal J hit score alignment to perform right extension (default: 70 ).","title":"Command line options"},{"location":"mixcr/reference/mixcr-overlapScatterPlot/","text":"mixcr overlapScatterPlot mixcr overlapScatterPlot creates a scatter-plot for clone frequencies overlap between two samples. Command line options > mixcr overlapScatterPlot [ -f ] [ --no-log ] [ -nw ] [ --only-productive ] [ --verbose ] [ --criteria <overlapCriteria> ] --downsampling <downsampling> [ --method <method> ] [ --chains <chains> ] ... <in1> <in2> <out> The command takes .clna or .clns file as input and produces one of the following graphical formats depending on the extension of output file: .pdf , .eps , .png , .svg and .jpeg -f, --force-overwrite Force overwrite of output file(s). --no-log Do not apply log10 to clonotype frequencies. --only-productive Filter out-of-frame sequences and sequences with stop-codons. --downsampling <downsampling> Choose downsampling. Possible values: none , count-[reads|TAG]-[auto|min|fixed][-<number>] , top-[reads|TAG]-[<number>] , cumtop-[reads|TAG]-[percent] . Check mixcr postanalysis downsampling for more information. --method <method> Correlation method to use. Possible value: pearson , kendal , spearman . --criteria <overlapCriteria> Overlap criteria. Defines the rules to treat clones as equal. Default CDR3|AA|V|J (For two clones to me equal they must share CDR3 amino acid sequence, V and J genes) --chains <chains> Chains to export -nw, --no-warnings Suppress all warning messages. --verbose Verbose warning messages. Example: > mixcr overlapScatterPlot \\ --downsampling none \\ --chains IGH \\ results/M1_4T1_Blood_S2.clns results/M1_4T1_Blood_S6.clns \\ M1_4T1_Blood.overlap.pdf","title":"overlapScatterPlot"},{"location":"mixcr/reference/mixcr-overlapScatterPlot/#mixcr-overlapscatterplot","text":"mixcr overlapScatterPlot creates a scatter-plot for clone frequencies overlap between two samples.","title":"mixcr overlapScatterPlot"},{"location":"mixcr/reference/mixcr-overlapScatterPlot/#command-line-options","text":"> mixcr overlapScatterPlot [ -f ] [ --no-log ] [ -nw ] [ --only-productive ] [ --verbose ] [ --criteria <overlapCriteria> ] --downsampling <downsampling> [ --method <method> ] [ --chains <chains> ] ... <in1> <in2> <out> The command takes .clna or .clns file as input and produces one of the following graphical formats depending on the extension of output file: .pdf , .eps , .png , .svg and .jpeg -f, --force-overwrite Force overwrite of output file(s). --no-log Do not apply log10 to clonotype frequencies. --only-productive Filter out-of-frame sequences and sequences with stop-codons. --downsampling <downsampling> Choose downsampling. Possible values: none , count-[reads|TAG]-[auto|min|fixed][-<number>] , top-[reads|TAG]-[<number>] , cumtop-[reads|TAG]-[percent] . Check mixcr postanalysis downsampling for more information. --method <method> Correlation method to use. Possible value: pearson , kendal , spearman . --criteria <overlapCriteria> Overlap criteria. Defines the rules to treat clones as equal. Default CDR3|AA|V|J (For two clones to me equal they must share CDR3 amino acid sequence, V and J genes) --chains <chains> Chains to export -nw, --no-warnings Suppress all warning messages. --verbose Verbose warning messages. Example: > mixcr overlapScatterPlot \\ --downsampling none \\ --chains IGH \\ results/M1_4T1_Blood_S2.clns results/M1_4T1_Blood_S6.clns \\ M1_4T1_Blood.overlap.pdf","title":"Command line options"},{"location":"mixcr/reference/mixcr-postanalysis/","text":"mixcr postanalysis Runs basic postanalysis routines for a list of clonesets and writes the results to a compressed json file, which then may be used for tabular export with exportTables or graphical export with exportPlots . There are two types of basic postanalysis: Individual - computes different characteristics for each of the passed clonesets individually Overlap - builds clonesets overlap and computes various metrics on it In both cases schematically MiXCR works in the following way: Splits each of the passed clonesets into TRAD , TRB , TRG , IGH , IGK and IGL clonesets (of course if they present in the data) For each immunological chain it optionally filters productive clonotypes if the corresponding flag is specified Applies normalization of samples according to the specified downsampling Finally, it iterates over normalized datasets and computes either ( individual ) all the characteristics for each dataset ( overlap ) overlap of the normalized clonesets and various pairwise metrics on the overlap Common There are several important common aspects of individual and overlap postanalysis. Downsampling Downsampling is a required procedure without which it is not possible to make a statistical comparisons between datasets. There are three types of downsampling each of which may be applied on a one of three tag levels: read , umi or cell : count-<tag>-(auto|min|fixed)[-<number>] normalizes datasets to the same tag number (either reads, UMIs or cells). The exact downsampling value may be either computed automatically ( auto ) chosen as a value in the smallest sample ( min ) specified explicitly ( fixed ) For automatic downsampling MiXCR calculates 20-th quantile across all clonesets Q20 , and takes the minimal sample which is above 0.5*Q20 . For memory efficiency, MiXCR uses random multivariate hypergeometric marginals algorithm for downsampling to the same number of reads. For downsampling to the same number of UMIs or cells, MiXCR uses random uniform sampling of the whole tag list. top-<tag>-<number> normalizes datasets to the same number of clonotypes. It takes top <number> of clonotypes by corresponding tag (i.e. top by number of reads, or by number of UMIs or by number of cells) cumtop-<tag>-<percent> normalizes datasets to the same cloneset abundance. It takes top clonotypes by corresponding tag (i.e. top by number of reads, or by number of UMIs or by number of cells) so that the top contains the specified <percent> of the cloneset abundance (again computed by corresponding tag ) none no downsampling Weight functions MiXCR requires to select one of the four methods used to calculate weight of each clonotype: read weight by the number of reads umi weight by the number of UMI cell weight by the number of unique cell barcodes corresponding to the clone none for unweighted analysis Metadata Optionally, one can supply a metadata .tsv or .csv table which may be used further in exportPlots command to group samples and apply different statistical tests on a groups of samples. Metadata file must contain sample column. Values in this column should allow unambiguously match names of the input files using the longest common substring (LCS) algorithm. For example, suppose the input samples are: > ls results/* results/sample_1_23_p.clns results/sample_2_54_n.clns results/sample_3_32_n.clns results/sample_4_62_p.clns ... where sample_i part is unique for each sample. Then the sample metadata may look like: sample age condition sample_1 23 p sample_2 54 n sample_3 32 n sample_4 62 p ... ... ... Sometimes one project may contain samples corresponding to different immunological chains in separate files. In that case it is necessary to add chain column to the metadata file and MiXCR will use it. For example: > ls results/* results/sample_1_23_p_alpha.clns results/sample_2_54_n_beta.clns results/sample_3_32_n_alpha.clns results/sample_4_62_p_beta.clns ... and example metadata: sample chain age condition sample_1 TRA 23 p sample_2 TRB 54 n sample_3 TRA 32 n sample_4 TRB 62 p ... ... ... ... Isolation groups Sometimes there is no need to apply normalization for all samples. For example, if there are two cell subsets in the data (e.g. CD4 and CD8) and you are interested in overlap postanalysis, then it is totally meaningless to compute overlap between CD4 and CD8 subsets. MiXCR allows to specify metadata column which will be used to separate samples into groups and apply downsampling and postanalysis separately for each group of samples. Individual postanalysis mixcr postanalysis individual [-f] --default-downsampling <defaultDownsampling> --default-weight-function <defaultWeightFunction> [--drop-outliers] [--only-productive] [--chains <chains>] [--metadata <file>] [--preproc-tables <path>] [--tables <path>] [--group <meta>]... [-O<String=String>]... sample_1.clnx[<sample_2.clnx>...] output.json.gz Calculates CDR3 metrics , Diversity measures an\u0432 Gene segment usage for each of the specified samples. Command line options --default-downsampling <defaultDownsampling> default downsampling applied to normalize the clonesets --drop-outliers drop samples which are below downsampling value as computed according to specified default downsampling option --default-weight-function <defaultWeightFunction> default clonotype weight function --only-productive drop clonotypes with out-of-frame CDR3 sequence or CDR3 containing stop codon --chains <chains> possible values: TRAD , TRG , TCR , IGH , IGK , IGL , IG , ALL . Restrict the analysis to the specified immunological chains. --metadata <file> metadata file in a tab- ( .tsv ) or comma- ( .csv ) separated form. Must contain sample column which matches names of input files. Optionally may have chains column. --preproc-tables <path> output path for the preprocessing summary tables (filtering and downsampling) --tables <path> output path for tabular postanalysis results --group <meta> metadata column used to group samples into isolation groups ; postanalysis will be performed in each of the groups separately. It is possible to specify several isolation groups. MiXCR allows to override downsampling and filtering parameters for any postanalysis metric using -Oparameter=value syntax. Example: > mixcr postanalysis individual \\ -OvUsage.weightFunction = read \\ ... The following options may be overridden: -O<metric>.downsampling=<downsampling> override default downsampling -O<metric>.dropOutliers=(true|false) override default setting for dropping outliers -O<metric>.weightFunction=<weightFunction> override default weight function -O<metric>.onlyProductive=(true|false) override default setting for filtering only productive clonotypes The following <metric> values are supported: CDR3 metrics : cdr3metrics.cdr3lenNT , cdr3metrics.cdr3lenAA , cdr3metrics.ndnLenNT , cdr3metrics.addedNNT , cdr3metrics.strength , cdr3metrics.hydrophobicity , cdr3metrics.surface , cdr3metrics.volume , cdr3metrics.charge , Diversity measures : diversity.observed , diversity.shannonWiener , diversity.chao1 , diversity.normalizedShannonWienerIndex , diversity.inverseSimpsonIndex , diversity.giniIndex , diversity.d50 , diversity.efronThisted , Segment usage : vUsage , jUsage , isotypeUsage , vjUsage CDR3 metrics CDR3 metrics may be separated into two groups. First includes \"length\" metrics: Length of CDR3, aa \u2014 length of amino acid CDR3 sequence Length of CDR3, nt \u2014 length of nucleotide CDR3 sequence Length of VJJunction , nt \u2014 nucleotide length of N-D-N region Added nucleotides \u2014 number of added N nucleotides The second group includes averaged physicochemical characteristics computed for the five amino acids in the middle of the CDR3: Strength of CDR3 \u2014 estimated strength of the interaction between CDR3 and cognate peptide computed as a derivative of the interaction energy, Hydrophobicity of CDR3 \u2014 estimated hydrophobicity (Kidera factor 4) Surface of CDR3 \u2014 estimated surface of CDR3 Volume of CDR3 \u2014 estimated volume of CDR3 Charge of CDR3 \u2014 estimated charge of CDR3 For details see the following publications and references therein: De Simone G et al, J Immunol. 2019 Dec 15 Logunova et al, Proc Natl Acad Sci USA. 2020 Jun 16 Diversity measures Diversity measures reported by MiXCR include: Observed diversity \u2014 the number of clonotypes ( \\(D\\) ) Normalized Shannon-Wiener index \u2014 normalized (divided by log of the number of clonotypes) entropy of clonotype frequency distribution: $$ -\\frac{1}{\\log(D)}\\sum f_i \\log (f_i) $$ Shannon-Wiener diversity \u2014 the exponent of clonotype frequency distribution entropy: $$ \\exp \\left(-\\sum f_i \\log (f_i)\\right) $$ Gini index: $$ 1 + \\sum f_i^2 $$ Inverse Simpson index : $$ 1 / \\sum f_i^2 $$ Chao1 estimate \u2014 Chao lower bound diversity estimate Efron-Thisted estimate \u2014 lower bound total diversity estimate d50 \u2014 number of clones substituting a half of the sample abundance Segment usage metrics Variable, Joining segment and Isotype usage vectors, i.e. the frequency of associated reads for each of V/J segments present in sample. Overlap postanalysis mixcr postanalysis overlap [-f] --default-downsampling <defaultDownsampling> --default-weight-function <defaultWeightFunction> [--criteria <overlapCriteria>] [--factor-by <meta>[,<meta>...]]... [--drop-outliers] [--only-productive] [--chains <chains>] [--metadata <file>] [--preproc-tables <path>] [--tables <path>] [--group <meta>]... [-O<String=String>]... sample_1.clnx[<sample_2.clnx>...] output.json.gz Calculates pairwise Distance metrics . Command line options --default-downsampling <defaultDownsampling> default downsampling applied to normalize the clonesets --drop-outliers drop samples which are below downsampling value as computed according to specified default downsampling option --default-weight-function <defaultWeightFunction> default clonotype weight function --criteria <overlapCriteria> overlap criteria. It allows to specify gene feature for overlap (nucleotide or amino acid), and optionally use V and J hits. Examples: CDR3|AA|V|J (overlap by a.a. CDR3 and V and J), VDJRegion|AA (overlap by a.a. VDJRegion ), CDR3|NT|V (overlap by nt CDR3 and V). --factor-by <meta>[,<meta>...] pools samples with the same values of specified metadata columns and performs overlap between such pooled samples --only-productive drop clonotypes with out-of-frame CDR3 sequence or CDR3 containing stop codon --chains <chains> possible values: TRAD , TRG , TCR , IGH , IGK , IGL , IG , ALL . Restrict the analysis to the specified immunological chains. --metadata <file> metadata file in a tab- ( .tsv ) or comma- ( .csv ) separated form. Must contain sample column which matches names of input files. Optionally may have chains column. --preproc-tables <path> output path for the preprocessing summary tables (filtering and downsampling) --tables <path> output path for tabular postanalysis results --group <meta> metadata column used to group samples into isolation groups ; postanalysis will be performed in each of the groups separately. It is possible to specify several isolation groups. MiXCR allows to override downsampling and filtering parameters for any postanalysis metric using -Oparameter=value syntax. Example: > mixcr postanalysis overlap \\ -OvUsage.weightFunction = read \\ ... The following options may be overridden: -O<metric>.downsampling=<downsampling> override default downsampling -O<metric>.dropOutliers=(true|false) override default setting for dropping outliers -O<metric>.weightFunction=<weightFunction> override default weight function -O<metric>.onlyProductive=(true|false) override default setting for filtering only productive clonotypes The following <metric> values are supported : sharedClonotypes , f1Index , f2Index , jaccardIndex , pearson , pearsonAll . Pairwise distance metrics Repertoire similarity measures include: Shared clonotypes \u2014 number of shared clonotypes Relative diversity \u2014 overlap diversity, computed with the following normalization: $$ D_{ij} = \\frac{d_{ij}}{d_{i}d_{j}} $$ where \\(d_{ij}\\) is the number of clonotypes present in both samples and \\(d_{i}\\) is the diversity of sample \\(i\\) . See this paper for the rationale behind normalization. Pearson \u2014 Pearson's correlation of clonotype frequencies, restricted only to the overlapping clonotypes: $$ R_{ij} = \\frac{\\sum^N_{k=1} \\left(\\phi_{ik} - \\bar{\\phi_{i}} \\right) \\left(\\phi_{jk} - \\bar{\\phi_{j}} \\right)}{\\sqrt{\\sum^N_{k=1} \\left(\\phi_{ik} - \\bar{\\phi_{i}} \\right)^2 \\sum^N_{k=1} \\left(\\phi_{jk} - \\bar{\\phi_{j}} \\right)^2}} $$ where \\(k=1 \\to N\\) are the indices of overlapping clonotypes, \\(\\phi_{ik}\\) is the frequency of clonotype \\(k\\) in sample \\(i\\) and \\(\\bar{\\phi_{i}}\\) is the average frequency of overlapping clonotypes in sample \\(i\\) . Pearson (all) \u2014 Pearson's correlation of clonotype frequencies, restricted only to the overlapping clonotypes F1 index \u2014 geometric mean of relative overlap frequencies: $$ F_{ij} = \\sqrt{f_{ij}f_{ji}} $$ where \\(f_{ij}=\\sum^N_{k=1}\\phi_{ik}\\) is the total frequency of clonotypes that overlap between samples \\(i\\) and \\(j\\) in sample \\(i\\) . F2 index \u2014 clonotype-wise sum of geometric mean frequencies: $$ F2_{ij} = \\sum^N_{k=1}\\sqrt{\\phi_{ik}\\phi_{jk}} $$ Note that this measure performs similar to \\(F\\) and provides slightly more robust results in case cross-sample contamination is present. Jaccard index . Preprocessing summary tables MiXCR provides detailed reports on preprocessing steps (filtering clonotypes and downsampling) applied for each of the computed postanalysis metrics. The typical report table looks like: characteristic sample preprocessor nElementsBefore sumWeightBefore nElementsAfter sumWeightAfter preprocessor#1 nElementsBefore#1 sumWeightBefore#1 nElementsAfter#1 sumWeightAfter#1 preprocessor#2 nElementsBefore#2 sumWeightBefore#2 nElementsAfter#2 sumWeightAfter#2 preprocessor#3 nElementsBefore#3 sumWeightBefore#3 nElementsAfter#3 sumWeightAfter#3 VSegmentUsage P21-M1-PD1.clns Filter TRA,TRD chains & Filter stops in CDR3, OOF in CDR3 & Downsample by umi automatic 309 2141.0 110 796.0 Filter TRA,TRD chains 309 2141.0 162 1186.0 Filter stops in CDR3, OOF in CDR3 162 1186.0 139 1143.0 Downsample by umi automatic 139 1143.0 110 796.0 Added N, nt P14-T0-TIGIT.clns Filter TRA,TRD chains & Filter stops in CDR3, OOF in CDR3 & Downsample by umi automatic 863 8478.0 189 796.0 Filter TRA,TRD chains 863 8478.0 412 3688.0 Filter stops in CDR3, OOF in CDR3 412 3688.0 311 3071.0 Downsample by umi automatic 311 3071.0 189 796.0 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... The meaning of the columns is the following: characteristic name for a group of metrics for which the same downsampling was applied preprocessor the name of the overall preprocessing chain applied to the dataset nElementsBefore number of clonotypes before any preprocessing applied (that is in the initial dataset) sumWeightBefore total weight of all clonotypes before any preprocessing applied nElementsAfter number of clonotypes in the dataset after all preprocessing applied sumWeightBefore total weight of all clonotypes after all preprocessing applied. preprocessor#i and following columns report columns for i-th step in the preprocessing chain","title":"postanalysis"},{"location":"mixcr/reference/mixcr-postanalysis/#mixcr-postanalysis","text":"Runs basic postanalysis routines for a list of clonesets and writes the results to a compressed json file, which then may be used for tabular export with exportTables or graphical export with exportPlots . There are two types of basic postanalysis: Individual - computes different characteristics for each of the passed clonesets individually Overlap - builds clonesets overlap and computes various metrics on it In both cases schematically MiXCR works in the following way: Splits each of the passed clonesets into TRAD , TRB , TRG , IGH , IGK and IGL clonesets (of course if they present in the data) For each immunological chain it optionally filters productive clonotypes if the corresponding flag is specified Applies normalization of samples according to the specified downsampling Finally, it iterates over normalized datasets and computes either ( individual ) all the characteristics for each dataset ( overlap ) overlap of the normalized clonesets and various pairwise metrics on the overlap","title":"mixcr postanalysis"},{"location":"mixcr/reference/mixcr-postanalysis/#common","text":"There are several important common aspects of individual and overlap postanalysis.","title":"Common"},{"location":"mixcr/reference/mixcr-postanalysis/#downsampling","text":"Downsampling is a required procedure without which it is not possible to make a statistical comparisons between datasets. There are three types of downsampling each of which may be applied on a one of three tag levels: read , umi or cell : count-<tag>-(auto|min|fixed)[-<number>] normalizes datasets to the same tag number (either reads, UMIs or cells). The exact downsampling value may be either computed automatically ( auto ) chosen as a value in the smallest sample ( min ) specified explicitly ( fixed ) For automatic downsampling MiXCR calculates 20-th quantile across all clonesets Q20 , and takes the minimal sample which is above 0.5*Q20 . For memory efficiency, MiXCR uses random multivariate hypergeometric marginals algorithm for downsampling to the same number of reads. For downsampling to the same number of UMIs or cells, MiXCR uses random uniform sampling of the whole tag list. top-<tag>-<number> normalizes datasets to the same number of clonotypes. It takes top <number> of clonotypes by corresponding tag (i.e. top by number of reads, or by number of UMIs or by number of cells) cumtop-<tag>-<percent> normalizes datasets to the same cloneset abundance. It takes top clonotypes by corresponding tag (i.e. top by number of reads, or by number of UMIs or by number of cells) so that the top contains the specified <percent> of the cloneset abundance (again computed by corresponding tag ) none no downsampling","title":"Downsampling"},{"location":"mixcr/reference/mixcr-postanalysis/#weight-functions","text":"MiXCR requires to select one of the four methods used to calculate weight of each clonotype: read weight by the number of reads umi weight by the number of UMI cell weight by the number of unique cell barcodes corresponding to the clone none for unweighted analysis","title":"Weight functions"},{"location":"mixcr/reference/mixcr-postanalysis/#metadata","text":"Optionally, one can supply a metadata .tsv or .csv table which may be used further in exportPlots command to group samples and apply different statistical tests on a groups of samples. Metadata file must contain sample column. Values in this column should allow unambiguously match names of the input files using the longest common substring (LCS) algorithm. For example, suppose the input samples are: > ls results/* results/sample_1_23_p.clns results/sample_2_54_n.clns results/sample_3_32_n.clns results/sample_4_62_p.clns ... where sample_i part is unique for each sample. Then the sample metadata may look like: sample age condition sample_1 23 p sample_2 54 n sample_3 32 n sample_4 62 p ... ... ... Sometimes one project may contain samples corresponding to different immunological chains in separate files. In that case it is necessary to add chain column to the metadata file and MiXCR will use it. For example: > ls results/* results/sample_1_23_p_alpha.clns results/sample_2_54_n_beta.clns results/sample_3_32_n_alpha.clns results/sample_4_62_p_beta.clns ... and example metadata: sample chain age condition sample_1 TRA 23 p sample_2 TRB 54 n sample_3 TRA 32 n sample_4 TRB 62 p ... ... ... ...","title":"Metadata"},{"location":"mixcr/reference/mixcr-postanalysis/#isolation-groups","text":"Sometimes there is no need to apply normalization for all samples. For example, if there are two cell subsets in the data (e.g. CD4 and CD8) and you are interested in overlap postanalysis, then it is totally meaningless to compute overlap between CD4 and CD8 subsets. MiXCR allows to specify metadata column which will be used to separate samples into groups and apply downsampling and postanalysis separately for each group of samples.","title":"Isolation groups"},{"location":"mixcr/reference/mixcr-postanalysis/#individual-postanalysis","text":"mixcr postanalysis individual [-f] --default-downsampling <defaultDownsampling> --default-weight-function <defaultWeightFunction> [--drop-outliers] [--only-productive] [--chains <chains>] [--metadata <file>] [--preproc-tables <path>] [--tables <path>] [--group <meta>]... [-O<String=String>]... sample_1.clnx[<sample_2.clnx>...] output.json.gz Calculates CDR3 metrics , Diversity measures an\u0432 Gene segment usage for each of the specified samples.","title":"Individual postanalysis"},{"location":"mixcr/reference/mixcr-postanalysis/#command-line-options","text":"--default-downsampling <defaultDownsampling> default downsampling applied to normalize the clonesets --drop-outliers drop samples which are below downsampling value as computed according to specified default downsampling option --default-weight-function <defaultWeightFunction> default clonotype weight function --only-productive drop clonotypes with out-of-frame CDR3 sequence or CDR3 containing stop codon --chains <chains> possible values: TRAD , TRG , TCR , IGH , IGK , IGL , IG , ALL . Restrict the analysis to the specified immunological chains. --metadata <file> metadata file in a tab- ( .tsv ) or comma- ( .csv ) separated form. Must contain sample column which matches names of input files. Optionally may have chains column. --preproc-tables <path> output path for the preprocessing summary tables (filtering and downsampling) --tables <path> output path for tabular postanalysis results --group <meta> metadata column used to group samples into isolation groups ; postanalysis will be performed in each of the groups separately. It is possible to specify several isolation groups. MiXCR allows to override downsampling and filtering parameters for any postanalysis metric using -Oparameter=value syntax. Example: > mixcr postanalysis individual \\ -OvUsage.weightFunction = read \\ ... The following options may be overridden: -O<metric>.downsampling=<downsampling> override default downsampling -O<metric>.dropOutliers=(true|false) override default setting for dropping outliers -O<metric>.weightFunction=<weightFunction> override default weight function -O<metric>.onlyProductive=(true|false) override default setting for filtering only productive clonotypes The following <metric> values are supported: CDR3 metrics : cdr3metrics.cdr3lenNT , cdr3metrics.cdr3lenAA , cdr3metrics.ndnLenNT , cdr3metrics.addedNNT , cdr3metrics.strength , cdr3metrics.hydrophobicity , cdr3metrics.surface , cdr3metrics.volume , cdr3metrics.charge , Diversity measures : diversity.observed , diversity.shannonWiener , diversity.chao1 , diversity.normalizedShannonWienerIndex , diversity.inverseSimpsonIndex , diversity.giniIndex , diversity.d50 , diversity.efronThisted , Segment usage : vUsage , jUsage , isotypeUsage , vjUsage","title":"Command line options"},{"location":"mixcr/reference/mixcr-postanalysis/#cdr3-metrics","text":"CDR3 metrics may be separated into two groups. First includes \"length\" metrics: Length of CDR3, aa \u2014 length of amino acid CDR3 sequence Length of CDR3, nt \u2014 length of nucleotide CDR3 sequence Length of VJJunction , nt \u2014 nucleotide length of N-D-N region Added nucleotides \u2014 number of added N nucleotides The second group includes averaged physicochemical characteristics computed for the five amino acids in the middle of the CDR3: Strength of CDR3 \u2014 estimated strength of the interaction between CDR3 and cognate peptide computed as a derivative of the interaction energy, Hydrophobicity of CDR3 \u2014 estimated hydrophobicity (Kidera factor 4) Surface of CDR3 \u2014 estimated surface of CDR3 Volume of CDR3 \u2014 estimated volume of CDR3 Charge of CDR3 \u2014 estimated charge of CDR3 For details see the following publications and references therein: De Simone G et al, J Immunol. 2019 Dec 15 Logunova et al, Proc Natl Acad Sci USA. 2020 Jun 16","title":"CDR3 metrics"},{"location":"mixcr/reference/mixcr-postanalysis/#diversity-measures","text":"Diversity measures reported by MiXCR include: Observed diversity \u2014 the number of clonotypes ( \\(D\\) ) Normalized Shannon-Wiener index \u2014 normalized (divided by log of the number of clonotypes) entropy of clonotype frequency distribution: $$ -\\frac{1}{\\log(D)}\\sum f_i \\log (f_i) $$ Shannon-Wiener diversity \u2014 the exponent of clonotype frequency distribution entropy: $$ \\exp \\left(-\\sum f_i \\log (f_i)\\right) $$ Gini index: $$ 1 + \\sum f_i^2 $$ Inverse Simpson index : $$ 1 / \\sum f_i^2 $$ Chao1 estimate \u2014 Chao lower bound diversity estimate Efron-Thisted estimate \u2014 lower bound total diversity estimate d50 \u2014 number of clones substituting a half of the sample abundance","title":"Diversity measures"},{"location":"mixcr/reference/mixcr-postanalysis/#segment-usage-metrics","text":"Variable, Joining segment and Isotype usage vectors, i.e. the frequency of associated reads for each of V/J segments present in sample.","title":"Segment usage metrics"},{"location":"mixcr/reference/mixcr-postanalysis/#overlap-postanalysis","text":"mixcr postanalysis overlap [-f] --default-downsampling <defaultDownsampling> --default-weight-function <defaultWeightFunction> [--criteria <overlapCriteria>] [--factor-by <meta>[,<meta>...]]... [--drop-outliers] [--only-productive] [--chains <chains>] [--metadata <file>] [--preproc-tables <path>] [--tables <path>] [--group <meta>]... [-O<String=String>]... sample_1.clnx[<sample_2.clnx>...] output.json.gz Calculates pairwise Distance metrics .","title":"Overlap postanalysis"},{"location":"mixcr/reference/mixcr-postanalysis/#command-line-options_1","text":"--default-downsampling <defaultDownsampling> default downsampling applied to normalize the clonesets --drop-outliers drop samples which are below downsampling value as computed according to specified default downsampling option --default-weight-function <defaultWeightFunction> default clonotype weight function --criteria <overlapCriteria> overlap criteria. It allows to specify gene feature for overlap (nucleotide or amino acid), and optionally use V and J hits. Examples: CDR3|AA|V|J (overlap by a.a. CDR3 and V and J), VDJRegion|AA (overlap by a.a. VDJRegion ), CDR3|NT|V (overlap by nt CDR3 and V). --factor-by <meta>[,<meta>...] pools samples with the same values of specified metadata columns and performs overlap between such pooled samples --only-productive drop clonotypes with out-of-frame CDR3 sequence or CDR3 containing stop codon --chains <chains> possible values: TRAD , TRG , TCR , IGH , IGK , IGL , IG , ALL . Restrict the analysis to the specified immunological chains. --metadata <file> metadata file in a tab- ( .tsv ) or comma- ( .csv ) separated form. Must contain sample column which matches names of input files. Optionally may have chains column. --preproc-tables <path> output path for the preprocessing summary tables (filtering and downsampling) --tables <path> output path for tabular postanalysis results --group <meta> metadata column used to group samples into isolation groups ; postanalysis will be performed in each of the groups separately. It is possible to specify several isolation groups. MiXCR allows to override downsampling and filtering parameters for any postanalysis metric using -Oparameter=value syntax. Example: > mixcr postanalysis overlap \\ -OvUsage.weightFunction = read \\ ... The following options may be overridden: -O<metric>.downsampling=<downsampling> override default downsampling -O<metric>.dropOutliers=(true|false) override default setting for dropping outliers -O<metric>.weightFunction=<weightFunction> override default weight function -O<metric>.onlyProductive=(true|false) override default setting for filtering only productive clonotypes The following <metric> values are supported : sharedClonotypes , f1Index , f2Index , jaccardIndex , pearson , pearsonAll .","title":"Command line options"},{"location":"mixcr/reference/mixcr-postanalysis/#pairwise-distance-metrics","text":"Repertoire similarity measures include: Shared clonotypes \u2014 number of shared clonotypes Relative diversity \u2014 overlap diversity, computed with the following normalization: $$ D_{ij} = \\frac{d_{ij}}{d_{i}d_{j}} $$ where \\(d_{ij}\\) is the number of clonotypes present in both samples and \\(d_{i}\\) is the diversity of sample \\(i\\) . See this paper for the rationale behind normalization. Pearson \u2014 Pearson's correlation of clonotype frequencies, restricted only to the overlapping clonotypes: $$ R_{ij} = \\frac{\\sum^N_{k=1} \\left(\\phi_{ik} - \\bar{\\phi_{i}} \\right) \\left(\\phi_{jk} - \\bar{\\phi_{j}} \\right)}{\\sqrt{\\sum^N_{k=1} \\left(\\phi_{ik} - \\bar{\\phi_{i}} \\right)^2 \\sum^N_{k=1} \\left(\\phi_{jk} - \\bar{\\phi_{j}} \\right)^2}} $$ where \\(k=1 \\to N\\) are the indices of overlapping clonotypes, \\(\\phi_{ik}\\) is the frequency of clonotype \\(k\\) in sample \\(i\\) and \\(\\bar{\\phi_{i}}\\) is the average frequency of overlapping clonotypes in sample \\(i\\) . Pearson (all) \u2014 Pearson's correlation of clonotype frequencies, restricted only to the overlapping clonotypes F1 index \u2014 geometric mean of relative overlap frequencies: $$ F_{ij} = \\sqrt{f_{ij}f_{ji}} $$ where \\(f_{ij}=\\sum^N_{k=1}\\phi_{ik}\\) is the total frequency of clonotypes that overlap between samples \\(i\\) and \\(j\\) in sample \\(i\\) . F2 index \u2014 clonotype-wise sum of geometric mean frequencies: $$ F2_{ij} = \\sum^N_{k=1}\\sqrt{\\phi_{ik}\\phi_{jk}} $$ Note that this measure performs similar to \\(F\\) and provides slightly more robust results in case cross-sample contamination is present. Jaccard index .","title":"Pairwise distance metrics"},{"location":"mixcr/reference/mixcr-postanalysis/#preprocessing-summary-tables","text":"MiXCR provides detailed reports on preprocessing steps (filtering clonotypes and downsampling) applied for each of the computed postanalysis metrics. The typical report table looks like: characteristic sample preprocessor nElementsBefore sumWeightBefore nElementsAfter sumWeightAfter preprocessor#1 nElementsBefore#1 sumWeightBefore#1 nElementsAfter#1 sumWeightAfter#1 preprocessor#2 nElementsBefore#2 sumWeightBefore#2 nElementsAfter#2 sumWeightAfter#2 preprocessor#3 nElementsBefore#3 sumWeightBefore#3 nElementsAfter#3 sumWeightAfter#3 VSegmentUsage P21-M1-PD1.clns Filter TRA,TRD chains & Filter stops in CDR3, OOF in CDR3 & Downsample by umi automatic 309 2141.0 110 796.0 Filter TRA,TRD chains 309 2141.0 162 1186.0 Filter stops in CDR3, OOF in CDR3 162 1186.0 139 1143.0 Downsample by umi automatic 139 1143.0 110 796.0 Added N, nt P14-T0-TIGIT.clns Filter TRA,TRD chains & Filter stops in CDR3, OOF in CDR3 & Downsample by umi automatic 863 8478.0 189 796.0 Filter TRA,TRD chains 863 8478.0 412 3688.0 Filter stops in CDR3, OOF in CDR3 412 3688.0 311 3071.0 Downsample by umi automatic 311 3071.0 189 796.0 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... The meaning of the columns is the following: characteristic name for a group of metrics for which the same downsampling was applied preprocessor the name of the overall preprocessing chain applied to the dataset nElementsBefore number of clonotypes before any preprocessing applied (that is in the initial dataset) sumWeightBefore total weight of all clonotypes before any preprocessing applied nElementsAfter number of clonotypes in the dataset after all preprocessing applied sumWeightBefore total weight of all clonotypes after all preprocessing applied. preprocessor#i and following columns report columns for i-th step in the preprocessing chain","title":"Preprocessing summary tables"},{"location":"mixcr/reference/ref-gene-features/","text":"Gene features and anchor points There are several immunologically important parts of TCR/BCR gene ( gene features ). For example, such regions are three complementarity determining regions ( CDR1 , CDR2 and CDR3 ), four framework regions ( FR1 , FR2 , FR3 and FR4 ) etc. The key feature of MiXCR is the possibility to specify: regions of reference V, D, J and C genes sequences that are used in alignment of raw reads regions of sequence to be exported by exportAlignments regions of sequence to use as clonal sequence in clone assembly regions of clonal sequences to be exported by exportClones For convenience, in MiXCR these regions can be specified in terms of above-mentioned immunological gene features. The illustrated list of predefined gene features can be found below. The set of possible gene regions is not limited by this list: boundary points of gene features (called anchor points ) can be used to specify begin and end of custom gene regions gene features can be concatenated (e.g. VTranscript = {V5UTRBegin:L1End}+{L2Begin:VEnd} ). offsets can be added or subtracted from original positions of anchor points to define even more custom gene regions (for more detailed description see gene feature syntax ) Naming of gene features is based on IMGT convention described in Lefranc et al. (2003), Developmental & Comparative Immunology 27.1 (2003): 55-77 . Germline features Features defined for germline genes are mainly used in align and export . V Gene structure Additionally to core gene features in V region (like FR3 ) we introduce VGene , VTranscript and VRegion for convenience. D Gene structure J Gene structure Mature TCR/BCR gene features Features described here (like CDR3 ) cannot not be used for align , since they are not defined for germline genes. V(D)J junction structure Important difference between rearranged TCR/BCR sequence and germline sequence of its segments lies in the fact that during V(D)J recombination exact cleavage positions at the end of V gene, begin and end of D gene and begin of J gene varies. As a result in most cases actual VEnd , DBegin , DEnd and JBegin anchor positions are not covered by alignment: In order to use actual V, D, J gene boundaries we introduce four additional anchor positions: VEndTrimmed , DBeginTrimmed , DEndTrimmed and JBeginTrimmed and several named gene features: VDJunction , DJJunction and VJJunction . On the following picture one can see the structure of V(D)J junction: If D gene is not found in the sequence or is not present in target locus (e.g. TRA), DBeginTrimmed and DEndTrimmed anchor points as well as VDJunction and DJJunction gene features are not defined. Similar to ...Trimmed anchor points in V(D)J junction there is a V5UTRBeginTrimmed anchor point representing left bound of alignment upstream start codon. This point is required because 5'UTR could have different length from transcript to transcript, and because library of gene segments inside MiXCR does not have information on exact 5'UTR lengths. Gene feature syntax Syntax for gene features is the same everywhere. The best way to explain it is by example: to enter any gene feature listed in the next section just use its name: VTranscript , CDR2 , V5UTR etc. to define a gene feature consisting of several concatenated features use +: V5UTR+L1+L2+VRegion is equivalent to VTranscript to create gene feature starting at anchor point X and ending at anchor point Y use {X:Y} syntax: {CDR3Begin:CDR3End} for CDR3 . one can add or subtract offset from original position of anchor point using positive or negative integer value in brackets after anchor point name AnchorPoint(offset): {CDR3Begin(+3):CDR3End} for CDR3 without first three nucleotides (coding conserved cysteine), {CDR3Begin(-6):CDR3End(+6)} for CDR3 with 6 nucleotides downstream its left bound and 6 nucleotides upstream its right bound. one can specify offsets for predefined gene feature boundaries using GeneFeatureName(leftOffset, rightOffset) syntax: CDR3(3,0) , CDR3(-6,6) - equivalents of two examples from previous item all syntax constructs can be combined: {L1Begin(-12):L1End}+L2+VRegion(0,+10)} . V5UTRGermline ( equals to {UTR5Begin:V5UTREnd} ) 5'UTR; germline VTranscript ( equals to {UTR5Begin:L1End} + {L2Begin:VEnd} ) V5UTR + Exon1 + VExon2 . Common reference feature used in alignments for cDNA data obtained using 5'RACE (that may contain UTRs). VGene ( equals to {UTR5Begin:VEnd} ) {V5UTRBegin:VEnd} . Common reference feature used in alignments for genomic DNA data. VTranscriptWithP ( equals to {UTR5Begin:L1End} + {L2Begin:VEnd} + {VEnd:VEnd (-20)} ) V5UTR + Exon1 + VExon2 . Common reference feature used in alignments for cDNA data obtained using 5'RACE (that may contain UTRs). Contains reference for P region. VGeneWithP ( equals to {UTR5Begin:VEnd} + {VEnd:VEnd (-20)} ) {V5UTRBegin:VEnd} . Common reference feature used in alignments for genomic DNA data. Contains reference for P region. VDJTranscript ( equals to {UTR5Begin:L1End} + {L2Begin:FR4End} ) First two exons with 5'UTR of IG/TCR gene. V5UTR ( equals to {V5UTRBeginTrimmed:V5UTREnd} ) 5'UTR in aligned sequence; trimmed L1 ( equals to {L1Begin:L1End} ) Part of lider sequence in first exon. The same as Exon1 . VLIntronL ( equals to {L1Begin:L2End} ) L1 + VIntron + L2 Exon1 ( equals to {L1Begin:L1End} ) First exon. The same as L1 . L ( equals to {L1Begin:L1End} + {L2Begin:L2End} ) Full leader sequence VTranscriptWithout5UTR ( equals to {L1Begin:L1End} + {L2Begin:VEnd} ) Exon1 + VExon2 . Common reference feature used in alignments for mRNA data obtained without 5'RACE. VTranscriptWithout5UTRWithP ( equals to {L1Begin:L1End} + {L2Begin:VEnd} + {VEnd:VEnd (-20)} ) Exon1 + VExon2 . Common reference feature used in alignments for mRNA data obtained without 5'RACE. Contains reference for P region. VDJTranscriptWithout5UTR ( equals to {L1Begin:L1End} + {L2Begin:FR4End} ) First two exons of IG/TCR gene. VIntron ( equals to {VIntronBegin:VIntronEnd} ) Intron in V region. L2 ( equals to {L2Begin:L2End} ) Part of lider sequence in second exon. Exon2 ( equals to {L2Begin:FR4End} ) Full second exon of IG/TCR gene. VExon2 ( equals to {L2Begin:VEnd} ) Second exon of V gene. VExon2Trimmed ( equals to {L2Begin:VEndTrimmed} ) Second exon of V gene trimmed. Ends within CDR3 in V (D)J rearrangement. VRegion ( equals to {FR1Begin:VEnd} ) Full V Region; germline VRegionWithP ( equals to {FR1Begin:VEnd} + {VEnd:VEnd (-20)} ) Full V Region with P-segment; to be used as alignment reference VRegionTrimmed ( equals to {FR1Begin:VEndTrimmed} ) Full V Region in rearranged sequence, e.g. after trimming FR1 ( equals to {FR1Begin:FR1End} ) Framework 1 VDJRegion ( equals to {FR1Begin:FR4End} ) Full V, D, J assembly without 5'UTR and leader sequence. CDR1 ( equals to {CDR1Begin:CDR1End} ) CDR1 (Complementarity determining region 1) FR2 ( equals to {FR2Begin:FR2End} ) Framework 2 CDR2 ( equals to {CDR2Begin:CDR2End} ) CDR2 (Complementarity determining region 2) FR3 ( equals to {FR3Begin:FR3End} ) Framework 2 CDR3 ( equals to {CDR3Begin:CDR3End} ) CDR3 (Complementarity determining region 3). Cys from V region and Phe/Trp from J region included. VCDR3Part ( equals to {CDR3Begin:VEndTrimmed} ) Part of V region inside CDR3 (commonly starts from Cys) GermlineVCDR3Part ( equals to {CDR3Begin:VEnd} ) Part of V region inside CDR3 (commonly starts from Cys) ShortCDR3 ( equals to {CDR3Begin (3):CDR3End (-3)} ) CDR3 (Complementarity determining region 3). Cys from V region and Phe/Trp from J region excluded. VDJunction ( equals to {VEndTrimmed:DBeginTrimmed} ) N region between V and D genes; not defined for loci without D genes and for V (D)J rearrangement with unidentified D region. VJJunction ( equals to {VEndTrimmed:JBeginTrimmed} ) Region between V and J regions. For loci without D genes - fully composed from non-template nucleotides. May contain D region. VPSegment ( equals to {VEnd:VEndTrimmed} ) P-segment of V gene GermlineVPSegment ( equals to {VEnd:VEnd (-20)} ) P-segment of V gene to be used as alignment reference DRegion ( equals to {DBegin:DEnd} ) Full D Region; germline DLeftPSegment ( equals to {DBeginTrimmed:DBegin} ) Left P-segment of D gene DCDR3Part ( equals to {DBeginTrimmed:DEndTrimmed} ) Full D Region in rearranged sequence, e.g. after trimming DJJunction ( equals to {DEndTrimmed:JBeginTrimmed} ) N region between V and D genes; not defined for loci without D genes and for V (D)J rearrangement with unidentified D region. DRightPSegment ( equals to {DEnd:DEndTrimmed} ) Right P-segment of D gene GermlineDPSegment ( equals to {DEnd:DBegin} ) P-segment of D gene to be used as alignment reference DRegionWithP ( equals to {DEnd:DBegin} + {DBegin:DEnd} + {DEnd:DBegin} ) Full D Region with P-segment; to be used as alignment reference JRegion ( equals to {JBegin:FR4End} ) Full J Region; germline GermlineJCDR3Part ( equals to {JBegin:CDR3End} ) Part of J region inside CDR3 (commonly ends with Phe/Trp) GermlineJPSegment ( equals to {JBegin (20):JBegin} ) P-segment of J gene to be used as alignment reference JRegionWithP ( equals to {JBegin (20):JBegin} + {JBegin:FR4End} ) Full J Region with P-segment; to be used as alignment reference JPSegment ( equals to {JBeginTrimmed:JBegin} ) P-segment of J gene JRegionTrimmed ( equals to {JBeginTrimmed:FR4End} ) Full J Region in rearranged sequence, e.g. after trimming JCDR3Part ( equals to {JBeginTrimmed:CDR3End} ) Part of J region inside CDR3 (commonly ends with Phe/Trp) FR4 ( equals to {FR4Begin:FR4End} ) Framework 4 (J region after CDR3) CExon1 ( equals to {CBegin:CExon1End} ) First exon of C Region CRegion ( equals to {CBegin:CEnd} ) Full C region List of predefined reference points UTR5Begin Beginning of IG/TCR transcript V5UTREnd End of 5'UTR, beginning of IG/TCR CDS as listed in database V5UTRBeginTrimmed End of 5'UTR, beginning of IG/TCR CDS as observed in the data L1Begin End of 5'UTR, beginning of IG/TCR CDS L1End End of first exon, beginning of V intron VIntronBegin End of first exon, beginning of V intron VIntronEnd End of V intron, beginning of second exon L2Begin End of V intron, beginning of second exon L2End End of lider sequence, beginning of sequence that codes IG/TCR protein, beginning of FR1. FR1Begin End of lider sequence, beginning of sequence that codes IG/TCR protein, beginning of FR1. FR1End End of FR1, beginning of CDR1 CDR1Begin End of FR1, beginning of CDR1 CDR1End End of CDR1, beginning of FR2 FR2Begin End of CDR1, beginning of FR2 FR2End End of FR2, beginning of CDR2 CDR2Begin End of FR2, beginning of CDR2 CDR2End End of CDR2, beginning of FR3 FR3Begin End of CDR2, beginning of FR3 FR3End End of FR3, beginning of CDR3 CDR3Begin End of FR3, beginning of CDR3 VEndTrimmed End of V region after V(D)J rearrangement (commonly inside CDR3) VEnd End of V region in genome DBegin Beginning of D region in genome DBeginTrimmed Beginning of D region after VDJ rearrangement DEndTrimmed End of D region after VDJ rearrangement DEnd End of D region in genome JBegin Beginning of J region in genome JBeginTrimmed Beginning of J region after V(D)J rearrangement CDR3End End of CDR3, beginning of FR4 FR4Begin End of CDR3, beginning of FR4 FR4End End of FR4 CBegin Beginning of C Region CExon1End End of C Region first exon (Exon 3 of assembled TCR/IG gene) CEnd End of C Region","title":"Gene features and reference points"},{"location":"mixcr/reference/ref-gene-features/#gene-features-and-anchor-points","text":"There are several immunologically important parts of TCR/BCR gene ( gene features ). For example, such regions are three complementarity determining regions ( CDR1 , CDR2 and CDR3 ), four framework regions ( FR1 , FR2 , FR3 and FR4 ) etc. The key feature of MiXCR is the possibility to specify: regions of reference V, D, J and C genes sequences that are used in alignment of raw reads regions of sequence to be exported by exportAlignments regions of sequence to use as clonal sequence in clone assembly regions of clonal sequences to be exported by exportClones For convenience, in MiXCR these regions can be specified in terms of above-mentioned immunological gene features. The illustrated list of predefined gene features can be found below. The set of possible gene regions is not limited by this list: boundary points of gene features (called anchor points ) can be used to specify begin and end of custom gene regions gene features can be concatenated (e.g. VTranscript = {V5UTRBegin:L1End}+{L2Begin:VEnd} ). offsets can be added or subtracted from original positions of anchor points to define even more custom gene regions (for more detailed description see gene feature syntax ) Naming of gene features is based on IMGT convention described in Lefranc et al. (2003), Developmental & Comparative Immunology 27.1 (2003): 55-77 .","title":"Gene features and anchor points"},{"location":"mixcr/reference/ref-gene-features/#germline-features","text":"Features defined for germline genes are mainly used in align and export .","title":"Germline features"},{"location":"mixcr/reference/ref-gene-features/#v-gene-structure","text":"Additionally to core gene features in V region (like FR3 ) we introduce VGene , VTranscript and VRegion for convenience.","title":"V Gene structure"},{"location":"mixcr/reference/ref-gene-features/#d-gene-structure","text":"","title":"D Gene structure"},{"location":"mixcr/reference/ref-gene-features/#j-gene-structure","text":"","title":"J Gene structure"},{"location":"mixcr/reference/ref-gene-features/#mature-tcrbcr-gene-features","text":"Features described here (like CDR3 ) cannot not be used for align , since they are not defined for germline genes.","title":"Mature TCR/BCR gene features"},{"location":"mixcr/reference/ref-gene-features/#vdj-junction-structure","text":"Important difference between rearranged TCR/BCR sequence and germline sequence of its segments lies in the fact that during V(D)J recombination exact cleavage positions at the end of V gene, begin and end of D gene and begin of J gene varies. As a result in most cases actual VEnd , DBegin , DEnd and JBegin anchor positions are not covered by alignment: In order to use actual V, D, J gene boundaries we introduce four additional anchor positions: VEndTrimmed , DBeginTrimmed , DEndTrimmed and JBeginTrimmed and several named gene features: VDJunction , DJJunction and VJJunction . On the following picture one can see the structure of V(D)J junction: If D gene is not found in the sequence or is not present in target locus (e.g. TRA), DBeginTrimmed and DEndTrimmed anchor points as well as VDJunction and DJJunction gene features are not defined. Similar to ...Trimmed anchor points in V(D)J junction there is a V5UTRBeginTrimmed anchor point representing left bound of alignment upstream start codon. This point is required because 5'UTR could have different length from transcript to transcript, and because library of gene segments inside MiXCR does not have information on exact 5'UTR lengths.","title":"V(D)J junction structure"},{"location":"mixcr/reference/ref-gene-features/#gene-feature-syntax","text":"Syntax for gene features is the same everywhere. The best way to explain it is by example: to enter any gene feature listed in the next section just use its name: VTranscript , CDR2 , V5UTR etc. to define a gene feature consisting of several concatenated features use +: V5UTR+L1+L2+VRegion is equivalent to VTranscript to create gene feature starting at anchor point X and ending at anchor point Y use {X:Y} syntax: {CDR3Begin:CDR3End} for CDR3 . one can add or subtract offset from original position of anchor point using positive or negative integer value in brackets after anchor point name AnchorPoint(offset): {CDR3Begin(+3):CDR3End} for CDR3 without first three nucleotides (coding conserved cysteine), {CDR3Begin(-6):CDR3End(+6)} for CDR3 with 6 nucleotides downstream its left bound and 6 nucleotides upstream its right bound. one can specify offsets for predefined gene feature boundaries using GeneFeatureName(leftOffset, rightOffset) syntax: CDR3(3,0) , CDR3(-6,6) - equivalents of two examples from previous item all syntax constructs can be combined: {L1Begin(-12):L1End}+L2+VRegion(0,+10)} . V5UTRGermline ( equals to {UTR5Begin:V5UTREnd} ) 5'UTR; germline VTranscript ( equals to {UTR5Begin:L1End} + {L2Begin:VEnd} ) V5UTR + Exon1 + VExon2 . Common reference feature used in alignments for cDNA data obtained using 5'RACE (that may contain UTRs). VGene ( equals to {UTR5Begin:VEnd} ) {V5UTRBegin:VEnd} . Common reference feature used in alignments for genomic DNA data. VTranscriptWithP ( equals to {UTR5Begin:L1End} + {L2Begin:VEnd} + {VEnd:VEnd (-20)} ) V5UTR + Exon1 + VExon2 . Common reference feature used in alignments for cDNA data obtained using 5'RACE (that may contain UTRs). Contains reference for P region. VGeneWithP ( equals to {UTR5Begin:VEnd} + {VEnd:VEnd (-20)} ) {V5UTRBegin:VEnd} . Common reference feature used in alignments for genomic DNA data. Contains reference for P region. VDJTranscript ( equals to {UTR5Begin:L1End} + {L2Begin:FR4End} ) First two exons with 5'UTR of IG/TCR gene. V5UTR ( equals to {V5UTRBeginTrimmed:V5UTREnd} ) 5'UTR in aligned sequence; trimmed L1 ( equals to {L1Begin:L1End} ) Part of lider sequence in first exon. The same as Exon1 . VLIntronL ( equals to {L1Begin:L2End} ) L1 + VIntron + L2 Exon1 ( equals to {L1Begin:L1End} ) First exon. The same as L1 . L ( equals to {L1Begin:L1End} + {L2Begin:L2End} ) Full leader sequence VTranscriptWithout5UTR ( equals to {L1Begin:L1End} + {L2Begin:VEnd} ) Exon1 + VExon2 . Common reference feature used in alignments for mRNA data obtained without 5'RACE. VTranscriptWithout5UTRWithP ( equals to {L1Begin:L1End} + {L2Begin:VEnd} + {VEnd:VEnd (-20)} ) Exon1 + VExon2 . Common reference feature used in alignments for mRNA data obtained without 5'RACE. Contains reference for P region. VDJTranscriptWithout5UTR ( equals to {L1Begin:L1End} + {L2Begin:FR4End} ) First two exons of IG/TCR gene. VIntron ( equals to {VIntronBegin:VIntronEnd} ) Intron in V region. L2 ( equals to {L2Begin:L2End} ) Part of lider sequence in second exon. Exon2 ( equals to {L2Begin:FR4End} ) Full second exon of IG/TCR gene. VExon2 ( equals to {L2Begin:VEnd} ) Second exon of V gene. VExon2Trimmed ( equals to {L2Begin:VEndTrimmed} ) Second exon of V gene trimmed. Ends within CDR3 in V (D)J rearrangement. VRegion ( equals to {FR1Begin:VEnd} ) Full V Region; germline VRegionWithP ( equals to {FR1Begin:VEnd} + {VEnd:VEnd (-20)} ) Full V Region with P-segment; to be used as alignment reference VRegionTrimmed ( equals to {FR1Begin:VEndTrimmed} ) Full V Region in rearranged sequence, e.g. after trimming FR1 ( equals to {FR1Begin:FR1End} ) Framework 1 VDJRegion ( equals to {FR1Begin:FR4End} ) Full V, D, J assembly without 5'UTR and leader sequence. CDR1 ( equals to {CDR1Begin:CDR1End} ) CDR1 (Complementarity determining region 1) FR2 ( equals to {FR2Begin:FR2End} ) Framework 2 CDR2 ( equals to {CDR2Begin:CDR2End} ) CDR2 (Complementarity determining region 2) FR3 ( equals to {FR3Begin:FR3End} ) Framework 2 CDR3 ( equals to {CDR3Begin:CDR3End} ) CDR3 (Complementarity determining region 3). Cys from V region and Phe/Trp from J region included. VCDR3Part ( equals to {CDR3Begin:VEndTrimmed} ) Part of V region inside CDR3 (commonly starts from Cys) GermlineVCDR3Part ( equals to {CDR3Begin:VEnd} ) Part of V region inside CDR3 (commonly starts from Cys) ShortCDR3 ( equals to {CDR3Begin (3):CDR3End (-3)} ) CDR3 (Complementarity determining region 3). Cys from V region and Phe/Trp from J region excluded. VDJunction ( equals to {VEndTrimmed:DBeginTrimmed} ) N region between V and D genes; not defined for loci without D genes and for V (D)J rearrangement with unidentified D region. VJJunction ( equals to {VEndTrimmed:JBeginTrimmed} ) Region between V and J regions. For loci without D genes - fully composed from non-template nucleotides. May contain D region. VPSegment ( equals to {VEnd:VEndTrimmed} ) P-segment of V gene GermlineVPSegment ( equals to {VEnd:VEnd (-20)} ) P-segment of V gene to be used as alignment reference DRegion ( equals to {DBegin:DEnd} ) Full D Region; germline DLeftPSegment ( equals to {DBeginTrimmed:DBegin} ) Left P-segment of D gene DCDR3Part ( equals to {DBeginTrimmed:DEndTrimmed} ) Full D Region in rearranged sequence, e.g. after trimming DJJunction ( equals to {DEndTrimmed:JBeginTrimmed} ) N region between V and D genes; not defined for loci without D genes and for V (D)J rearrangement with unidentified D region. DRightPSegment ( equals to {DEnd:DEndTrimmed} ) Right P-segment of D gene GermlineDPSegment ( equals to {DEnd:DBegin} ) P-segment of D gene to be used as alignment reference DRegionWithP ( equals to {DEnd:DBegin} + {DBegin:DEnd} + {DEnd:DBegin} ) Full D Region with P-segment; to be used as alignment reference JRegion ( equals to {JBegin:FR4End} ) Full J Region; germline GermlineJCDR3Part ( equals to {JBegin:CDR3End} ) Part of J region inside CDR3 (commonly ends with Phe/Trp) GermlineJPSegment ( equals to {JBegin (20):JBegin} ) P-segment of J gene to be used as alignment reference JRegionWithP ( equals to {JBegin (20):JBegin} + {JBegin:FR4End} ) Full J Region with P-segment; to be used as alignment reference JPSegment ( equals to {JBeginTrimmed:JBegin} ) P-segment of J gene JRegionTrimmed ( equals to {JBeginTrimmed:FR4End} ) Full J Region in rearranged sequence, e.g. after trimming JCDR3Part ( equals to {JBeginTrimmed:CDR3End} ) Part of J region inside CDR3 (commonly ends with Phe/Trp) FR4 ( equals to {FR4Begin:FR4End} ) Framework 4 (J region after CDR3) CExon1 ( equals to {CBegin:CExon1End} ) First exon of C Region CRegion ( equals to {CBegin:CEnd} ) Full C region","title":"Gene feature syntax"},{"location":"mixcr/reference/ref-gene-features/#list-of-predefined-reference-points","text":"UTR5Begin Beginning of IG/TCR transcript V5UTREnd End of 5'UTR, beginning of IG/TCR CDS as listed in database V5UTRBeginTrimmed End of 5'UTR, beginning of IG/TCR CDS as observed in the data L1Begin End of 5'UTR, beginning of IG/TCR CDS L1End End of first exon, beginning of V intron VIntronBegin End of first exon, beginning of V intron VIntronEnd End of V intron, beginning of second exon L2Begin End of V intron, beginning of second exon L2End End of lider sequence, beginning of sequence that codes IG/TCR protein, beginning of FR1. FR1Begin End of lider sequence, beginning of sequence that codes IG/TCR protein, beginning of FR1. FR1End End of FR1, beginning of CDR1 CDR1Begin End of FR1, beginning of CDR1 CDR1End End of CDR1, beginning of FR2 FR2Begin End of CDR1, beginning of FR2 FR2End End of FR2, beginning of CDR2 CDR2Begin End of FR2, beginning of CDR2 CDR2End End of CDR2, beginning of FR3 FR3Begin End of CDR2, beginning of FR3 FR3End End of FR3, beginning of CDR3 CDR3Begin End of FR3, beginning of CDR3 VEndTrimmed End of V region after V(D)J rearrangement (commonly inside CDR3) VEnd End of V region in genome DBegin Beginning of D region in genome DBeginTrimmed Beginning of D region after VDJ rearrangement DEndTrimmed End of D region after VDJ rearrangement DEnd End of D region in genome JBegin Beginning of J region in genome JBeginTrimmed Beginning of J region after V(D)J rearrangement CDR3End End of CDR3, beginning of FR4 FR4Begin End of CDR3, beginning of FR4 FR4End End of FR4 CBegin Beginning of C Region CExon1End End of C Region first exon (Exon 3 of assembled TCR/IG gene) CEnd End of C Region","title":"List of predefined reference points"},{"location":"mixcr/reference/ref-mutations-encoding/","text":"Alignment and mutations encoding MiXCR outputs alignments in exportClones and exportAlignments as a list of 7 fields separated by | symbol as follows: targetFrom | targetTo | targetLength | queryFrom | queryTo | mutations | alignmentScore where targetFrom - position of first aligned nucleotide in target sequence (sequence of gene feature from reference V, D, J or C gene used in alignment; e.g. VRegion in TRBV12-2); this boundary is inclusive targetTo - next position after last aligned nucleotide in target sequence ; this boundary is exclusive targetLength - length of target sequence (e.g. length of VRegion in TRBV12-2) queryFrom - position of first aligned nucleotide in query sequence (sequence of sequencing read or clonal sequence); this boundary is inclusive queryTo - next position after last aligned nucleotide in query sequence ; this boundary is exclusive mutations - list of mutations from target sequence to query sequence (see below) alignmentScore - score of alignment all positions are zero-based (i.e. first nucleotide has index 0) Mutations are encoded as a list of single-nucleotide edits (similar to what is used in definition of Levenshtein distance, i.e. insertions, deletions or substitutions); if one apply these mutations to aligned subsequence of target sequence , one will obtain aligned subsequence of query sequence . Each single mutation (single-nucleotide edit) is encoded in the following way (without any spaces; some fields may absent in some cases, see description): type [fromNucleotide] position [toNucleotide] type of mutation (one letter): S for substitution D for deletion I for insertion fromNucleotide is a nucleotide in target sequence affected by mutation (applicable only for substitutions and deletions; absent for insertions) position is a zero-based absolute position in target sequence affected by mutation; for insertions denotes position in target sequence right after inserted nucleotide toNucleotide nucleotide after mutation (applicable only for substitutions and insertions; absent for deletions) Note , that for deletions and substitutions targetSequence[position] == fromNucleotide i.e. target sequence always have fromNucleotide at position; for insertions fromNucleotide field is absent. Here are several examples of single mutations: SA4T - substitution of A at position 4 to T DC12 - deletion of C at position 12 I15G - insertion of G before position 15 Consider the following BLAST-like alignments encoded in MiXCR notation: target = TTGTGCTGACAGATACCCC query = CGAGTGCTGACAGATACCGTCGATGCT BLAST like alignment: 2 GTGCTGACAGATACC 16 ||||||||||||||| 3 GTGCTGACAGATACC 17 MiXCR alignment: 2|17|19|3|18||75.0 subsequence from target (from nucleotide 0 to nucleotide 15) was found to be identical to susequence from query (from nucleotide 3 to nucleotide 18). Alignment with mutation target = TTGTGCTGACAGATACCCC query = CGAGTGCTATAGACTACCGTCGATGCT BLAST like alignment: 2 GTGCTGACAGA-TACC 16 ||||| | ||| |||| 3 GTGCT-ATAGACTACC 17 MiXCR alignment: 2|17|19|3|18|DG7SC9TI13C|41.0 so, to obtain subseqeunce from query sequence from 3 to 18 we need to apply the following mutations to subsequence of target sequence from 2 to 16: - deletion of G at position 7 - substitution of C at position 9 to T - insertion of C before at position 13 .","title":"Mutations encoding"},{"location":"mixcr/reference/ref-mutations-encoding/#alignment-and-mutations-encoding","text":"MiXCR outputs alignments in exportClones and exportAlignments as a list of 7 fields separated by | symbol as follows: targetFrom | targetTo | targetLength | queryFrom | queryTo | mutations | alignmentScore where targetFrom - position of first aligned nucleotide in target sequence (sequence of gene feature from reference V, D, J or C gene used in alignment; e.g. VRegion in TRBV12-2); this boundary is inclusive targetTo - next position after last aligned nucleotide in target sequence ; this boundary is exclusive targetLength - length of target sequence (e.g. length of VRegion in TRBV12-2) queryFrom - position of first aligned nucleotide in query sequence (sequence of sequencing read or clonal sequence); this boundary is inclusive queryTo - next position after last aligned nucleotide in query sequence ; this boundary is exclusive mutations - list of mutations from target sequence to query sequence (see below) alignmentScore - score of alignment all positions are zero-based (i.e. first nucleotide has index 0) Mutations are encoded as a list of single-nucleotide edits (similar to what is used in definition of Levenshtein distance, i.e. insertions, deletions or substitutions); if one apply these mutations to aligned subsequence of target sequence , one will obtain aligned subsequence of query sequence . Each single mutation (single-nucleotide edit) is encoded in the following way (without any spaces; some fields may absent in some cases, see description): type [fromNucleotide] position [toNucleotide] type of mutation (one letter): S for substitution D for deletion I for insertion fromNucleotide is a nucleotide in target sequence affected by mutation (applicable only for substitutions and deletions; absent for insertions) position is a zero-based absolute position in target sequence affected by mutation; for insertions denotes position in target sequence right after inserted nucleotide toNucleotide nucleotide after mutation (applicable only for substitutions and insertions; absent for deletions) Note , that for deletions and substitutions targetSequence[position] == fromNucleotide i.e. target sequence always have fromNucleotide at position; for insertions fromNucleotide field is absent. Here are several examples of single mutations: SA4T - substitution of A at position 4 to T DC12 - deletion of C at position 12 I15G - insertion of G before position 15 Consider the following BLAST-like alignments encoded in MiXCR notation: target = TTGTGCTGACAGATACCCC query = CGAGTGCTGACAGATACCGTCGATGCT BLAST like alignment: 2 GTGCTGACAGATACC 16 ||||||||||||||| 3 GTGCTGACAGATACC 17 MiXCR alignment: 2|17|19|3|18||75.0 subsequence from target (from nucleotide 0 to nucleotide 15) was found to be identical to susequence from query (from nucleotide 3 to nucleotide 18). Alignment with mutation target = TTGTGCTGACAGATACCCC query = CGAGTGCTATAGACTACCGTCGATGCT BLAST like alignment: 2 GTGCTGACAGA-TACC 16 ||||| | ||| |||| 3 GTGCT-ATAGACTACC 17 MiXCR alignment: 2|17|19|3|18|DG7SC9TI13C|41.0 so, to obtain subseqeunce from query sequence from 3 to 18 we need to apply the following mutations to subsequence of target sequence from 2 to 16: - deletion of G at position 7 - substitution of C at position 9 to T - insertion of C before at position 13 .","title":"Alignment and mutations encoding"},{"location":"mixcr/reference/ref-tag-pattern/","text":"Barcode pattern syntax Barcode patterns are used to extract various barcodes (sample barcodes, UMIs, cell barcodes) from raw sequences, trim sequencing reads or filter some sequences out. MiXCR/MiTool provides a powerful pattern-matching regex-like language to specify almost arbitrary barcodes structure. In MiXCR one cane specify pattern directly at align step or analyze using --tag-pattern option. In MiTool patten must be provided for parse step. Example: > mixcr align -s mmu \\ --tag-pattern \"^(UMI:N{3:5})attgcccgAAA\\*\" \\ input_R1.fastq input_R2.fastq output.vdjca Basic Syntax Elements Uppercase/lowercase letters Uppercase and lowercase letters are used to specify the sequence that must be matched. Capital letters imply perfect match. Lowercase letters allow fuzzy match, where max total mismatches is determined by --tag-max-error-budget (indels are not supported). The --tag-max-error-budget value (default 10 ) is defined as a total penalty score in bits: - one mismatch with normal nucleotide (a,t,g,c) costs 2 bits, - one mismatch with IUPAC wildcards ((N, w, s, m, etc)) costs 1 bit. Each pattern has to start with ^ which defines the read beginning. Examples: \"^ATGC\u0441taggcTTCGA\" matches: ATGCCTAGGCTTCGA.... ATGCGTAGGCTTCGA.... ATGCCAACGCTTCGA.... Backslash \\ Backslash symbol \\ is a mate-pair separator. The patter to the left side of the separator will be matched against the first file provided in input (usually R1 ), the pattern to the right side will be matched against the second input file (usually R2 ). In case of single-read input file, \\ character should be omitted. By default, during barcode extraction MiTool will check input reads in the order in which they are specified in --input argument. If --tag-parse-unstranded argument is specified, it will also try to match pattern in the other read file. Examples: \"^ATTAGACA \\ ^CACATATA\" By default matches: R1: ATTAGACA....... R2: CACATATA....... but not: R2: ATTAGACA...... R1: CACATATA...... With --tag-parse-unstranded the last match is also allowed. Wildcard * Asterisk symbol * means any nucleotide any number of times. Examples: \"^* \\ ^CACATATA\" matches: R1 : TGGATTCAGCGC... R2: CACATATA... Repeat {<X>} {<X>} - repeats the last symbol X number of times. Examples: \"^G{4}*\" matches: GGGGTCCACAT \"^A{1:3}*\" matches: ATGGGCAT AATGGGCAT AAATGGGCAT \"^A{:3}*\" matches: ATGGGCAT AATGGGCAT AAATGGGCAT \"^A{3:}*\" matches: AAATGGGCAT AAAATGGGCAT AAAAATGGGCAT Note: * matches the same pattern as N{:} Trimming <{<X>} and >{<X>} allows to trim 0 to X number of nucleotides from left or right side of the pattern respectively. Examples: \"^<{3}ATTAGACA\" equals: ^<<<ATTAGACA Matches: ATTAGACAATTAGACAATTAGACA... TTAGACAATTAGACAATTAGACA... TAGACAATTAGACAATTAGACA... AGACAATTAGACAATTAGACA... \"ATTAGACA>{3}(R1:*)\" Matches: GATGTATTAGACAGACGAGTCATGCGTATT... ========[------R1----------- GATGTATTAGACGACGAGTCATGCGTATT.... =======[-------R1----------- GATGTATTAGAGACGAGTCATGCGTATT..... ======[-------R1------------ GATGTATTAGGACGAGTCATGCGTATT...... =====[--------R1------------ Capture groups MiTool allows to extract multiple number of groups and assigns them to the read (or alignment in case of MiXCR). Typical groups are different types of barcodes: molecular barcode, sample barcode, cell barcode etc. Group is defined inside round brackets () in the following manner: (GROUM_NAME:pattern) examples: (UMI:NNNNANNNNNANNNN) (SMPL:NNNN) (CELL:atgcTTGANNNNNNNNTGAATCCNN) (R1:*) (SMPL:NNNN)(UMI:N{12}(R1:*) Some rules apply to group names: - Everything that starts with CELL is treated as a cell barcode - Everything that starts with UMI or MI (ex. MIG ) is used as a molecular barcode - Everything that starts with S is a sample barcode. - R1 , R2 etc. groups define the payload read sequence. - Groups with names that don't fall under the rules above will be ignored Important: sequences outside R1 , R2 , etc. groups will be ignored and will not be used in analysis. Examples: \"^(CELL:N{4})(UMI:N{5})\\^(R2:*)\" matches: R1: ATGCGGGTGACCTTGAGGTGGACC... R2: TGGGGTAGCCTACCGTGGACACTG... In the example above only two groups from the first read will be extracted and rest of the sequence will be ignored:\\ CELL:ATGC \\ UMI:GGGTG The whole sequence of the read from the second file will be extracted with R2 tag and will be used in the downstream analysis. This pattern is commonly used when only one read has CDR3 sequence in it ( R2 in this case) and the other one is used for extracting molecular and/or cell barcode. Logical OR There are two levels at which logical \"OR\" can be applied: | - single read level \"or\" \\ || - whole pattern level \"or\" Constrains: - There must be the same set of matching groups on both sides of \"|\" and \"||\" - There must be the same number of sub-read patterns on both sides of \"||\" Examples: \"^ATTAGACA(UMI:NNNN)(R1:*) | ^TGCTTGCA(UMI:NNNN)(R1:*) \\ ^(R2:*)\" matches: R1: ATTAGACATTGCCCTGGGATCCG... R2: TGCCGTGATTATGCCGTGATTGT... and R1: TGCTTGCATTGCCCTGGGATCCG... R2: TGCCGTGATTATGCCGTGATTGT... \"^ATTAGACA(UMI:NNNN) | ^AGGACACA(UMI:NNNN) \\ ^GATACGA || ^GATAGAC \\ ^TAGCA(UMI:NNNNNNN)\" matches: R1: ATTAGACAtgctaagc.... R2: GATACgtacgttgtta.... R1: AGGACACAgctaagct.... R2: GATACgtacgttgtta.... R1: GATAGACtgctaagc.... R2: TAGCAgtacgttgtt.... The following patterns will result in an error due to violation of the constraints mentioned above: ^ATTAGACA(UMI:NNNN) | ^ATTACACA \\ ^GATACGA || ^GATAGAC \\ ^TAGCA(UMI:NNNNNNN) ^ATTAGACA(UMI:NNNN) | ^ATTACACA(UMI:NNNNNNN) \\ ^GATACGA || ^GATAGAC(UMI1:NNNNNNN) \\ ^TAGCA(UMI:NNNNNNN) ^ATTAGACA(UMI:NNNN) | ^ATTACACA(UMI:NNNNNNN) \\ ^GATACGA || ^GATAGAC \\ ^TAGCA ^ATTAGACA | ^ATTACACA \\ ^GATACGA || ^GATAGAC","title":"Tag Pattern"},{"location":"mixcr/reference/ref-tag-pattern/#barcode-pattern-syntax","text":"Barcode patterns are used to extract various barcodes (sample barcodes, UMIs, cell barcodes) from raw sequences, trim sequencing reads or filter some sequences out. MiXCR/MiTool provides a powerful pattern-matching regex-like language to specify almost arbitrary barcodes structure. In MiXCR one cane specify pattern directly at align step or analyze using --tag-pattern option. In MiTool patten must be provided for parse step. Example: > mixcr align -s mmu \\ --tag-pattern \"^(UMI:N{3:5})attgcccgAAA\\*\" \\ input_R1.fastq input_R2.fastq output.vdjca","title":"Barcode pattern syntax"},{"location":"mixcr/reference/ref-tag-pattern/#basic-syntax-elements","text":"","title":"Basic Syntax Elements"},{"location":"mixcr/reference/ref-tag-pattern/#uppercaselowercase-letters","text":"Uppercase and lowercase letters are used to specify the sequence that must be matched. Capital letters imply perfect match. Lowercase letters allow fuzzy match, where max total mismatches is determined by --tag-max-error-budget (indels are not supported). The --tag-max-error-budget value (default 10 ) is defined as a total penalty score in bits: - one mismatch with normal nucleotide (a,t,g,c) costs 2 bits, - one mismatch with IUPAC wildcards ((N, w, s, m, etc)) costs 1 bit. Each pattern has to start with ^ which defines the read beginning. Examples: \"^ATGC\u0441taggcTTCGA\" matches: ATGCCTAGGCTTCGA.... ATGCGTAGGCTTCGA.... ATGCCAACGCTTCGA....","title":"Uppercase/lowercase letters"},{"location":"mixcr/reference/ref-tag-pattern/#backslash","text":"Backslash symbol \\ is a mate-pair separator. The patter to the left side of the separator will be matched against the first file provided in input (usually R1 ), the pattern to the right side will be matched against the second input file (usually R2 ). In case of single-read input file, \\ character should be omitted. By default, during barcode extraction MiTool will check input reads in the order in which they are specified in --input argument. If --tag-parse-unstranded argument is specified, it will also try to match pattern in the other read file. Examples: \"^ATTAGACA \\ ^CACATATA\" By default matches: R1: ATTAGACA....... R2: CACATATA....... but not: R2: ATTAGACA...... R1: CACATATA...... With --tag-parse-unstranded the last match is also allowed.","title":"Backslash \\"},{"location":"mixcr/reference/ref-tag-pattern/#wildcard","text":"Asterisk symbol * means any nucleotide any number of times. Examples: \"^* \\ ^CACATATA\" matches: R1 : TGGATTCAGCGC... R2: CACATATA...","title":"Wildcard *"},{"location":"mixcr/reference/ref-tag-pattern/#repeat-x","text":"{<X>} - repeats the last symbol X number of times. Examples: \"^G{4}*\" matches: GGGGTCCACAT \"^A{1:3}*\" matches: ATGGGCAT AATGGGCAT AAATGGGCAT \"^A{:3}*\" matches: ATGGGCAT AATGGGCAT AAATGGGCAT \"^A{3:}*\" matches: AAATGGGCAT AAAATGGGCAT AAAAATGGGCAT Note: * matches the same pattern as N{:}","title":"Repeat {&lt;X&gt;}"},{"location":"mixcr/reference/ref-tag-pattern/#trimming","text":"<{<X>} and >{<X>} allows to trim 0 to X number of nucleotides from left or right side of the pattern respectively. Examples: \"^<{3}ATTAGACA\" equals: ^<<<ATTAGACA Matches: ATTAGACAATTAGACAATTAGACA... TTAGACAATTAGACAATTAGACA... TAGACAATTAGACAATTAGACA... AGACAATTAGACAATTAGACA... \"ATTAGACA>{3}(R1:*)\" Matches: GATGTATTAGACAGACGAGTCATGCGTATT... ========[------R1----------- GATGTATTAGACGACGAGTCATGCGTATT.... =======[-------R1----------- GATGTATTAGAGACGAGTCATGCGTATT..... ======[-------R1------------ GATGTATTAGGACGAGTCATGCGTATT...... =====[--------R1------------","title":"Trimming"},{"location":"mixcr/reference/ref-tag-pattern/#capture-groups","text":"MiTool allows to extract multiple number of groups and assigns them to the read (or alignment in case of MiXCR). Typical groups are different types of barcodes: molecular barcode, sample barcode, cell barcode etc. Group is defined inside round brackets () in the following manner: (GROUM_NAME:pattern) examples: (UMI:NNNNANNNNNANNNN) (SMPL:NNNN) (CELL:atgcTTGANNNNNNNNTGAATCCNN) (R1:*) (SMPL:NNNN)(UMI:N{12}(R1:*) Some rules apply to group names: - Everything that starts with CELL is treated as a cell barcode - Everything that starts with UMI or MI (ex. MIG ) is used as a molecular barcode - Everything that starts with S is a sample barcode. - R1 , R2 etc. groups define the payload read sequence. - Groups with names that don't fall under the rules above will be ignored Important: sequences outside R1 , R2 , etc. groups will be ignored and will not be used in analysis. Examples: \"^(CELL:N{4})(UMI:N{5})\\^(R2:*)\" matches: R1: ATGCGGGTGACCTTGAGGTGGACC... R2: TGGGGTAGCCTACCGTGGACACTG... In the example above only two groups from the first read will be extracted and rest of the sequence will be ignored:\\ CELL:ATGC \\ UMI:GGGTG The whole sequence of the read from the second file will be extracted with R2 tag and will be used in the downstream analysis. This pattern is commonly used when only one read has CDR3 sequence in it ( R2 in this case) and the other one is used for extracting molecular and/or cell barcode.","title":"Capture groups"},{"location":"mixcr/reference/ref-tag-pattern/#logical-or","text":"There are two levels at which logical \"OR\" can be applied: | - single read level \"or\" \\ || - whole pattern level \"or\" Constrains: - There must be the same set of matching groups on both sides of \"|\" and \"||\" - There must be the same number of sub-read patterns on both sides of \"||\" Examples: \"^ATTAGACA(UMI:NNNN)(R1:*) | ^TGCTTGCA(UMI:NNNN)(R1:*) \\ ^(R2:*)\" matches: R1: ATTAGACATTGCCCTGGGATCCG... R2: TGCCGTGATTATGCCGTGATTGT... and R1: TGCTTGCATTGCCCTGGGATCCG... R2: TGCCGTGATTATGCCGTGATTGT... \"^ATTAGACA(UMI:NNNN) | ^AGGACACA(UMI:NNNN) \\ ^GATACGA || ^GATAGAC \\ ^TAGCA(UMI:NNNNNNN)\" matches: R1: ATTAGACAtgctaagc.... R2: GATACgtacgttgtta.... R1: AGGACACAgctaagct.... R2: GATACgtacgttgtta.... R1: GATAGACtgctaagc.... R2: TAGCAgtacgttgtt.... The following patterns will result in an error due to violation of the constraints mentioned above: ^ATTAGACA(UMI:NNNN) | ^ATTACACA \\ ^GATACGA || ^GATAGAC \\ ^TAGCA(UMI:NNNNNNN) ^ATTAGACA(UMI:NNNN) | ^ATTACACA(UMI:NNNNNNN) \\ ^GATACGA || ^GATAGAC(UMI1:NNNNNNN) \\ ^TAGCA(UMI:NNNNNNN) ^ATTAGACA(UMI:NNNN) | ^ATTACACA(UMI:NNNNNNN) \\ ^GATACGA || ^GATAGAC \\ ^TAGCA ^ATTAGACA | ^ATTACACA \\ ^GATACGA || ^GATAGAC","title":"Logical OR"},{"location":"mixcr/reference/ref-translation-rules/","text":"\u2116 Translation rules All processing inside MiXCR is performed on the nucleotide level, sequences are translated only while exporting results ( exportClones , exportAlignments , exportAlignmentsPretty and exportClonesPretty ). MiXCR uses special rules for translation of out-of-frame sequences. The procedure make extensive use of information about anchor point positions inside the target sequence. All gene features having length that is a multiple of 3 (e.g. in-frame CDR3 ), are translated as is, without any special rules. In all other cases, amino acid sequence is padded with special _ symbol in place of incomplete codon. The following paragraph describes rules for placing _ inside amino acid sequence. All anchor points in MiXCR (and RepSeq.io library) are either (a) triplet-boundary-attached (like CDR3Begin , L1Begin ), such anchor points are known to always point to the first nucleotide in triplet, and (b) non-triplet-boundary-attached (like VEnd , V5UTRBegin or VIntronEnd ). This way there may be four cases for gene feature (gene region bounded by two anchor points): (e.g. CDR3 , FR3 , etc..) both, left and right boundary anchor points are triplet-boundary-attached. In this case sequence is divided into triplets starting from both sides simultaneously: one from the left side, one from the right side and so on. One or two nucleotides left after such procedure are translated as \"incomplete codon\" ( _ ). ATT GAC AG ACA I D _ T - (e.g. VCDR3Part , L1 etc..) left boundary anchor point is triplet-boundary-attached and right boundary point is not. In this case sequence is divided into triplets starting from the left side. One or two nucleotides left after such procedure are translated as \"incomplete codon\" ( _ ). ATG GAC AG M D _ (e.g. JCDR3Part , L2 , etc..) right boundary anchor point is triplet-boundary-attached and left boundary point is not. In this case sequence is divided into triplets starting from the right side. One or two nucleotides left after such procedure are translated as \"incomplete codon\" ( _ ). .. raw:: html AG ATT GAC _ I D if both anchor points are not triplet-boundary-attached, translation is performed starting from left side, like described in second case.","title":"Translation rules"},{"location":"mixcr/reference/report-align/","text":"align report MiXCR generates a comprehensive summary of alignment performance. Alignment reports may be generated right along with align command using -r / --report for txt report and -j/--json-report for report in a json format, or can be exported using exportReports command. Alignment reports may be also visualized using exportQc command . Show sample report .txt .json ============== Align Report ============== Analysis date: Tue Jul 05 12:14:17 CEST 2022 Input file(s): input_R1_001.fastq.gz,input_R1_001_R2_001.fastq.gz Output file(s): output.vdjca Version: unspecified; built=Mon Jul 04 17:40:12 CEST 2022; rev=8faa71789a; lib=repseqio.v2.0 Command line arguments: align -s HomoSapiens --tag-pattern-name 10x -OvParameters.geneFeatureToAlign=VTranscript -OvParameters.parameters.floatingLeftBound=false -OjParameters.parameters.floatingRightBound=false -OcParameters.parameters.floatingRightBound=false -OallowPartialAlignments=true -OallowNoCDR3PartAlignments=true -r alignReport.txt -j alignReport.json -f input_R1_001.fastq.gz,input_R1_001_R2_001.fastq.gz output.vdjca Analysis time: 4.93m Total sequencing reads: 14492930 Successfully aligned reads: 11268087 (77.75%) Alignment failed, no hits (not TCR/IG?): 1903444 (13.13%) Alignment failed because of low total score: 1321399 (9.12%) Overlapped: 0 (0%) Overlapped and aligned: 0 (0%) Alignment-aided overlaps: 0 (NaN%) Overlapped and not aligned: 0 (0%) No CDR3 parts alignments, percent of successfully aligned: 5583522 (49.55%) Partial aligned reads, percent of successfully aligned: 3844149 (34.12%) TRA chains: 1876416 (16.65%) TRB chains: 6864261 (60.92%) TRD chains: 178 (0%) TRG chains: 3061 (0.03%) TRA,TRD chains: 2479701 (22.01%) IGH chains: 1030 (0.01%) IGK chains: 30 (0%) IGL chains: 43410 (0.39%) Realigned with forced non-floating bound: 0 (0%) Realigned with forced non-floating right bound in left read: 0 (0%) Realigned with forced non-floating left bound in right read: 0 (0%) { \"timestamp\" : \"2022-07-05 10:14:17.021+0000\" , \"commandLine\" : \"align -s HomoSapiens --tag-pattern-name 10x -OvParameters.geneFeatureToAlign=VTranscript -OvParameters.parameters.floatingLeftBound=false -OjParameters.parameters.floatingRightBound=false -OcParameters.parameters.floatingRightBound=false -OallowPartialAlignments=true -OallowNoCDR3PartAlignments=true -r alignReport.txt -j alignReport.json -f input_R1_001.fastq.gz input_R2_001.fastq.gz output.vdjca\" , \"inputFiles\" :[ \"input_R1_001.fastq.gz\" , \"input_R1_001_R2_001.fastq.gz\" ], \"outputFiles\" :[ \"output.vdjca\" ], \"chimeras\" : 0 , \"noCDR3PartsAlignments\" : 5583522 , \"partialAlignments\" : 3844149 , \"realignedWithForcedNonFloatingBound\" : 0 , \"realignedWithForcedNonFloatingRightBoundInLeftRead\" : 0 , \"realignedWithForcedNonFloatingLeftBoundInRightRead\" : 0 , \"trimmingReport\" : null , \"action\" : \"align\" , \"totalReadsProcessed\" : 14492930 , \"aligned\" : 11268087 , \"notAligned\" : 3224843 , \"notAlignedReasons\" :{ \"VAndJOnDifferentTargets\" : 0 , \"LowTotalScore\" : 1321399 , \"NoCDR3Parts\" : 0 , \"NoHits\" : 1903444 , \"NoVHits\" : 0 , \"NoJHits\" : 0 }, \"overlapped\" : 0 , \"alignmentAidedOverlaps\" : 0 , \"overlappedAligned\" : 0 , \"overlappedNotAligned\" : 0 , \"pairedEndAlignmentConflicts\" : 0 , \"vChimeras\" : 0 , \"jChimeras\" : 0 , \"chainUsage\" :{ \"total\" : 11268087 , \"chimeras\" : 0 , \"chains\" :{ \"TRA\" : 1876416 , \"TRB\" : 6864261 , \"TRD\" : 178 , \"TRG\" : 3061 , \"TRA,TRD\" : 2479701 , \"IGH\" : 1030 , \"IGK\" : 30 , \"IGL\" : 43410 } }, \"version\" : \"unspecified; built=Mon Jul 04 17:40:12 CEST 2022; rev=8faa71789a; lib=repseqio.v2.0\" , \"executionTimeMillis\" : 295978 } Total sequencing reads / totalReadsProcessed Total number of analysed sequencing. Successfully aligned reads / total Number of successful alignments. Number of alignments written to the output file. Without -OallowPartialAlignments=true (default behaviour): number of reads with both V and Jalignments, that passed all alignment thresholds. With -OallowPartialAlignments=true : number of reads with at least one of V or J alignments, that passed all alignment thresholds and cover at least one nucleotide of CDR3. Alignment failed, no hits (not TCR/IG?) / NoHits Number of reads without TCR or IG sequences Alignment failed because of low total score / LowTotalScore Number of alignments that failed due to a low alignment score Overlapped / overlapped Total number of overlapped paired-end reads Overlapped and aligned / overlappedAligned Total number of reads that were overlapped and aligned (in any order) Alignment-aided overlaps / alignmentAidedOverlaps Number of reads that were overlapped only after alignment. High value, may indicate problems with the sequencing data being analysed (any data pre-processing step may be the source of this problem or this may be a sign of invitro chimerization). Small number of such events is ok, especially for RNA-Seq and similar data, that contains unspliced or wrongly spliced sequences. Overlapped and not aligned / overlappedNotAligned Number of overlapped paired-end reads that did not result in alignment No CDR3 parts alignments, percent of successfully aligned / noCDR3PartsAlignments Number of alignments that lack CDR3 sequence Partial aligned reads, percent of successfully aligned / partialAlignments Number of reads that partially cover CDR3 region but lack either V or J gene chains Number of reads aligned with this type of immunological chain. E.g. TRB for TRBV+TRBJ[+TRBC]. Realigned with forced non-floating bound / realignedWithForcedNonFloatingBound Number of global alignments. If one read has gene segment on the right side, and another read has the same gene segment on the left side, global alignment will be applied and reads edges will be preserved. Realigned with forced non-floating right bound in left read / realignedWithForcedNonFloatingRightBoundInLeftRead Number of global alignments on the right side of the left read Realigned with forced non-floating left bound in right read / realignedWithForcedNonFloatingRightBoundInRightRead Number of global alignments on the left side of the right read The following fields present only in JSON format: NoCDR3Parts Number of alignments filtered due to absence of CDR3 region NoVHits Number of alignments filtered due to absence of V gene NoJHits Number of alignments filtered due to absence of J gene notAligned Total number of not aligned reads VAndJOnDifferentTargets Number of alignments that failed because V gene is present only in one read, J gene only present in another and reads don't overlap. pairedEndAlignmentConflicts Number of alignments where two reads overlap but the overlapping region has a very low score. In that case that alignment will be treated as not-overlapped and only one read sequence with the best score will be preserved. vChimeras \\ jChimeras Number of events where different V or J genes correspondingly were aligned in different paired-end reads. This type of chimerization is different from one mentioned for \u201cChimeras\u201d report line. High number of such events for V genes is a strong evidence of sample preparation problems, raw data should be manually inspected to verify expected library structure. Chimeras Number of detected chimeras. Chimeric alignment is defined as having V, J or C genes from the incompatible chains, e.g. TRBV / TRAJ or IGHV / TRBC, etc\u2026)","title":"mixcr align"},{"location":"mixcr/reference/report-align/#align-report","text":"MiXCR generates a comprehensive summary of alignment performance. Alignment reports may be generated right along with align command using -r / --report for txt report and -j/--json-report for report in a json format, or can be exported using exportReports command. Alignment reports may be also visualized using exportQc command . Show sample report .txt .json ============== Align Report ============== Analysis date: Tue Jul 05 12:14:17 CEST 2022 Input file(s): input_R1_001.fastq.gz,input_R1_001_R2_001.fastq.gz Output file(s): output.vdjca Version: unspecified; built=Mon Jul 04 17:40:12 CEST 2022; rev=8faa71789a; lib=repseqio.v2.0 Command line arguments: align -s HomoSapiens --tag-pattern-name 10x -OvParameters.geneFeatureToAlign=VTranscript -OvParameters.parameters.floatingLeftBound=false -OjParameters.parameters.floatingRightBound=false -OcParameters.parameters.floatingRightBound=false -OallowPartialAlignments=true -OallowNoCDR3PartAlignments=true -r alignReport.txt -j alignReport.json -f input_R1_001.fastq.gz,input_R1_001_R2_001.fastq.gz output.vdjca Analysis time: 4.93m Total sequencing reads: 14492930 Successfully aligned reads: 11268087 (77.75%) Alignment failed, no hits (not TCR/IG?): 1903444 (13.13%) Alignment failed because of low total score: 1321399 (9.12%) Overlapped: 0 (0%) Overlapped and aligned: 0 (0%) Alignment-aided overlaps: 0 (NaN%) Overlapped and not aligned: 0 (0%) No CDR3 parts alignments, percent of successfully aligned: 5583522 (49.55%) Partial aligned reads, percent of successfully aligned: 3844149 (34.12%) TRA chains: 1876416 (16.65%) TRB chains: 6864261 (60.92%) TRD chains: 178 (0%) TRG chains: 3061 (0.03%) TRA,TRD chains: 2479701 (22.01%) IGH chains: 1030 (0.01%) IGK chains: 30 (0%) IGL chains: 43410 (0.39%) Realigned with forced non-floating bound: 0 (0%) Realigned with forced non-floating right bound in left read: 0 (0%) Realigned with forced non-floating left bound in right read: 0 (0%) { \"timestamp\" : \"2022-07-05 10:14:17.021+0000\" , \"commandLine\" : \"align -s HomoSapiens --tag-pattern-name 10x -OvParameters.geneFeatureToAlign=VTranscript -OvParameters.parameters.floatingLeftBound=false -OjParameters.parameters.floatingRightBound=false -OcParameters.parameters.floatingRightBound=false -OallowPartialAlignments=true -OallowNoCDR3PartAlignments=true -r alignReport.txt -j alignReport.json -f input_R1_001.fastq.gz input_R2_001.fastq.gz output.vdjca\" , \"inputFiles\" :[ \"input_R1_001.fastq.gz\" , \"input_R1_001_R2_001.fastq.gz\" ], \"outputFiles\" :[ \"output.vdjca\" ], \"chimeras\" : 0 , \"noCDR3PartsAlignments\" : 5583522 , \"partialAlignments\" : 3844149 , \"realignedWithForcedNonFloatingBound\" : 0 , \"realignedWithForcedNonFloatingRightBoundInLeftRead\" : 0 , \"realignedWithForcedNonFloatingLeftBoundInRightRead\" : 0 , \"trimmingReport\" : null , \"action\" : \"align\" , \"totalReadsProcessed\" : 14492930 , \"aligned\" : 11268087 , \"notAligned\" : 3224843 , \"notAlignedReasons\" :{ \"VAndJOnDifferentTargets\" : 0 , \"LowTotalScore\" : 1321399 , \"NoCDR3Parts\" : 0 , \"NoHits\" : 1903444 , \"NoVHits\" : 0 , \"NoJHits\" : 0 }, \"overlapped\" : 0 , \"alignmentAidedOverlaps\" : 0 , \"overlappedAligned\" : 0 , \"overlappedNotAligned\" : 0 , \"pairedEndAlignmentConflicts\" : 0 , \"vChimeras\" : 0 , \"jChimeras\" : 0 , \"chainUsage\" :{ \"total\" : 11268087 , \"chimeras\" : 0 , \"chains\" :{ \"TRA\" : 1876416 , \"TRB\" : 6864261 , \"TRD\" : 178 , \"TRG\" : 3061 , \"TRA,TRD\" : 2479701 , \"IGH\" : 1030 , \"IGK\" : 30 , \"IGL\" : 43410 } }, \"version\" : \"unspecified; built=Mon Jul 04 17:40:12 CEST 2022; rev=8faa71789a; lib=repseqio.v2.0\" , \"executionTimeMillis\" : 295978 } Total sequencing reads / totalReadsProcessed Total number of analysed sequencing. Successfully aligned reads / total Number of successful alignments. Number of alignments written to the output file. Without -OallowPartialAlignments=true (default behaviour): number of reads with both V and Jalignments, that passed all alignment thresholds. With -OallowPartialAlignments=true : number of reads with at least one of V or J alignments, that passed all alignment thresholds and cover at least one nucleotide of CDR3. Alignment failed, no hits (not TCR/IG?) / NoHits Number of reads without TCR or IG sequences Alignment failed because of low total score / LowTotalScore Number of alignments that failed due to a low alignment score Overlapped / overlapped Total number of overlapped paired-end reads Overlapped and aligned / overlappedAligned Total number of reads that were overlapped and aligned (in any order) Alignment-aided overlaps / alignmentAidedOverlaps Number of reads that were overlapped only after alignment. High value, may indicate problems with the sequencing data being analysed (any data pre-processing step may be the source of this problem or this may be a sign of invitro chimerization). Small number of such events is ok, especially for RNA-Seq and similar data, that contains unspliced or wrongly spliced sequences. Overlapped and not aligned / overlappedNotAligned Number of overlapped paired-end reads that did not result in alignment No CDR3 parts alignments, percent of successfully aligned / noCDR3PartsAlignments Number of alignments that lack CDR3 sequence Partial aligned reads, percent of successfully aligned / partialAlignments Number of reads that partially cover CDR3 region but lack either V or J gene chains Number of reads aligned with this type of immunological chain. E.g. TRB for TRBV+TRBJ[+TRBC]. Realigned with forced non-floating bound / realignedWithForcedNonFloatingBound Number of global alignments. If one read has gene segment on the right side, and another read has the same gene segment on the left side, global alignment will be applied and reads edges will be preserved. Realigned with forced non-floating right bound in left read / realignedWithForcedNonFloatingRightBoundInLeftRead Number of global alignments on the right side of the left read Realigned with forced non-floating left bound in right read / realignedWithForcedNonFloatingRightBoundInRightRead Number of global alignments on the left side of the right read The following fields present only in JSON format: NoCDR3Parts Number of alignments filtered due to absence of CDR3 region NoVHits Number of alignments filtered due to absence of V gene NoJHits Number of alignments filtered due to absence of J gene notAligned Total number of not aligned reads VAndJOnDifferentTargets Number of alignments that failed because V gene is present only in one read, J gene only present in another and reads don't overlap. pairedEndAlignmentConflicts Number of alignments where two reads overlap but the overlapping region has a very low score. In that case that alignment will be treated as not-overlapped and only one read sequence with the best score will be preserved. vChimeras \\ jChimeras Number of events where different V or J genes correspondingly were aligned in different paired-end reads. This type of chimerization is different from one mentioned for \u201cChimeras\u201d report line. High number of such events for V genes is a strong evidence of sample preparation problems, raw data should be manually inspected to verify expected library structure. Chimeras Number of detected chimeras. Chimeric alignment is defined as having V, J or C genes from the incompatible chains, e.g. TRBV / TRAJ or IGHV / TRBC, etc\u2026)","title":"align report"},{"location":"mixcr/reference/report-assemble/","text":"assemble report MiXCR generates a comprehensive summary of assembly performance. Assemble reports may be generated right along with assemble command using -r / --report for txt report and -j/--json-report for report in a json format, or can be exported using exportReports command. Show sample report .txt .json ============== Assemble Report ============== Analysis time: 0ns Number of input groups: 22887 Number of input alignments: 401520 Number of output pre-clonotypes: 21677 Number of clonotypes per group 0: + 120 (0.57%) = 120 (0.57%) 1: + 20134 (95.85%) = 20254 (96.42%) 2: + 710 (3.38%) = 20964 (99.8%) 3: + 41 (0.2%) = 21005 (100%) Number of core alignments: 373026 (92.9%) Discarded core alignments: 14079 (3.77%) Empirically assigned alignments: 1049 (0.26%) Empirical assignment conflicts: 1 (0%) UMI+VJ-gene empirically assigned alignments: 1050 (0.26%) VJ-gene empirically assigned alignments: 0 (0%) UMI empirically assigned alignments: 0 (0%) Number of ambiguous UMIs: 751 Number of ambiguous V-genes: 404 Number of ambiguous J-genes: 64 Number of ambiguous UMI+V/J-gene combinations: 468 Unassigned alignments: 19570 (4.87%) Final clonotype count: 2419 Average number of reads per clonotype: 152.4 Reads used in clonotypes, percent of total: 368667 (33.95%) Reads used in clonotypes before clustering, percent of total: 369350 (34.02%) Number of reads used as a core, percent of used: 367264 (99.44%) Mapped low quality reads, percent of used: 2086 (0.56%) Reads clustered in PCR error correction, percent of used: 683 (0.18%) Reads pre-clustered due to the similar VJC-lists, percent of used: 0 (0%) Reads dropped due to the lack of a clone sequence, percent of total: 22 (0%) Reads dropped due to low quality, percent of total: 0 (0%) Reads dropped due to failed mapping, percent of total: 4687 (0.43%) Reads dropped with low quality clones, percent of total: 0 (0%) Clonotypes eliminated by PCR error correction: 113 Clonotypes dropped as low quality: 0 Clonotypes pre-clustered due to the similar VJC-lists: 0 Clonotypes dropped in fine filtering: 0 Partially aligned reads attached to clones by tags: 0 (0%) Partially aligned reads with ambiguous clone attachments by tags: 0 (0%) Partially aligned reads failed to attach to clones by tags: 0 (0%) TRB chains: 1024 (42.33%) TRAD chains: 1370 (56.63%) TRG chains: 25 (1.03%) { \"type\" : \"assemblerReport\" , \"commandLine\" : \"assemble -r P15-M2-DNEG_assembleReport.txt -f P15-M2-DNEG_corrected.vdjca P15-M2-DNEG.clns\" , \"inputFiles\" : [ \"P15-M2-DNEG_corrected.vdjca\" ], \"outputFiles\" : [ \"P15-M2-DNEG.clns\" ], \"version\" : \"unspecified; built=Sat Jul 09 19:09:10 CEST 2022; rev=204bb4540f; lib=repseqio.v2.0\" , \"preCloneAssemblerReport\" : { \"type\" : \"preCloneAssemblerReport\" , \"inputGroups\" : 22887 , \"inputAlignments\" : 401520 , \"clonotypes\" : 21677 , \"clonotypesPerGroup\" : { \"0\" : 120 , \"1\" : 20134 , \"2\" : 710 , \"3\" : 41 }, \"coreAlignments\" : 373026 , \"discardedCoreAlignments\" : 14079 , \"empiricallyAssignedAlignments\" : 1049 , \"vjEmpiricallyAssignedAlignments\" : 0 , \"umiEmpiricallyAssignedAlignments\" : 0 , \"gatEmpiricallyAssignedAlignments\" : 1050 , \"empiricalAssignmentConflicts\" : 1 , \"unassignedAlignments\" : 19570 , \"umiConflicts\" : 751 , \"gatConflicts\" : 468 , \"geneConflicts\" : { \"Variable\" : 404 , \"Joining\" : 64 }, \"coreClonotypesDroppedByTagSuffix\" : 0 , \"coreAlignmentsDroppedByTagSuffix\" : 0 }, \"totalReadsProcessed\" : 1085843 , \"initialClonesCreated\" : 2532 , \"readsDroppedNoTargetSequence\" : 22 , \"readsDroppedLowQuality\" : 16 , \"coreReads\" : 367264 , \"readsDroppedFailedMapping\" : 4687 , \"lowQualityRescued\" : 2086 , \"clonesClustered\" : 113 , \"readsClustered\" : 683 , \"clones\" : 2419 , \"clonesDroppedAsLowQuality\" : 0 , \"clonesDroppedInFineFiltering\" : 0 , \"clonesPreClustered\" : 0 , \"readsPreClustered\" : 0 , \"readsInClones\" : 368667 , \"readsInClonesBeforeClustering\" : 369350 , \"readsDroppedWithLowQualityClones\" : 0 , \"clonalChainUsage\" : { \"type\" : \"chainUsage\" , \"chimeras\" : 0 , \"total\" : 2419 , \"chains\" : { \"TRB\" : 1024 , \"TRAD\" : 1370 , \"TRG\" : 25 } }, \"readsAttachedByTags\" : 0 , \"readsWithAmbiguousAttachmentsByTags\" : 0 , \"readsFailedToAttachedByTags\" : 0 } Pre-clone assembler report The first part of the report is dedicated to UMI and cell barcodes based consensus assembly : Number of input groups number of groups defined by unique barcodes combination. In case of single-cell UMI-barcoded library equals to unique CellId+UMI groups. Number of input alignments Total number of alignments in the input .vdjca file. Number of output pre-clonotypes Total number of consensuses assembled among all groups. Number of clonotypes per group number consensus assembled per number of groups. How to read this value Number of clonotypes per group 0: + 1209 (0.04%) = 1209 (0.04%) 1: + 2891630 (98.45%) = 2892839 (98.5%) 2~3: + 44182 (1.5%) = 2937021 (100%) For 1209 groups 0 consensuses were assembled due to various reasons such as bad quality, low number of reads or other conflicts. For 2891630 groups 1 consensus was assembled. For 44182 groups 2 or 3 consensuses were assembled. Number of core alignments number of alignments that cover assemblingFeature which were used to assemble consensuses Discarded core alignments number of alignments that cover assemblingFeature but were not assigned to any consensuses Empirically assigned alignments Number of alignments that do not cover assemblingFeature but were still assigned to consensuses. Those alignments will be used by mixcr assembleContigs if applied. Empirical assignment conflicts Number of conflicts encountered in empirical assignment UMI+VJ-gene empirically assigned alignments Number of alignments that were assigned to consensuses based on UMI, V and J genes sequences. VJ-gene empirically assigned alignments Number of alignments that were assigned to consensuses based on V and J genes sequences. UMI empirically assigned alignments Number of alignments that were assigned to consensuses based on UMI sequence. Number of ambiguous UMIs number of UMI conflict events. Number of ambiguous V-genes number of events when two or more consensuses inside alignment group share the same V-genes, thus V-gene driven empirical assignment was not possible. Number of ambiguous J-genes number of events when two or more consensuses inside alignment group share the same J-genes, thus J-gene driven empirical assignment was not possible. Number of ambiguous UMI+V/J-gene combinations number of UMI+V/J-gene conflict events. Unassigned alignments alignments that were not assigned to any consensuses due to the various reasons Assembler and clustering report The rest of the report is describes assembly regardless of barcodes: Final clonotype count Number of clonotypes left after all artificial diversity error-corrections (PCR-errors and V/J/C mis-assignment correction) Average number of reads per clonotype Average number of reads per final clonotype Reads used in clonotypes, percent of total Total number of reads assembled into final clonotypes (percent of total number of reads). This number excludes or includes reads from clonotypes eliminated in error-correction depending on -OaddReadsCountOnClustering Reads used in clonotypes before clustering, percent of total Number of reads used in clonotypes before clustering (PCR-error correction) (percent of total number of reads) Number of reads used as a core, percent of used number of core alignments with no low quality nucleotides (defined by badQualityThreshold ). These alignments form core clonotypes. (percent of reads used in clonotypes) Mapped low quality reads, percent of used Number of rescued low quality reads that were aggregated by the corresponding clonotype. See mapping Reads clustered in PCR error correction, percent of used Number of reads clustered in PCR error correction, percent of used. See clustering Reads pre-clustered due to the similar VJC-lists, percent of used Reads pre-clustered due to the similar VJC-lists, percent of used Reads dropped due to the lack of a clone sequence, percent of total Reads dropped due to the lack of a clone sequence ( assemblingFeature ), percent of total Reads dropped due to low quality, percent of total Reads dropped due to too many positions with low quality, percent of total Reads dropped due to failed mapping, percent of total Reads dropped due to failed mapping, percent of total. See mapping Reads dropped with low quality clones, percent of total Reads dropped with low quality clones, percent of total Clonotypes eliminated by PCR error correction Number of clonotypes eliminated by PCR error correction Clonotypes dropped as low quality Number of clonotypes dropped due to low quality after mapping, pre-clustering and clustering. Clonotypes pre-clustered due to the similar VJC-lists Clonotypes pre-clustered due to the similar VJC-lists","title":"mixcr assemble"},{"location":"mixcr/reference/report-assemble/#assemble-report","text":"MiXCR generates a comprehensive summary of assembly performance. Assemble reports may be generated right along with assemble command using -r / --report for txt report and -j/--json-report for report in a json format, or can be exported using exportReports command. Show sample report .txt .json ============== Assemble Report ============== Analysis time: 0ns Number of input groups: 22887 Number of input alignments: 401520 Number of output pre-clonotypes: 21677 Number of clonotypes per group 0: + 120 (0.57%) = 120 (0.57%) 1: + 20134 (95.85%) = 20254 (96.42%) 2: + 710 (3.38%) = 20964 (99.8%) 3: + 41 (0.2%) = 21005 (100%) Number of core alignments: 373026 (92.9%) Discarded core alignments: 14079 (3.77%) Empirically assigned alignments: 1049 (0.26%) Empirical assignment conflicts: 1 (0%) UMI+VJ-gene empirically assigned alignments: 1050 (0.26%) VJ-gene empirically assigned alignments: 0 (0%) UMI empirically assigned alignments: 0 (0%) Number of ambiguous UMIs: 751 Number of ambiguous V-genes: 404 Number of ambiguous J-genes: 64 Number of ambiguous UMI+V/J-gene combinations: 468 Unassigned alignments: 19570 (4.87%) Final clonotype count: 2419 Average number of reads per clonotype: 152.4 Reads used in clonotypes, percent of total: 368667 (33.95%) Reads used in clonotypes before clustering, percent of total: 369350 (34.02%) Number of reads used as a core, percent of used: 367264 (99.44%) Mapped low quality reads, percent of used: 2086 (0.56%) Reads clustered in PCR error correction, percent of used: 683 (0.18%) Reads pre-clustered due to the similar VJC-lists, percent of used: 0 (0%) Reads dropped due to the lack of a clone sequence, percent of total: 22 (0%) Reads dropped due to low quality, percent of total: 0 (0%) Reads dropped due to failed mapping, percent of total: 4687 (0.43%) Reads dropped with low quality clones, percent of total: 0 (0%) Clonotypes eliminated by PCR error correction: 113 Clonotypes dropped as low quality: 0 Clonotypes pre-clustered due to the similar VJC-lists: 0 Clonotypes dropped in fine filtering: 0 Partially aligned reads attached to clones by tags: 0 (0%) Partially aligned reads with ambiguous clone attachments by tags: 0 (0%) Partially aligned reads failed to attach to clones by tags: 0 (0%) TRB chains: 1024 (42.33%) TRAD chains: 1370 (56.63%) TRG chains: 25 (1.03%) { \"type\" : \"assemblerReport\" , \"commandLine\" : \"assemble -r P15-M2-DNEG_assembleReport.txt -f P15-M2-DNEG_corrected.vdjca P15-M2-DNEG.clns\" , \"inputFiles\" : [ \"P15-M2-DNEG_corrected.vdjca\" ], \"outputFiles\" : [ \"P15-M2-DNEG.clns\" ], \"version\" : \"unspecified; built=Sat Jul 09 19:09:10 CEST 2022; rev=204bb4540f; lib=repseqio.v2.0\" , \"preCloneAssemblerReport\" : { \"type\" : \"preCloneAssemblerReport\" , \"inputGroups\" : 22887 , \"inputAlignments\" : 401520 , \"clonotypes\" : 21677 , \"clonotypesPerGroup\" : { \"0\" : 120 , \"1\" : 20134 , \"2\" : 710 , \"3\" : 41 }, \"coreAlignments\" : 373026 , \"discardedCoreAlignments\" : 14079 , \"empiricallyAssignedAlignments\" : 1049 , \"vjEmpiricallyAssignedAlignments\" : 0 , \"umiEmpiricallyAssignedAlignments\" : 0 , \"gatEmpiricallyAssignedAlignments\" : 1050 , \"empiricalAssignmentConflicts\" : 1 , \"unassignedAlignments\" : 19570 , \"umiConflicts\" : 751 , \"gatConflicts\" : 468 , \"geneConflicts\" : { \"Variable\" : 404 , \"Joining\" : 64 }, \"coreClonotypesDroppedByTagSuffix\" : 0 , \"coreAlignmentsDroppedByTagSuffix\" : 0 }, \"totalReadsProcessed\" : 1085843 , \"initialClonesCreated\" : 2532 , \"readsDroppedNoTargetSequence\" : 22 , \"readsDroppedLowQuality\" : 16 , \"coreReads\" : 367264 , \"readsDroppedFailedMapping\" : 4687 , \"lowQualityRescued\" : 2086 , \"clonesClustered\" : 113 , \"readsClustered\" : 683 , \"clones\" : 2419 , \"clonesDroppedAsLowQuality\" : 0 , \"clonesDroppedInFineFiltering\" : 0 , \"clonesPreClustered\" : 0 , \"readsPreClustered\" : 0 , \"readsInClones\" : 368667 , \"readsInClonesBeforeClustering\" : 369350 , \"readsDroppedWithLowQualityClones\" : 0 , \"clonalChainUsage\" : { \"type\" : \"chainUsage\" , \"chimeras\" : 0 , \"total\" : 2419 , \"chains\" : { \"TRB\" : 1024 , \"TRAD\" : 1370 , \"TRG\" : 25 } }, \"readsAttachedByTags\" : 0 , \"readsWithAmbiguousAttachmentsByTags\" : 0 , \"readsFailedToAttachedByTags\" : 0 }","title":"assemble report"},{"location":"mixcr/reference/report-assemble/#pre-clone-assembler-report","text":"The first part of the report is dedicated to UMI and cell barcodes based consensus assembly : Number of input groups number of groups defined by unique barcodes combination. In case of single-cell UMI-barcoded library equals to unique CellId+UMI groups. Number of input alignments Total number of alignments in the input .vdjca file. Number of output pre-clonotypes Total number of consensuses assembled among all groups. Number of clonotypes per group number consensus assembled per number of groups. How to read this value Number of clonotypes per group 0: + 1209 (0.04%) = 1209 (0.04%) 1: + 2891630 (98.45%) = 2892839 (98.5%) 2~3: + 44182 (1.5%) = 2937021 (100%) For 1209 groups 0 consensuses were assembled due to various reasons such as bad quality, low number of reads or other conflicts. For 2891630 groups 1 consensus was assembled. For 44182 groups 2 or 3 consensuses were assembled. Number of core alignments number of alignments that cover assemblingFeature which were used to assemble consensuses Discarded core alignments number of alignments that cover assemblingFeature but were not assigned to any consensuses Empirically assigned alignments Number of alignments that do not cover assemblingFeature but were still assigned to consensuses. Those alignments will be used by mixcr assembleContigs if applied. Empirical assignment conflicts Number of conflicts encountered in empirical assignment UMI+VJ-gene empirically assigned alignments Number of alignments that were assigned to consensuses based on UMI, V and J genes sequences. VJ-gene empirically assigned alignments Number of alignments that were assigned to consensuses based on V and J genes sequences. UMI empirically assigned alignments Number of alignments that were assigned to consensuses based on UMI sequence. Number of ambiguous UMIs number of UMI conflict events. Number of ambiguous V-genes number of events when two or more consensuses inside alignment group share the same V-genes, thus V-gene driven empirical assignment was not possible. Number of ambiguous J-genes number of events when two or more consensuses inside alignment group share the same J-genes, thus J-gene driven empirical assignment was not possible. Number of ambiguous UMI+V/J-gene combinations number of UMI+V/J-gene conflict events. Unassigned alignments alignments that were not assigned to any consensuses due to the various reasons","title":"Pre-clone assembler report"},{"location":"mixcr/reference/report-assemble/#assembler-and-clustering-report","text":"The rest of the report is describes assembly regardless of barcodes: Final clonotype count Number of clonotypes left after all artificial diversity error-corrections (PCR-errors and V/J/C mis-assignment correction) Average number of reads per clonotype Average number of reads per final clonotype Reads used in clonotypes, percent of total Total number of reads assembled into final clonotypes (percent of total number of reads). This number excludes or includes reads from clonotypes eliminated in error-correction depending on -OaddReadsCountOnClustering Reads used in clonotypes before clustering, percent of total Number of reads used in clonotypes before clustering (PCR-error correction) (percent of total number of reads) Number of reads used as a core, percent of used number of core alignments with no low quality nucleotides (defined by badQualityThreshold ). These alignments form core clonotypes. (percent of reads used in clonotypes) Mapped low quality reads, percent of used Number of rescued low quality reads that were aggregated by the corresponding clonotype. See mapping Reads clustered in PCR error correction, percent of used Number of reads clustered in PCR error correction, percent of used. See clustering Reads pre-clustered due to the similar VJC-lists, percent of used Reads pre-clustered due to the similar VJC-lists, percent of used Reads dropped due to the lack of a clone sequence, percent of total Reads dropped due to the lack of a clone sequence ( assemblingFeature ), percent of total Reads dropped due to low quality, percent of total Reads dropped due to too many positions with low quality, percent of total Reads dropped due to failed mapping, percent of total Reads dropped due to failed mapping, percent of total. See mapping Reads dropped with low quality clones, percent of total Reads dropped with low quality clones, percent of total Clonotypes eliminated by PCR error correction Number of clonotypes eliminated by PCR error correction Clonotypes dropped as low quality Number of clonotypes dropped due to low quality after mapping, pre-clustering and clustering. Clonotypes pre-clustered due to the similar VJC-lists Clonotypes pre-clustered due to the similar VJC-lists","title":"Assembler and clustering report"},{"location":"mixcr/reference/report-assembleContigs/","text":"assembleContigs report MiXCR generates a comprehensive summary of contig assembly performance. Assemble reports may be generated right along with assembleContigs command using -r / --report for txt report and -j/--json-report for report in a json format, or can be exported using exportReports command. Show sample report .txt .json ============== AssembleContigs Report ============== Analysis date: Mon Jul 11 10:46:49 CEST 2022 Input file(s): result/Donor1_MBC_2010.clna Output file(s): result/Donor1_MBC_2010.clns Version: unspecified; built=Mon Jul 04 17:40:12 CEST 2022; rev=8faa71789a; lib=repseqio.v2.0 Command line arguments: assembleContigs -r result/Donor1_MBC_2010_assembleContigsReport.txt -f result/Donor1_MBC_2010.clna result/Donor1_MBC_2010.clns Analysis time: 2.09s Initial clonotype count: 1784 Final clonotype count: 1784 (100%) Canceled assemblies: 0 (0%) Number of premature termination assembly events, percent of number of initial clonotypes: 0.0 (0%) Longest contig length: 303 Clustered variants: 0 (0%) Reads in clustered variants: 0.0 (0%) Reads in divided (newly created) clones: 0.0 (0%) Clones with ambiguous letters in splitting region: 0 (0%) Reads in clones with ambiguous letters in splitting region: 0.0 (0%) Average number of ambiguous letters per clone with ambiguous letters in splitting region: NaN { \"type\" : \"fullSeqAssemblerReport\" , \"commandLine\" : \"assembleContigs -r result/Donor1_MBC_2010_assembleContigsReport.txt -j result/Donor1_MBC_2010_assembleContigsReport.json -f result/Donor1_MBC_2010.clna result/Donor1_MBC_2010.clns\" , \"inputFiles\" : [ \"result/Donor1_MBC_2010.clna\" ], \"outputFiles\" : [ \"result/Donor1_MBC_2010.clns\" ], \"version\" : \"; built=Fri Jul 15 01:51:38 CEST 2022; rev=aa769be87b; lib=repseqio.v2.0\" , \"clonesWithAmbiguousLetters\" : 85 , \"clonesWithAmbiguousLettersInSplittingRegion\" : 0 , \"readsWithAmbiguousLetters\" : 296 , \"readsWithAmbiguousLettersInSplittingRegion\" : 0 , \"totalAmbiguousLetters\" : 185 , \"totalAmbiguousLettersInSplittingRegion\" : 0 , \"initialCloneCount\" : 1784 , \"canceledAssemblies\" : 0 , \"finalCloneCount\" : 1784 , \"totalReadsProcessed\" : 2723 , \"clonesClustered\" : 0 , \"readsClustered\" : 0 , \"longestContigLength\" : 303 , \"totalDividedVariantReads\" : 0 , \"assemblePrematureTerminationEvents\" : 0 } Initial clonotype count Number of input clonotypes Final clonotype count Number of final clonotypes (may be greater than initial number if -OsubCloningRegion is specified) Canceled assemblies Number of skipped clonotypes Number of premature termination assembly events, percent of number of initial clonotypes Number of cancelled assemblies due to no hits on the final clone factory step Longest contig length Length of the longest contig Clustered variants Number of clusterized variant branches Reads in clustered variants Number of reads in clustered variants Reads in divided (newly created) clones Number of reads in the newly created clones (if -OsubCloningRegion is specified and hypermutated variants discovered) Clones with ambiguous letters in splitting region Number of clonotypes with ambiguous letters inside subCloningRegion (MiXCR will use N s for such letters) Reads in clones with ambiguous letters in splitting region Number of reads in such ambiguous clonotypes Average number of ambiguous letters per clone with ambiguous letters in splitting region Average number of ambiguous letters per clone with ambiguous letters in splitting region","title":"mixcr assembleContigs"},{"location":"mixcr/reference/report-assembleContigs/#assemblecontigs-report","text":"MiXCR generates a comprehensive summary of contig assembly performance. Assemble reports may be generated right along with assembleContigs command using -r / --report for txt report and -j/--json-report for report in a json format, or can be exported using exportReports command. Show sample report .txt .json ============== AssembleContigs Report ============== Analysis date: Mon Jul 11 10:46:49 CEST 2022 Input file(s): result/Donor1_MBC_2010.clna Output file(s): result/Donor1_MBC_2010.clns Version: unspecified; built=Mon Jul 04 17:40:12 CEST 2022; rev=8faa71789a; lib=repseqio.v2.0 Command line arguments: assembleContigs -r result/Donor1_MBC_2010_assembleContigsReport.txt -f result/Donor1_MBC_2010.clna result/Donor1_MBC_2010.clns Analysis time: 2.09s Initial clonotype count: 1784 Final clonotype count: 1784 (100%) Canceled assemblies: 0 (0%) Number of premature termination assembly events, percent of number of initial clonotypes: 0.0 (0%) Longest contig length: 303 Clustered variants: 0 (0%) Reads in clustered variants: 0.0 (0%) Reads in divided (newly created) clones: 0.0 (0%) Clones with ambiguous letters in splitting region: 0 (0%) Reads in clones with ambiguous letters in splitting region: 0.0 (0%) Average number of ambiguous letters per clone with ambiguous letters in splitting region: NaN { \"type\" : \"fullSeqAssemblerReport\" , \"commandLine\" : \"assembleContigs -r result/Donor1_MBC_2010_assembleContigsReport.txt -j result/Donor1_MBC_2010_assembleContigsReport.json -f result/Donor1_MBC_2010.clna result/Donor1_MBC_2010.clns\" , \"inputFiles\" : [ \"result/Donor1_MBC_2010.clna\" ], \"outputFiles\" : [ \"result/Donor1_MBC_2010.clns\" ], \"version\" : \"; built=Fri Jul 15 01:51:38 CEST 2022; rev=aa769be87b; lib=repseqio.v2.0\" , \"clonesWithAmbiguousLetters\" : 85 , \"clonesWithAmbiguousLettersInSplittingRegion\" : 0 , \"readsWithAmbiguousLetters\" : 296 , \"readsWithAmbiguousLettersInSplittingRegion\" : 0 , \"totalAmbiguousLetters\" : 185 , \"totalAmbiguousLettersInSplittingRegion\" : 0 , \"initialCloneCount\" : 1784 , \"canceledAssemblies\" : 0 , \"finalCloneCount\" : 1784 , \"totalReadsProcessed\" : 2723 , \"clonesClustered\" : 0 , \"readsClustered\" : 0 , \"longestContigLength\" : 303 , \"totalDividedVariantReads\" : 0 , \"assemblePrematureTerminationEvents\" : 0 } Initial clonotype count Number of input clonotypes Final clonotype count Number of final clonotypes (may be greater than initial number if -OsubCloningRegion is specified) Canceled assemblies Number of skipped clonotypes Number of premature termination assembly events, percent of number of initial clonotypes Number of cancelled assemblies due to no hits on the final clone factory step Longest contig length Length of the longest contig Clustered variants Number of clusterized variant branches Reads in clustered variants Number of reads in clustered variants Reads in divided (newly created) clones Number of reads in the newly created clones (if -OsubCloningRegion is specified and hypermutated variants discovered) Clones with ambiguous letters in splitting region Number of clonotypes with ambiguous letters inside subCloningRegion (MiXCR will use N s for such letters) Reads in clones with ambiguous letters in splitting region Number of reads in such ambiguous clonotypes Average number of ambiguous letters per clone with ambiguous letters in splitting region Average number of ambiguous letters per clone with ambiguous letters in splitting region","title":"assembleContigs report"},{"location":"mixcr/reference/report-assemblePartial/","text":"assemblePartial report MiXCR generates a comprehensive summary of partial assembly performance. Assemble reports may be generated right along with assemblePartial command using -r / --report for txt report and -j/--json-report for report in a json format, or can be exported using exportReports command. Show sample report .txt .json ============== AssemblePartial Report ============== Analysis date: Thu Jul 28 11:51:13 CEST 2022 Input file(s): clones_newMiXcr/Donor1_MBC_2010_corrected.vdjca Output file(s): clones_newMiXcr/Donor1_MBC_2010_partialAssemble.vdjca Version: ; built=Fri Jul 15 01:51:38 CEST 2022; rev=aa769be87b; lib=repseqio.v2.0 Command line arguments: assemblePartial -f --report clones_newMiXcr/Donor1_MBC_2010_assemblePartialReport.txt -j clones_newMiXcr/Donor1_MBC_2010_assemblePartialReport.json clones_newMiXcr/Donor1_MBC_2010_corrected.vdjca clones_newMiXcr/Donor1_MBC_2010_partialAssemble.vdjca Analysis time: 12.71m Independent runs: 118472787 Total alignments analysed: 118472787 Number of output alignments: 118169463 (99.74%) Alignments already with CDR3 (no overlapping is performed): 5420162 (4.58%) Successfully overlapped alignments: 302715 (0.26%) Left parts with too small N-region (failed to extract k-mer): 4530050 (3.82%) Extracted k-mer diversity: 19607617 Dropped due to wildcard in k-mer: 0 (0%) Dropped due to too short NRegion parts in overlap: 51841 (0.04%) Dropped overlaps with empty N region due to no complete NDN coverage: 3958 (0%) Number of left-side alignments: 1835970 (1.55%) Number of right-side alignments: 3167157 (2.67%) Complex overlaps: 0 (0%) Over-overlaps: 197 (0%) Partial alignments written to output: 112446586 (94.91%) { \"type\" : \"partialAlignmentsAssemblerReport\" , \"commandLine\" : \"assemblePartial -f --report clones_newMiXcr/Donor1_MBC_2010_assemblePartialReport.txt -j clones_newMiXcr/Donor1_MBC_2010_assemblePartialReport.json clones_newMiXcr/Donor1_MBC_2010_corrected.vdjca clones_newMiXcr/Donor1_MBC_2010_partialAssemble.vdjca\" , \"inputFiles\" : [ \"clones_newMiXcr/Donor1_MBC_2010_corrected.vdjca\" ], \"outputFiles\" : [ \"clones_newMiXcr/Donor1_MBC_2010_partialAssemble.vdjca\" ], \"version\" : \"; built=Fri Jul 15 01:51:38 CEST 2022; rev=aa769be87b; lib=repseqio.v2.0\" , \"independentRuns\" : 6478545 , \"totalProcessed\" : 118472787 , \"outputAlignments\" : 118169463 , \"withCDR3\" : 5420162 , \"overlapped\" : 302715 , \"leftTooShortNRegion\" : 4530050 , \"kMerDiversity\" : 19607617 , \"droppedWildcardsInKMer\" : 0 , \"droppedSmallOverlapNRegion\" : 51841 , \"droppedNoNRegion\" : 3958 , \"leftParts\" : 1835970 , \"rightParts\" : 3167157 , \"complexOverlaps\" : 0 , \"overOverlaps\" : 197 , \"partialAlignmentsAsIs\" : 112446586 } Independent runs Number of independent assemblePartial rounds Total alignments analysed Number of total input alignments Number of output alignments Number of total output alignments Alignments already with CDR3 (no overlapping is performed) Number of input alignments that already covered CDR3 Successfully overlapped alignments Number of overlapped alignments Left parts with too small N-region (failed to extract k-mer) Number of left alignments with too small N-region (not enough entropy to assign to a unique molecule) Extracted k-mer diversity Number of different k-mers Dropped due to wildcard in k-mer Dropped alignments due wildcards in k-mers Dropped due to too short NRegion parts in overlap Dropped due too small number of N letters in overlap (not enough entropy to assign to a unique molecule) Dropped overlaps with empty N region due to no complete NDN coverage Dropped due absent N letters in overlap (not enough entropy to assign to a unique molecule) Number of left-side alignments Number of left alignments Number of right-side alignments Number of right alignments Complex overlaps Multiple overlaps for same molecule Over-overlaps Over overlaped alignments Partial alignments written to output Partial (no full CDR3) alignments written to output","title":"mixcr assemblePartial"},{"location":"mixcr/reference/report-assemblePartial/#assemblepartial-report","text":"MiXCR generates a comprehensive summary of partial assembly performance. Assemble reports may be generated right along with assemblePartial command using -r / --report for txt report and -j/--json-report for report in a json format, or can be exported using exportReports command. Show sample report .txt .json ============== AssemblePartial Report ============== Analysis date: Thu Jul 28 11:51:13 CEST 2022 Input file(s): clones_newMiXcr/Donor1_MBC_2010_corrected.vdjca Output file(s): clones_newMiXcr/Donor1_MBC_2010_partialAssemble.vdjca Version: ; built=Fri Jul 15 01:51:38 CEST 2022; rev=aa769be87b; lib=repseqio.v2.0 Command line arguments: assemblePartial -f --report clones_newMiXcr/Donor1_MBC_2010_assemblePartialReport.txt -j clones_newMiXcr/Donor1_MBC_2010_assemblePartialReport.json clones_newMiXcr/Donor1_MBC_2010_corrected.vdjca clones_newMiXcr/Donor1_MBC_2010_partialAssemble.vdjca Analysis time: 12.71m Independent runs: 118472787 Total alignments analysed: 118472787 Number of output alignments: 118169463 (99.74%) Alignments already with CDR3 (no overlapping is performed): 5420162 (4.58%) Successfully overlapped alignments: 302715 (0.26%) Left parts with too small N-region (failed to extract k-mer): 4530050 (3.82%) Extracted k-mer diversity: 19607617 Dropped due to wildcard in k-mer: 0 (0%) Dropped due to too short NRegion parts in overlap: 51841 (0.04%) Dropped overlaps with empty N region due to no complete NDN coverage: 3958 (0%) Number of left-side alignments: 1835970 (1.55%) Number of right-side alignments: 3167157 (2.67%) Complex overlaps: 0 (0%) Over-overlaps: 197 (0%) Partial alignments written to output: 112446586 (94.91%) { \"type\" : \"partialAlignmentsAssemblerReport\" , \"commandLine\" : \"assemblePartial -f --report clones_newMiXcr/Donor1_MBC_2010_assemblePartialReport.txt -j clones_newMiXcr/Donor1_MBC_2010_assemblePartialReport.json clones_newMiXcr/Donor1_MBC_2010_corrected.vdjca clones_newMiXcr/Donor1_MBC_2010_partialAssemble.vdjca\" , \"inputFiles\" : [ \"clones_newMiXcr/Donor1_MBC_2010_corrected.vdjca\" ], \"outputFiles\" : [ \"clones_newMiXcr/Donor1_MBC_2010_partialAssemble.vdjca\" ], \"version\" : \"; built=Fri Jul 15 01:51:38 CEST 2022; rev=aa769be87b; lib=repseqio.v2.0\" , \"independentRuns\" : 6478545 , \"totalProcessed\" : 118472787 , \"outputAlignments\" : 118169463 , \"withCDR3\" : 5420162 , \"overlapped\" : 302715 , \"leftTooShortNRegion\" : 4530050 , \"kMerDiversity\" : 19607617 , \"droppedWildcardsInKMer\" : 0 , \"droppedSmallOverlapNRegion\" : 51841 , \"droppedNoNRegion\" : 3958 , \"leftParts\" : 1835970 , \"rightParts\" : 3167157 , \"complexOverlaps\" : 0 , \"overOverlaps\" : 197 , \"partialAlignmentsAsIs\" : 112446586 } Independent runs Number of independent assemblePartial rounds Total alignments analysed Number of total input alignments Number of output alignments Number of total output alignments Alignments already with CDR3 (no overlapping is performed) Number of input alignments that already covered CDR3 Successfully overlapped alignments Number of overlapped alignments Left parts with too small N-region (failed to extract k-mer) Number of left alignments with too small N-region (not enough entropy to assign to a unique molecule) Extracted k-mer diversity Number of different k-mers Dropped due to wildcard in k-mer Dropped alignments due wildcards in k-mers Dropped due to too short NRegion parts in overlap Dropped due too small number of N letters in overlap (not enough entropy to assign to a unique molecule) Dropped overlaps with empty N region due to no complete NDN coverage Dropped due absent N letters in overlap (not enough entropy to assign to a unique molecule) Number of left-side alignments Number of left alignments Number of right-side alignments Number of right alignments Complex overlaps Multiple overlaps for same molecule Over-overlaps Over overlaped alignments Partial alignments written to output Partial (no full CDR3) alignments written to output","title":"assemblePartial report"},{"location":"mixcr/reference/report-correctAndSortTags/","text":"","title":"mixcr correctAndSortTags"},{"location":"mixcr/reference/report-extend/","text":"extend report MiXCR generates a comprehensive summary of extender performance. Extender reports may be generated right along with extend command using -r / --report for txt report and -j/--json-report for report in a json format, or can be exported using exportReports command. Show sample report .txt .json ============== Extend Report ============== Input file(s): result/Treg_REH_4h_rep1.rescued_1.vdjca Output file(s): result/Treg_REH_4h_rep1.extended.vdjca Version: ; built=Fri Jul 15 01:51:38 CEST 2022; rev=aa769be87b; lib=repseqio.v2.0 Command line arguments: --report result/Treg_REH_4h_rep1.report --threads 24 result/Treg_REH_4h_rep1.rescued_1.vdjca result/Treg_REH_4h_rep1.extended.vdjca Analysis time: 0ns Extended alignments count: 152 (3.57%) V extensions total: 0 (0%) V extensions with merged targets: 0 (0%) J extensions total: 152 (3.57%) J extensions with merged targets: 0 (0%) V+J extensions: 0 (0%) Mean V extension length: NaN Mean J extension length: 8.480263157894736 { \"type\" : \"extenderReport\" , \"commandLine\" : \"--report result/Treg_REH_4h_rep1.report --threads 24 result/Treg_REH_4h_rep1.rescued_1.vdjca result/Treg_REH_4h_rep1.extended.vdjca\" , \"inputFiles\" : [ \"result/Treg_REH_4h_rep1.rescued_1.vdjca\" ], \"outputFiles\" : [ \"result/Treg_REH_4h_rep1.extended.vdjca\" ], \"version\" : \"; built=Fri Jul 15 01:51:38 CEST 2022; rev=aa769be87b; lib=repseqio.v2.0\" , \"totalProcessed\" : 4252 , \"totalExtended\" : 152 , \"vExtended\" : 0 , \"vExtendedMerged\" : 0 , \"jExtended\" : 152 , \"jExtendedMerged\" : 0 , \"vjExtended\" : 0 , \"meanVExtensionLength\" : \"NaN\" , \"meanJExtensionLength\" : 8.480263157894736 } Extended alignments count Number of extended alignments/clones V extensions total Number of V-gene extensions V extensions with merged targets Number of V-gene extensions that lead to the overlap of targets (e.g. R1 and R2) J extensions total Number of J-gene extensions J extensions with merged targets Number of J-gene extensions that lead to the overlap of targets (e.g. R1 and R2) V+J extensions Number of alignments/clones where both V and J genes were extended Mean V extension length Mean nucleotide length of V extensions Mean J extension length Mean nucleotide length of J extensions","title":"mixcr extend"},{"location":"mixcr/reference/report-extend/#extend-report","text":"MiXCR generates a comprehensive summary of extender performance. Extender reports may be generated right along with extend command using -r / --report for txt report and -j/--json-report for report in a json format, or can be exported using exportReports command. Show sample report .txt .json ============== Extend Report ============== Input file(s): result/Treg_REH_4h_rep1.rescued_1.vdjca Output file(s): result/Treg_REH_4h_rep1.extended.vdjca Version: ; built=Fri Jul 15 01:51:38 CEST 2022; rev=aa769be87b; lib=repseqio.v2.0 Command line arguments: --report result/Treg_REH_4h_rep1.report --threads 24 result/Treg_REH_4h_rep1.rescued_1.vdjca result/Treg_REH_4h_rep1.extended.vdjca Analysis time: 0ns Extended alignments count: 152 (3.57%) V extensions total: 0 (0%) V extensions with merged targets: 0 (0%) J extensions total: 152 (3.57%) J extensions with merged targets: 0 (0%) V+J extensions: 0 (0%) Mean V extension length: NaN Mean J extension length: 8.480263157894736 { \"type\" : \"extenderReport\" , \"commandLine\" : \"--report result/Treg_REH_4h_rep1.report --threads 24 result/Treg_REH_4h_rep1.rescued_1.vdjca result/Treg_REH_4h_rep1.extended.vdjca\" , \"inputFiles\" : [ \"result/Treg_REH_4h_rep1.rescued_1.vdjca\" ], \"outputFiles\" : [ \"result/Treg_REH_4h_rep1.extended.vdjca\" ], \"version\" : \"; built=Fri Jul 15 01:51:38 CEST 2022; rev=aa769be87b; lib=repseqio.v2.0\" , \"totalProcessed\" : 4252 , \"totalExtended\" : 152 , \"vExtended\" : 0 , \"vExtendedMerged\" : 0 , \"jExtended\" : 152 , \"jExtendedMerged\" : 0 , \"vjExtended\" : 0 , \"meanVExtensionLength\" : \"NaN\" , \"meanJExtensionLength\" : 8.480263157894736 } Extended alignments count Number of extended alignments/clones V extensions total Number of V-gene extensions V extensions with merged targets Number of V-gene extensions that lead to the overlap of targets (e.g. R1 and R2) J extensions total Number of J-gene extensions J extensions with merged targets Number of J-gene extensions that lead to the overlap of targets (e.g. R1 and R2) V+J extensions Number of alignments/clones where both V and J genes were extended Mean V extension length Mean nucleotide length of V extensions Mean J extension length Mean nucleotide length of J extensions","title":"extend report"},{"location":"mixcr/reference/repseqio-compile/","text":"repseqio compile Compiles a library into self-contained compiled library file, by embedding sequence information into \"sequenceFragments\" section. Usage: repseqio compile [-f] [-s <length>] input.json[.gz] output.json[.gz] Options: -f, --force Force overwrite of output file(s). -s, --surrounding <length> Length of surrounding sequences to include into library. Number of upstream and downstream nucleotides around V/D/J/C segments to embed into output library's \"sequenceFragments\" section. More nucleotides will be included, more surrounding sequences will be possible to request using gene features with offset (like JRegion(-12, +3) ), at the same time size of output file will be greater. Default 30.","title":"compile"},{"location":"mixcr/reference/repseqio-compile/#repseqio-compile","text":"Compiles a library into self-contained compiled library file, by embedding sequence information into \"sequenceFragments\" section. Usage: repseqio compile [-f] [-s <length>] input.json[.gz] output.json[.gz] Options: -f, --force Force overwrite of output file(s). -s, --surrounding <length> Length of surrounding sequences to include into library. Number of upstream and downstream nucleotides around V/D/J/C segments to embed into output library's \"sequenceFragments\" section. More nucleotides will be included, more surrounding sequences will be possible to request using gene features with offset (like JRegion(-12, +3) ), at the same time size of output file will be greater. Default 30.","title":"repseqio compile"},{"location":"mixcr/reference/repseqio-debug/","text":"repseqio debug Outputs extensive information on genes in the library. Usage: repseqio debug [--all] [--name <regex>] input_library.json[.gz] Options: -a, --all Check all genes, used with -p option. -n, --name <regex> Gene name pattern, regexp string, all genes with matching gene name will be exported. -p, --problems Print only genes with problems, checks only functional genes by default (see -a option).","title":"debug"},{"location":"mixcr/reference/repseqio-debug/#repseqio-debug","text":"Outputs extensive information on genes in the library. Usage: repseqio debug [--all] [--name <regex>] input_library.json[.gz] Options: -a, --all Check all genes, used with -p option. -n, --name <regex> Gene name pattern, regexp string, all genes with matching gene name will be exported. -p, --problems Print only genes with problems, checks only functional genes by default (see -a option).","title":"repseqio debug"},{"location":"mixcr/reference/repseqio-fasta/","text":"repseqio fasta Exports sequences of genes to fasta file. Usage: repseqio fasta [-f] \\ [--chain <chain>] \\ [--gene-feature <geneFeature>] \\ [--imgt] \\ [--name <regexp>] \\ [--species <species>] \\ [--taxon-id <id>] \\ input_library.json|default \\ [output.fasta] Command line options: -f, --force ( default : does not overwrite) Force overwrite of output file(s). -c, --chain <chain> Chain pattern, regexp string, all genes with matching chain record will be exported. -g, --gene-feature <geneFeature> Gene feature to export (e.g. VRegion , JRegion , VTranscript , etc...) --imgt Format output similar to IMGT's reference (add IMGT gaps, similar header structure)) -n, --name <regexp> Gene name pattern, regexp string, all genes with matching gene name will be exported. -s, --species <species> Species name, used in the same way as --taxon-id . -t, --taxon-id <id> Taxon id (filter multi-library file to leave single library for specified taxon id)","title":"fasta"},{"location":"mixcr/reference/repseqio-fasta/#repseqio-fasta","text":"Exports sequences of genes to fasta file. Usage: repseqio fasta [-f] \\ [--chain <chain>] \\ [--gene-feature <geneFeature>] \\ [--imgt] \\ [--name <regexp>] \\ [--species <species>] \\ [--taxon-id <id>] \\ input_library.json|default \\ [output.fasta] Command line options: -f, --force ( default : does not overwrite) Force overwrite of output file(s). -c, --chain <chain> Chain pattern, regexp string, all genes with matching chain record will be exported. -g, --gene-feature <geneFeature> Gene feature to export (e.g. VRegion , JRegion , VTranscript , etc...) --imgt Format output similar to IMGT's reference (add IMGT gaps, similar header structure)) -n, --name <regexp> Gene name pattern, regexp string, all genes with matching gene name will be exported. -s, --species <species> Species name, used in the same way as --taxon-id . -t, --taxon-id <id> Taxon id (filter multi-library file to leave single library for specified taxon id)","title":"repseqio fasta"},{"location":"mixcr/reference/repseqio-filter/","text":"repseqio filter Filters libraries and library records. Usage: repseqio filter [-f] \\ [--chain <chain>] \\ [--species <species>] \\ [--taxon-id <id>] \\ input_library.json[.gz] output_library.json[.gz] -f, --force ( default : false) Force overwrite of output file(s). -c, --chain Chain pattern, regexp string, all genes with matching chain record will be collected. -s, --species <species> Species name, used in the same way as --taxon-id . -t, --taxon-id <id> Taxon id (filter multi-library file to leave single library for specified taxon id)","title":"filter"},{"location":"mixcr/reference/repseqio-filter/#repseqio-filter","text":"Filters libraries and library records. Usage: repseqio filter [-f] \\ [--chain <chain>] \\ [--species <species>] \\ [--taxon-id <id>] \\ input_library.json[.gz] output_library.json[.gz] -f, --force ( default : false) Force overwrite of output file(s). -c, --chain Chain pattern, regexp string, all genes with matching chain record will be collected. -s, --species <species> Species name, used in the same way as --taxon-id . -t, --taxon-id <id> Taxon id (filter multi-library file to leave single library for specified taxon id)","title":"repseqio filter"},{"location":"mixcr/reference/repseqio-format/","text":"repseqio format Format JSON in library; sort libraries in multi-library files, sort genes inside libraries. Usage: repseqio format [--compact] library.json[.gz] Options: -c, --compact Compact.","title":"format"},{"location":"mixcr/reference/repseqio-format/#repseqio-format","text":"Format JSON in library; sort libraries in multi-library files, sort genes inside libraries. Usage: repseqio format [--compact] library.json[.gz] Options: -c, --compact Compact.","title":"repseqio format"},{"location":"mixcr/reference/repseqio-fromFasta/","text":"repseqio fromFasta Creates boilerplate JSON library from existing fasta file. Usage: repseqio fromPaddedFasta [-f] \\ [--chains <chain>] \\ [--functionality-index <index>] \\ [--functionality-regexp <regexp>] \\ [--gene-feature <geneFeature>] \\ [--gene-type <gt>] \\ [--ignore-duplicates] \\ [--name-index <index>] \\ [--padding-character <char>] \\ [--species-name <species>] \\ [--taxon-id <id>] \\ [-Lkey=value]... \\ [-Pkey=value]... \\ input_padded.fasta \\ [output.fasta] \\ output.json[.gz] Options: -f, --force Force overwrite of output file(s). -c, --chain Chain -j, --functionality-index Functionality mark index (0-based) in | -separated FASTA description line (e.g. 3 for IMGT files). If this option is omitted, all genes are considered functional. --functionality-regexp Functionality regexp, gene is considered functional if field defined by -j / --functionality-index parameter matches this expression. Default: [\\(\\[]?[Ff].? . --gene-feature Defines gene feature which sequences are contained in the file (e.g. VRegion , VGene , JRegion etc..). -g, --gene-type Gene type (V/D/J/C) -i, --ignore-duplicates Ignore duplicate genes. By default duplicate genes are not ignored. -n, --name-index Gene name index (0-based) in | -separated FASTA description line (e.g. 1 for IMGT files). Default: 0. -s, --species-name Species names (can be used multiple times). Default: [] . -t, --taxon-id Taxon id -L Amino-acid pattern of anchor point. Has higher priority than -P for the same anchor point. The syntax is -Lkey=value . -P Positions of anchor points in padded / non-padded file. To define position relative to the end of sequence use negative values: -1 = sequence end, -2 = last but one letter. Example: -PFR1Begin=0 -PVEnd=-1 , equivalent of --gene-feature VRegion .","title":"fromFasta"},{"location":"mixcr/reference/repseqio-fromFasta/#repseqio-fromfasta","text":"Creates boilerplate JSON library from existing fasta file. Usage: repseqio fromPaddedFasta [-f] \\ [--chains <chain>] \\ [--functionality-index <index>] \\ [--functionality-regexp <regexp>] \\ [--gene-feature <geneFeature>] \\ [--gene-type <gt>] \\ [--ignore-duplicates] \\ [--name-index <index>] \\ [--padding-character <char>] \\ [--species-name <species>] \\ [--taxon-id <id>] \\ [-Lkey=value]... \\ [-Pkey=value]... \\ input_padded.fasta \\ [output.fasta] \\ output.json[.gz] Options: -f, --force Force overwrite of output file(s). -c, --chain Chain -j, --functionality-index Functionality mark index (0-based) in | -separated FASTA description line (e.g. 3 for IMGT files). If this option is omitted, all genes are considered functional. --functionality-regexp Functionality regexp, gene is considered functional if field defined by -j / --functionality-index parameter matches this expression. Default: [\\(\\[]?[Ff].? . --gene-feature Defines gene feature which sequences are contained in the file (e.g. VRegion , VGene , JRegion etc..). -g, --gene-type Gene type (V/D/J/C) -i, --ignore-duplicates Ignore duplicate genes. By default duplicate genes are not ignored. -n, --name-index Gene name index (0-based) in | -separated FASTA description line (e.g. 1 for IMGT files). Default: 0. -s, --species-name Species names (can be used multiple times). Default: [] . -t, --taxon-id Taxon id -L Amino-acid pattern of anchor point. Has higher priority than -P for the same anchor point. The syntax is -Lkey=value . -P Positions of anchor points in padded / non-padded file. To define position relative to the end of sequence use negative values: -1 = sequence end, -2 = last but one letter. Example: -PFR1Begin=0 -PVEnd=-1 , equivalent of --gene-feature VRegion .","title":"repseqio fromFasta"},{"location":"mixcr/reference/repseqio-fromPaddedFasta/","text":"repseqio fromPaddedFasta Converts library from padded fasta file (IMGT-like) to json library. This command can operate in two modes: if three input files are specified, it will create separate non-padded fasta and put links inside newly created library pointing to it. if 2 input files are specified, it will create only library file, and embed sequences directly into it. To use library generated using mode (1) one need both output files, (see also repseqio compile ). If library is intended for further editing and/or submission to version control system option (1) is recommended. Usage: repseqio fromPaddedFasta [-f] \\ [--chains <chain>] \\ [--functionality-index <index>] \\ [--functionality-regexp <regexp>] \\ [--gene-feature <geneFeature>] \\ [--gene-type <gt>] \\ [--ignore-duplicates] \\ [--name-index <index>] \\ [--padding-character <char>] \\ [--species-name <species>] \\ [--taxon-id <id>] \\ [-Lkey=value]... \\ [-Pkey=value]... \\ input_padded.fasta \\ [output.fasta] \\ output.json[.gz] Options: -f, --force Force overwrite of output file(s). -c, --chain <chain> Chain. -j, --functionality-index <index> Functionality mark index (0-based) in | -separated FASTA description line (e.g. 3 for IMGT files). If this option is omitted, all genes are considered functional. --functionality-regexp <regexp> Functionality regexp, gene is considered functional if field defined by -j / --functionality-index parameter matches this expression. Default: [\\(\\[]?[Ff].? . --gene-feature <geneFeature> Defines gene feature which sequences are contained in the file(e.g. VRegion , VGene , JRegion etc..). -g, --gene-type <gt> Gene type (V/D/J/C) -i, --ignore-duplicates Ignore duplicate genes. Default behavior: duplicates are not ignored. -n, --name-index <index> Gene name index (0-based) in | -separated FASTA description line(e.g. 1 for IMGT files). Default is 0 . -p, --padding-character <char> Padding character. Default: . . -s, --species-name <species> Species names (can be used multiple times) -t, --taxon-id <id> Taxon id -L Amino-acid pattern of anchor point. Has higher priority than -P for the same anchor point. Syntax is -Lkey=value . -P Positions of anchor points in padded / non-padded file. To define position relative to the end of sequence use negative values: -1 = sequence end, -2 = last but one letter. Example: -PFR1Begin=0 -PVEnd=-1 , equivalent of --gene-feature VRegion .","title":"fromPaddedFasta"},{"location":"mixcr/reference/repseqio-fromPaddedFasta/#repseqio-frompaddedfasta","text":"Converts library from padded fasta file (IMGT-like) to json library. This command can operate in two modes: if three input files are specified, it will create separate non-padded fasta and put links inside newly created library pointing to it. if 2 input files are specified, it will create only library file, and embed sequences directly into it. To use library generated using mode (1) one need both output files, (see also repseqio compile ). If library is intended for further editing and/or submission to version control system option (1) is recommended. Usage: repseqio fromPaddedFasta [-f] \\ [--chains <chain>] \\ [--functionality-index <index>] \\ [--functionality-regexp <regexp>] \\ [--gene-feature <geneFeature>] \\ [--gene-type <gt>] \\ [--ignore-duplicates] \\ [--name-index <index>] \\ [--padding-character <char>] \\ [--species-name <species>] \\ [--taxon-id <id>] \\ [-Lkey=value]... \\ [-Pkey=value]... \\ input_padded.fasta \\ [output.fasta] \\ output.json[.gz] Options: -f, --force Force overwrite of output file(s). -c, --chain <chain> Chain. -j, --functionality-index <index> Functionality mark index (0-based) in | -separated FASTA description line (e.g. 3 for IMGT files). If this option is omitted, all genes are considered functional. --functionality-regexp <regexp> Functionality regexp, gene is considered functional if field defined by -j / --functionality-index parameter matches this expression. Default: [\\(\\[]?[Ff].? . --gene-feature <geneFeature> Defines gene feature which sequences are contained in the file(e.g. VRegion , VGene , JRegion etc..). -g, --gene-type <gt> Gene type (V/D/J/C) -i, --ignore-duplicates Ignore duplicate genes. Default behavior: duplicates are not ignored. -n, --name-index <index> Gene name index (0-based) in | -separated FASTA description line(e.g. 1 for IMGT files). Default is 0 . -p, --padding-character <char> Padding character. Default: . . -s, --species-name <species> Species names (can be used multiple times) -t, --taxon-id <id> Taxon id -L Amino-acid pattern of anchor point. Has higher priority than -P for the same anchor point. Syntax is -Lkey=value . -P Positions of anchor points in padded / non-padded file. To define position relative to the end of sequence use negative values: -1 = sequence end, -2 = last but one letter. Example: -PFR1Begin=0 -PVEnd=-1 , equivalent of --gene-feature VRegion .","title":"repseqio fromPaddedFasta"},{"location":"mixcr/reference/repseqio-inferPoints/","text":"repseqio inferPoints Try to infer anchor point positions from gene sequences of other libraries. If no reference libraries are specified, built-in library will be used. Usage: repseqio inferPoints [-f] \\ [--gene-feature <geneFeature>] \\ [--min-score <score>] \\ [--name <name>] \\ [--only-modified] \\ input_library.json \\ [reference_library1.json [reference_library2.json [....]]] \\ output.json Options: -f, --force Force overwrite of output file(s). -g, --gene-feature <geneFeature> Reference gene feature to use (e.g. VRegion , JRegion , VTranscript , etc...). This feature will be used to align target genes with reference genes. Target genes must have this gene feature. This option can be used several times, to specify several target gene features. Inference will be performed in order options are specified. -m, --min-score <score> Absolute minimal score. Alignment is performed using amino acid sequences (target is queried using all three reading frames) using BLOSUM62 matrix. Default for V gene is 200 and for J gene is 50. -n, --name <name> Gene name pattern, regexp string, all genes with matching gene name will be exported. -o, --only-modified Output only modified records.","title":"inferPoints"},{"location":"mixcr/reference/repseqio-inferPoints/#repseqio-inferpoints","text":"Try to infer anchor point positions from gene sequences of other libraries. If no reference libraries are specified, built-in library will be used. Usage: repseqio inferPoints [-f] \\ [--gene-feature <geneFeature>] \\ [--min-score <score>] \\ [--name <name>] \\ [--only-modified] \\ input_library.json \\ [reference_library1.json [reference_library2.json [....]]] \\ output.json Options: -f, --force Force overwrite of output file(s). -g, --gene-feature <geneFeature> Reference gene feature to use (e.g. VRegion , JRegion , VTranscript , etc...). This feature will be used to align target genes with reference genes. Target genes must have this gene feature. This option can be used several times, to specify several target gene features. Inference will be performed in order options are specified. -m, --min-score <score> Absolute minimal score. Alignment is performed using amino acid sequences (target is queried using all three reading frames) using BLOSUM62 matrix. Default for V gene is 200 and for J gene is 50. -n, --name <name> Gene name pattern, regexp string, all genes with matching gene name will be exported. -o, --only-modified Output only modified records.","title":"repseqio inferPoints"},{"location":"mixcr/reference/repseqio-json-format/","text":"Repseq.IO JSON library format Format supports: - references to external sequences (from separate file, HTTP link, NCBI sequence accession, etc.) - as well sequence information may be embedded inside library file, for convenient distribution ( repseqio util has special action to convert library with external sequence links into a single self-contained file, see repseqio compile ) library with embedded sequences is not intended for manual editing or submission into version control system like git . Complete library example my_genes.v.fasta (contain VRegion, i.e. from the FR1 begin to the last nucleotide before RSS normally after conserved cysteine) >TRBV12-348*00|F GATGCTGGAGTTATCCAGTCACCCCGCCATGAGGTGACAGAGATGGGACAAGAAGTGACTCTGAGATGTAAACCA ATTTCAGGCCACAACTCCCTTTTCTGGTACAGACAGACCATGATGCGGGGACTGGAGTTGCTCATTTACTTTAAC AACAACGTTCCGATAGATGATTCAGGGATGCCCGAGGATCGATTCTCAGCTAAGATGCCTAATGCATCATTCTCC ACTCTGAAGATCCAGCCCTCAGAACCCAGGGACTCAGCTGTGTACTTCTGTGCCAGCAGTTTAGC my_genes.j.fasta (contains JRegion, i.e. from first J gene nucleotide, right after RSS, until FR4 end) >TRBJ1-528*00|F TAACAACCAGGCCCAGTATTTTGGAGAAGGGACTCGGCTCTCTGTTCTAG library.json [ { \"taxonId\" : 9606 , \"speciesNames\" : [ \"homosapiens\" , \"homsap\" , \"hs\" , \"hsa\" , \"human\" ], \"genes\" : [ { \"baseSequence\" : \"file://my_genes.v.fasta#TRBV12-348*00\" , \"name\" : \"TRBV12-38*00\" , \"geneType\" : \"V\" , \"isFunctional\" : true , \"chains\" : [ \"TRB\" ], \"anchorPoints\" : { \"FR1Begin\" : 0 , \"CDR1Begin\" : 78 , \"FR2Begin\" : 93 , \"CDR2Begin\" : 144 , \"FR3Begin\" : 162 , \"CDR3Begin\" : 273 , \"VEnd\" : 290 } }, { \"baseSequence\" : \"file://my_genes.j.fasta#TRBJ1-528*00\" , \"name\" : \"TRBJ1-528*00\" , \"geneType\" : \"J\" , \"isFunctional\" : true , \"chains\" : [ \"TRB\" ], \"anchorPoints\" : { \"JBegin\" : 0 , \"FR4Begin\" : 22 , \"FR4End\" : 50 } } ] } ] positions are 0-based. All files must be in the same folder. Gene libraries in repseqio are addressed by NCBI's taxon id of the species and library's file name. You can also specify short species names, to be automatically resolved to taxon id in commands like mixcr align -s homsap ... ( speciesNames field). You also can have several libraries for several species in a single file (e.g. [{...library1...},{...library2...}] ) Each gene is defined by its * name * geneType * wether it isFunctional or not * immunological receptor chains it can form (may be multiple values, e.g. some V genes from TRA / TRD can form alpha or delta T-cell receptor chain depending on the cell lineage) * baseSequence - URL-like address of the original sequence for this gene. In the above example, address points to the specific record in the local fasta file. The value after hash symbol points to the target sequence name from multi-sequence fasta file (sequence identifiers are separated by | symbol in original file, any identifier unique inside the file can be used) * zero-based positions of anchorPoints relative to the baseSequence See main repseqio library for real example. Basic manipulations with the library: Extracting particular gene feature sequence: repseqio fasta -gene-feature FR1 my_library.json Embedding all sequencing information: repseqio compile my_library.json my_library.compiled.json my_library.compiled.json will contain all sequence information required for library usage So now having only my_library.compiled.json one can perform the same library manipulations repseqio fasta -gene-feature FR1 my_library.compiled.json","title":"RepSeq.io JSON format"},{"location":"mixcr/reference/repseqio-json-format/#repseqio-json-library-format","text":"Format supports: - references to external sequences (from separate file, HTTP link, NCBI sequence accession, etc.) - as well sequence information may be embedded inside library file, for convenient distribution ( repseqio util has special action to convert library with external sequence links into a single self-contained file, see repseqio compile ) library with embedded sequences is not intended for manual editing or submission into version control system like git .","title":"Repseq.IO JSON library format"},{"location":"mixcr/reference/repseqio-json-format/#complete-library-example","text":"my_genes.v.fasta (contain VRegion, i.e. from the FR1 begin to the last nucleotide before RSS normally after conserved cysteine) >TRBV12-348*00|F GATGCTGGAGTTATCCAGTCACCCCGCCATGAGGTGACAGAGATGGGACAAGAAGTGACTCTGAGATGTAAACCA ATTTCAGGCCACAACTCCCTTTTCTGGTACAGACAGACCATGATGCGGGGACTGGAGTTGCTCATTTACTTTAAC AACAACGTTCCGATAGATGATTCAGGGATGCCCGAGGATCGATTCTCAGCTAAGATGCCTAATGCATCATTCTCC ACTCTGAAGATCCAGCCCTCAGAACCCAGGGACTCAGCTGTGTACTTCTGTGCCAGCAGTTTAGC my_genes.j.fasta (contains JRegion, i.e. from first J gene nucleotide, right after RSS, until FR4 end) >TRBJ1-528*00|F TAACAACCAGGCCCAGTATTTTGGAGAAGGGACTCGGCTCTCTGTTCTAG library.json [ { \"taxonId\" : 9606 , \"speciesNames\" : [ \"homosapiens\" , \"homsap\" , \"hs\" , \"hsa\" , \"human\" ], \"genes\" : [ { \"baseSequence\" : \"file://my_genes.v.fasta#TRBV12-348*00\" , \"name\" : \"TRBV12-38*00\" , \"geneType\" : \"V\" , \"isFunctional\" : true , \"chains\" : [ \"TRB\" ], \"anchorPoints\" : { \"FR1Begin\" : 0 , \"CDR1Begin\" : 78 , \"FR2Begin\" : 93 , \"CDR2Begin\" : 144 , \"FR3Begin\" : 162 , \"CDR3Begin\" : 273 , \"VEnd\" : 290 } }, { \"baseSequence\" : \"file://my_genes.j.fasta#TRBJ1-528*00\" , \"name\" : \"TRBJ1-528*00\" , \"geneType\" : \"J\" , \"isFunctional\" : true , \"chains\" : [ \"TRB\" ], \"anchorPoints\" : { \"JBegin\" : 0 , \"FR4Begin\" : 22 , \"FR4End\" : 50 } } ] } ] positions are 0-based. All files must be in the same folder. Gene libraries in repseqio are addressed by NCBI's taxon id of the species and library's file name. You can also specify short species names, to be automatically resolved to taxon id in commands like mixcr align -s homsap ... ( speciesNames field). You also can have several libraries for several species in a single file (e.g. [{...library1...},{...library2...}] ) Each gene is defined by its * name * geneType * wether it isFunctional or not * immunological receptor chains it can form (may be multiple values, e.g. some V genes from TRA / TRD can form alpha or delta T-cell receptor chain depending on the cell lineage) * baseSequence - URL-like address of the original sequence for this gene. In the above example, address points to the specific record in the local fasta file. The value after hash symbol points to the target sequence name from multi-sequence fasta file (sequence identifiers are separated by | symbol in original file, any identifier unique inside the file can be used) * zero-based positions of anchorPoints relative to the baseSequence See main repseqio library for real example.","title":"Complete library example"},{"location":"mixcr/reference/repseqio-json-format/#basic-manipulations-with-the-library","text":"Extracting particular gene feature sequence: repseqio fasta -gene-feature FR1 my_library.json Embedding all sequencing information: repseqio compile my_library.json my_library.compiled.json my_library.compiled.json will contain all sequence information required for library usage So now having only my_library.compiled.json one can perform the same library manipulations repseqio fasta -gene-feature FR1 my_library.compiled.json","title":"Basic manipulations with the library:"},{"location":"mixcr/reference/repseqio-merge/","text":"repseqio merge Merge several libraries into single library. Usage: merge [ -f ] [ input1.json [ .gz ] [ input2.json [ .gz ] [ ... ] ] ] output.json [ .gz ]","title":"merge"},{"location":"mixcr/reference/repseqio-merge/#repseqio-merge","text":"Merge several libraries into single library. Usage: merge [ -f ] [ input1.json [ .gz ] [ input2.json [ .gz ] [ ... ] ] ] output.json [ .gz ]","title":"repseqio merge"},{"location":"mixcr/reference/repseqio-stat/","text":"repseqio stat Print library statistics. Usage: repseqio stat input_library.json","title":"stat"},{"location":"mixcr/reference/repseqio-stat/#repseqio-stat","text":"Print library statistics. Usage: repseqio stat input_library.json","title":"repseqio stat"},{"location":"mixcr/reference/repseqio-tsv/","text":"repseqio tsv Export gene region coordinates to .tsv file. To output 1-based coordinates add -1 / --one-based option. Usage: repseqio tsv [-f] \\ [--chain <chain>] \\ [--gene-feature <geneFeature>] \\ [--name <regex>] \\ [--one-based] \\ [--species <species>] \\ [--taxon-id <id>] \\ input_library.json|default [output.txt] Options: -f, --force Force overwrite of output file(s). -c, --chain <chain> Chain pattern, regexp string, all genes with matching chain record will be exported. -g, --gene-feature <geneFeature> Gene feature(s) to export (e.g. VRegion , JRegion , VTranscript , etc...). To specify several features use this option several times or separate multiple regions with commas. -n, --name <regex> Gene name pattern, regexp string, all genes with matching gene name will be exported. -1, --one-based Use one-based coordinates instead of zero-based and output inclusive end position. By default, zero-based coordinates are used. -s, --species <species> Species name, used in the same way as --taxon-id . -t, --taxon-id <id> Taxon id (filter multi-library file to leave single library for specified taxon id)","title":"tsv"},{"location":"mixcr/reference/repseqio-tsv/#repseqio-tsv","text":"Export gene region coordinates to .tsv file. To output 1-based coordinates add -1 / --one-based option. Usage: repseqio tsv [-f] \\ [--chain <chain>] \\ [--gene-feature <geneFeature>] \\ [--name <regex>] \\ [--one-based] \\ [--species <species>] \\ [--taxon-id <id>] \\ input_library.json|default [output.txt] Options: -f, --force Force overwrite of output file(s). -c, --chain <chain> Chain pattern, regexp string, all genes with matching chain record will be exported. -g, --gene-feature <geneFeature> Gene feature(s) to export (e.g. VRegion , JRegion , VTranscript , etc...). To specify several features use this option several times or separate multiple regions with commas. -n, --name <regex> Gene name pattern, regexp string, all genes with matching gene name will be exported. -1, --one-based Use one-based coordinates instead of zero-based and output inclusive end position. By default, zero-based coordinates are used. -s, --species <species> Species name, used in the same way as --taxon-id . -t, --taxon-id <id> Taxon id (filter multi-library file to leave single library for specified taxon id)","title":"repseqio tsv"},{"location":"tips/test/","text":"Test page. Note content Note content Tips content Abstract content Info content Success content Question content Warning content Failure content Danger content Error content Bug content Bug content","title":"Test"},{"location":"tips/usefullBashScripts/","text":"Here you can find some useful commands that will help you use the software more efficient. Running MiXCR on multiple files in a folder. There are few ways how you can run the software on multiple files.","title":"usefullBashScripts"}]}